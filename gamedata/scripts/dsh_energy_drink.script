-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm ) -- для менеджера сигналов
  sm:subscribe({
    signal = "on_before_actor_conditions_update",
    fun    = this.on_actor_conditions_update
  })
  sm:subscribe({ signal = "on_sleep_finished", fun = this.on_sleep_finished })
  sm:subscribe({ signal = "on_spawn",          fun = this.on_spawn          })
  sm:subscribe({ signal = "on_use",            fun = this.on_use            })
end


local end_timer
local energy_drink_boost  = 0
local energy_drink_in_use = false
local snd_in_use_name = "affects\\heartbeat"
local timers = {
  [ "can_boost"        ] = script_name() .. ".can_boost",
  [ "use_energy_drink" ] = script_name() .. ".use_energy_drink",
}


function on_spawn()
  if ogse_st_mgr.timer_exists( timers.use_energy_drink ) then
    energy_drink_in_use = true
  end
  energy_drink_boost = ogse.load_var(
    script_name() .. ".energy_drink_boost", 0
  )
end


function on_actor_conditions_update( ext )
  if energy_drink_in_use then
    ext.power_restore_speed   = ext.power_restore_speed
      + 0.011 * energy_drink_boost -- +200
    ext.satiety_restore_speed = ext.satiety_restore_speed - 0.000055 -- -550%
    ext.sprint_koef_add       = ext.sprint_koef_add + 0.4
  end
end


function on_use( obj )
  local sect = obj:section()
  if sect == "energy_drink" then
    use_energy_drink()
  end
end


local snd_in_use
function use_energy_drink()
  local n = ogse.load_var( script_name() .. ".energy_drink_n", 0 )
  if
    n < 3
    and (
      ogse_st_mgr.timer_exists( timers.can_boost )
      or not energy_drink_in_use
    )
  then
    if not energy_drink_in_use then
      ogse_st_mgr.delayed_fun_start( timers.use_energy_drink )
        :set_gdelay( 3600 * 1.5 - 1800 * n )
        :init( script_name() .. ".on_energy_drink_end" )
        :start()
      ogse_st_mgr.delayed_fun_start( timers.can_boost )
        :set_delay( 60 )
        :init( script_name() .. ".on_energy_drink_can_boost_end" )
        :start( true )
      if end_timer then
        end_timer:stop()
        end_timer = nil
      end
      if snd_in_use then
        snd_in_use:stop()
      end
      set_actor_power_max( 1 )
    end
    energy_drink_in_use = true
    ogse.save_var( script_name() .. ".energy_drink_n", n + 1, "u8" )
    energy_drink_boost = energy_drink_boost + 1
    ogse.save_var(
      script_name() .. ".energy_drink_boost", energy_drink_boost, "u8"
    )
  end
end

function on_energy_drink_can_boost_end() end


function on_energy_drink_end()
  if not snd_in_use then
    snd_in_use = sound_object( snd_in_use_name )
  end
  snd_in_use:play( db.actor, 0, sound_object.s2d )
  end_timer = dsh.timeout( snd_in_use:length(), post_energy_drink_end1 )
  ogse.delete_var( script_name() .. ".energy_drink_boost" )
  energy_drink_boost  = 0
  energy_drink_in_use = false
end


function post_energy_drink_end1()
  set_actor_power_max( 0.1 )
  local n = ogse.load_var( script_name() .. ".energy_drink_n", 1 )
  end_timer = dsh.timeout( 3000 * n, post_energy_drink_end2 )
end


function post_energy_drink_end2()
  end_timer = nil
  set_actor_power_max( 1 )
end


function on_sleep_finished( sleep_seconds )
  local sleep_hours = math.floor( sleep_seconds / 3600 )
  local n = ogse.load_var( script_name() .. ".energy_drink_n", 0 )
  if n > sleep_hours then
    ogse.save_var( script_name() .. ".energy_drink_n", n - sleep_hours, "u8" )
  else
    ogse.delete_var( script_name() .. ".energy_drink_n" )
  end
end
