-- -*- mode: lua; coding: windows-1251-dos -*-
--/amk_rel_1/
-- инициализация

class "amk_options" (CUIScriptWnd)
 
function amk_options:__init(owner) super()
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function amk_options:__finalize() end
	
function amk_options:InitControls()
	self:Init(0,0,1024,768)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_amk_options_wnd.xml")
	--xml:InitStatic("back_video", 				self)
	xml:InitStatic("background",				self)	
	--xml:InitStatic("newspaper_video",			self)	

	self.form = xml:InitStatic("form",			self)
	self.scroll_view = xml:InitScrollView("form:scroll", self.form)
	
	xml:InitStatic("form:caption",				self.form)
	xml:InitStatic("form:picture",				self.form)
	xml:InitStatic("form:info_pic",				self.form)
	
	ctrl = xml:Init3tButton("form:btn_quit", 	self.form)
	self:Register(ctrl, "btn_quit")
	
	local _st1 = xml:InitStatic("form:templ_item", self.scroll_view)
	local radio_hud = xml:InitTab("form:radio_amk_hud", _st1)
	self:Register(radio_hud, "radio_amk_hud")	
	self.radio_hud = radio_hud
	radio_hud:SetNewActiveTab(amk.load_variable("option_hud",2))
	
	local radio_mus = xml:InitTab("form:radio_amk_mus", _st1)
	self:Register(radio_mus, "radio_amk_mus")	
	self.radio_mus = radio_mus
	radio_mus:SetNewActiveTab(amk.load_variable("option_mus",0))

	local _st2 = xml:InitStatic("form:templ_item", self.scroll_view)
	local radio_treasure = xml:InitTab("form:radio_amk_treasure", _st2)
	self:Register(radio_treasure, "radio_amk_treasure")	
	self.radio_treasure = radio_treasure
	radio_treasure:SetNewActiveTab(amk.load_variable("option_treasure",0))

	local radio_rad = xml:InitTab("form:radio_amk_rad", _st2)
	self:Register(radio_rad, "radio_amk_rad")	
	self.radio_rad = radio_rad
	radio_rad:SetNewActiveTab(amk.load_variable("option_rad",1))

	local _st3 = xml:InitStatic( "form:templ_item_2x1", self.scroll_view )
	self.norain = xml:InitCheck( "form:check_norain", _st3 )
        self.norain:SetCheck( ui_mm_opt_main.GetOption( "weather_norain" ) )
	self:Register( self.norain, "check_norain" )

	self.art_degrad = xml:InitCheck( "form:check_art_degradation", _st3 )
        self.art_degrad:SetCheck(
          ui_mm_opt_main.GetOption( "art_degradation" )
        )
	self:Register( self.art_degrad, "check_art_degradation" )
	
	local _st4 = xml:InitStatic( "form:templ_item_2x1", self.scroll_view )
	self.dsh_classic_battles = xml:InitCheck( "form:check_dsh_classic_battles", _st4 )
        self.dsh_classic_battles:SetCheck( ui_mm_opt_main.GetOption( "dsh_classic_battles" ) )
	self:Register( self.dsh_classic_battles, "check_dsh_classic_battles" )

	self.dsh_antifreeze = xml:InitCheck( "form:check_dsh_antifreeze", _st4 )
        self.dsh_antifreeze:SetCheck( ui_mm_opt_main.GetOption( "dsh_antifreeze" ) )
	self:Register( self.dsh_antifreeze, "check_dsh_antifreeze" )
	
	local _st5 = xml:InitStatic( "form:templ_item_2x1", self.scroll_view )
	self.smart_monster_parts = xml:InitCheck(
          "form:check_smart_monster_parts", _st5
        )
        self.smart_monster_parts:SetCheck(
          ui_mm_opt_main.GetOption( "smart_monster_parts" )
        )
	self:Register( self.smart_monster_parts, "check_smart_monster_parts" )
	self.monster_parts_sound = xml:InitCheck(
          "form:check_monster_parts_sound", _st5
        )
        self.monster_parts_sound:SetCheck(
          ui_mm_opt_main.GetOption( "monster_parts_sound" )
        )
	self:Register( self.monster_parts_sound, "check_monster_parts_sound" )
	
	local _st6 = xml:InitStatic( "form:templ_item_2x1", self.scroll_view )
	self.hud_plus_enabled = xml:InitCheck(
          "form:check_hud_plus_enabled", _st6
        )
        self.hud_plus_enabled:SetCheck(
          ui_mm_opt_main.GetOption( "hud_plus_enabled" )
        )
	self:Register( self.hud_plus_enabled, "check_hud_plus_enabled" )
	self.magic_rukzak_enabled = xml:InitCheck(
          "form:check_magic_rukzak_enabled", _st6
        )
        self.magic_rukzak_enabled:SetCheck(
          ui_mm_opt_main.GetOption( "magic_rukzak_enabled" )
        )
	self:Register( self.magic_rukzak_enabled, "check_magic_rukzak_enabled" )
	
	local _st7 = xml:InitStatic( "form:templ_item_2x1", self.scroll_view )
	self.classic_treasure_icons = xml:InitCheck(
          "form:check_classic_treasure_icons", _st7
        )
        self.classic_treasure_icons:SetCheck(
          ui_mm_opt_main.GetOption( "classic_treasure_icons" )
        )
	self:Register( self.classic_treasure_icons, "check_classic_treasure_icons" )
	self.map_some_treasures = xml:InitCheck(
          "form:check_map_some_treasures", _st7
        )
        self.map_some_treasures:SetCheck(
          ui_mm_opt_main.GetOption( "map_some_treasures" )
        )
	self:Register( self.map_some_treasures, "check_map_some_treasures" )
	
	self:Register(xml:Init3tButton("form:btn_okay", self.form),"btn_okay")

end

function amk_options:InitCallBacks()
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.on_quit, self)
	self:AddCallback("btn_okay", ui_events.BUTTON_CLICKED, self.on_okay, self)
end

function amk_options:on_okay()

	local radio_mus = self:GetTabControl("radio_amk_mus")
	local radio_hud = self:GetTabControl("radio_amk_hud")
	local radio_treasure = self:GetTabControl("radio_amk_treasure")
	local radio_rad = self:GetTabControl("radio_amk_rad")
	
	amk.save_variable("option_mus", radio_mus:GetActiveIndex() )
	amk.save_variable("option_hud", radio_hud:GetActiveIndex() )
	amk.save_variable("option_treasure", radio_treasure:GetActiveIndex() )
	amk.save_variable("option_rad", radio_rad:GetActiveIndex() )

	local changed = ui_mm_opt_main.SwitchOption( "weather_norain", self.norain:GetCheck() )
	if changed and self.norain:GetCheck() then
	  ogse_weather_mgr.get_weather_mgr():force_new_weather()
	end

	changed = ui_mm_opt_main.SwitchOption(
          "art_degradation", self.art_degrad:GetCheck()
        )
        if changed then
          local sm = ogse_signals.get_mgr()
	  if self.art_degrad:GetCheck() then
	    dsh_art_degrad.attach( sm )
          else
	    dsh_art_degrad.detach( sm )
            inventory.check_immunities( nil )
            inventory.forced_inventory_update( false )
	  end
        end

	changed = ui_mm_opt_main.SwitchOption(
          "dsh_classic_battles", self.dsh_classic_battles:GetCheck()
        )
	changed = ui_mm_opt_main.SwitchOption(
          "dsh_antifreeze", self.dsh_antifreeze:GetCheck()
        )

	changed = ui_mm_opt_main.SwitchOption(
          "smart_monster_parts", self.smart_monster_parts:GetCheck()
        )

	changed = ui_mm_opt_main.SwitchOption(
          "monster_parts_sound", self.monster_parts_sound:GetCheck()
        )

	changed = ui_mm_opt_main.SwitchOption(
          "hud_plus_enabled", self.hud_plus_enabled:GetCheck()
        )
        if changed then
          local sm = ogse_signals.get_mgr()
	  if self.hud_plus_enabled:GetCheck() then
	    dsh_hud_fx.attach( sm )
          else
	    dsh_hud_fx.detach( sm )
	  end
        end

	changed = ui_mm_opt_main.SwitchOption(
          "magic_rukzak_enabled", self.magic_rukzak_enabled:GetCheck()
        )

	changed = ui_mm_opt_main.SwitchOption(
          "classic_treasure_icons", self.classic_treasure_icons:GetCheck()
        )

	changed = ui_mm_opt_main.SwitchOption(
          "map_some_treasures", self.map_some_treasures:GetCheck()
        )
	
	self:on_quit()
	
end

function amk_options:on_quit()
	self:GetHolder():start_stop_menu (self.owner, true)
	self:GetHolder():start_stop_menu (self,true)
	self.owner:Show	(true)
end

function amk_options:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
-- на выход повесим Esc
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
		if dik == DIK_keys.DIK_RETURN then
			self:on_okay()
		end
	end
	return true
end

