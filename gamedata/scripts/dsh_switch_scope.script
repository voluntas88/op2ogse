-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_key_down",    fun = this.on_key_down    })
  sm:subscribe({ signal = "on_wpn_gl_mode", fun = this.on_wpn_gl_mode })
end


function on_key_down( key, bind )
  if key ~= dsh.get_kbd_key( "switch_scope" ) then return end
  if not (
    db.actor:active_slot() == 1 or db.actor:active_slot() == 2
  ) then return end
  local wpn = db.actor:active_item()
  if not wpn then return end
  if ogse_wpn_utils.get_scope_status( wpn ) == 1 then
    return switch_int_scope( wpn )
  end
  if not ogse_wpn_utils.get_scope_status( wpn ) == 2 then return end

  local sect         = wpn:section()
  local scope_status = ogse_wpn_utils.get_scope_flag( wpn )
  local scope_sect   = get_string_wq( sect, "scope_name" )
  if not scope_sect then return end
  local scope_width  = get_u32( scope_sect, "inv_grid_width" )
  local snd_fname
  if scope_status then
    if db.actor:belt_count() <= sys_ini:r_u32( "inventory", "max_belt" ) - scope_width then
      local sobj = ogse.spawn_item_in_inv( scope_sect )
      level.client_spawn_manager():add(
        sobj.id, -1, function( id, obj )
          db.actor:move_to_belt( obj )
          inventory.forced_inventory_update( false )
        end
      )
    else
      return
    end
    snd_fname = "interface\\inv_detach_addon"
  else
    local scope_obj = inventory.on_belt_obj( scope_sect )
    if scope_obj then
      ogse.remove_item_from_inventory( scope_obj[ 1 ] )
      inventory.forced_inventory_update( false )
    else
      return
    end
    snd_fname = "interface\\inv_attach_addon"
  end

  local wpn_info = dsh_rukzak.get_wpn_info( wpn )
  local cond     = wpn:condition()
  db.actor:move_to_ruck( wpn )
  local swpn = alife():object( wpn:id() )
  alife():release( swpn, true )
  local snd = sound_object( snd_fname )
  snd:play( db.actor, 0, sound_object.s2d )
  dsh.timeout(
    snd:length() * 1.15, function()
      local sobj = dsh_rukzak.spawn_weapon_in_inv(
        sect, wpn_info, db.actor,
        {
          scope = ( not scope_status ),
        }
      )
      level.client_spawn_manager():add(
        sobj.id, -1, function( id, obj )
          obj:set_condition( cond )
        end
      )
    end
  )
end


function switch_int_scope( wpn )
  local binder = wpn:binded_object()
  if not binder then return end
  local sect = wpn:section()
  local hud  = get_string( sect, "hud" )
  local iron_hud = hud .. ".iron"
  if not sys_ini:section_exist( iron_hud ) then return end
  local flag = script_name() .. ".use_iron_scope"
  db.actor:hide_weapon()
  if binder[ flag ] then
    enable_int_scope( wpn )
  else
    enable_iron_scope( wpn )
  end
  binder[ flag ] = not binder[ flag ]
  dsh.timeout(
    1000, function()
      db.actor:restore_weapon()
    end
  )
end


function enable_int_scope( wpn )
  local sect = wpn:section()
  local hud  = get_string( sect, "hud" )
  ogse_wpn_utils.set_forced_notex_scope( wpn, false )
  ogse_wpn_utils.set_hud_offset(
    wpn, get_numbers( hud, "zoom_offset" )
  )
  local zrx = get_float( hud, "zoom_rotate_x" )
  local zry = get_float( hud, "zoom_rotate_y" )
  ogse_wpn_utils.set_hud_rotate( wpn, { zrx, zry } )
  ogse_wpn_utils.set_scope_zoom_factor(
    wpn, get_float( sect, "scope_zoom_factor" )
  )
end


function enable_iron_scope( wpn )
  local sect = wpn:section()
  local hud  = get_string( sect, "hud" )
  local iron_hud = hud .. ".iron"
  ogse_wpn_utils.set_forced_notex_scope( wpn, true )
  ogse_wpn_utils.set_hud_offset(
    wpn, get_numbers( iron_hud, "zoom_offset" )
  )
  local zrx = get_float( iron_hud, "zoom_rotate_x" )
  local zry = get_float( iron_hud, "zoom_rotate_y" )
  ogse_wpn_utils.set_hud_rotate( wpn, { zrx, zry } )
  ogse_wpn_utils.set_scope_zoom_factor(
    wpn, get_float( iron_hud, "scope_zoom_factor" )
  )
end


function on_wpn_gl_mode( wpn )
  if not wpn.gl_mode then
    local binder = wpn.wpn:binded_object()
    if not binder then return end
    local flag = script_name() .. ".use_iron_scope"
    if binder[ flag ] then
      enable_iron_scope( wpn.wpn )
    end
  end
end
