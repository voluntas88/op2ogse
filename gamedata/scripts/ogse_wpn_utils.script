-----------------------------------------------------------------------
--- ogse_wpn_utils.script
--- Модуль функций работы с оружием.
--- Malandrinus, Dusty79 (c) OGS Evolution Team
--- version 0.2 (13/04/2011)
-----------------------------------------------------------------------

-- Функции клиентского объекта:
-- cobj:is_weapon() -- функция определяет, является ли объект оружием.
-- cobj:is_weapon_gl() -- более узкая функция. Определяет, является ли объект оружием с возможностью установки подствольника.


-----------------------------------------------------------------------
-- Получение данных:
-----------------------------------------------------------------------
-- для получения режима подствольника
function get_gl_mode(wpn) 
	-- если оружие не типа "ствол с подствольником", то смысла проверять нет. 
	-- Более того, проверка значения по смещению попросту некорректна, поскольку по этому смещению левое (в сущности случайное) значение
	ASSERT(wpn:is_weapon_gl(), "[ogse_wpn_utils.get_gl_mode] function is only applicable to objects of 'CWeaponMagazinedWGrenade' type!")
	return (bit_and(wpn:get_wpn_int(nil, 2392), 1) ~= 0 )
end

-- размер магазина активного типа зарядов
function get_active_magazine_size(wpn) return wpn:get_wpn_int(nil, 1408) end

-- размер магазина для патронов (не гранат) независимо от их активности. Для гранат движок всегда принимает размер магазина 1
function get_magazine_size2(wpn) return wpn:get_wpn_int(nil, 2372) end

-- индекс типа патронов для текущего типа зарядов
function get_active_ammo_type(wpn) 
	local res = wpn:get_wpn_int(nil, 1444) 
	--log3("get_active_ammo_type: %d, %x", res, res)
	return res
end

-- индекс типа патронов для неактивного типа зарядов
function get_hidden_ammo_type(wpn) 
	--abort("get_hidden_ammo_type")
	local res = wpn:get_wpn_int(nil, 2364) 
	--log3("get_hidden_ammo_type: %d, %x", res, res)
	return res
end

-- для получения количества скрытого типа патронов (не размера магазина, а именно реального количества)
function get_ammo_elapsed2(wpn) return (wpn:get_wpn_int(nil, 2384)-wpn:get_wpn_int(nil, 2380))/56 end

-- Логика проверки установленного аддона такая:
-- если статус == 0, значит аддона нет независимо от флажка, 
-- если 1 - значит аддон постоянный и есть независимо от флажка, 
-- если 2 - значит аддон съёмный и надо проверить соответствующий флажок.
-- маски аддонов 1 - прицел, 2 - подствольник, 4 - глушитель

-- для получения статуса установленных аддонов
-- прицел
function get_scope_status(wpn) return wpn:get_wpn_int(nil, 940) end
-- глушитель
function get_silencer_status(wpn) return wpn:get_wpn_int(nil, 944) end
-- подствольник
function get_grenade_launcher_status(wpn) return wpn:get_wpn_int(nil, 948) end

-- флаги аддонов
addons_flags = {
	scope       = 1,
	gl          = 2,
	silencer    = 4,
	grip        = 8,
	magazine    = 16,
	scope_mount = 32,
}

-- для получения флагов установленных аддонов
-- комплектом
function get_addon_flags(wpn) return wpn:get_wpn_int(nil, 936) end
-- прицел
function get_scope_flag(wpn) return bit_and(wpn:get_wpn_int(nil, 936), addons_flags.scope) ~= 0 end
-- подствольник
function get_grenade_launcher_flag(wpn) return bit_and(wpn:get_wpn_int(nil, 936), addons_flags.gl) ~= 0 end
-- глушитель
function get_silencer_flag(wpn) return bit_and(wpn:get_wpn_int(nil, 936), addons_flags.silencer) ~= 0 end
-- рукоять
function get_grip_flag(wpn) return bit_and(wpn:get_wpn_int(nil, 936), addons_flags.grip) ~= 0 end
-- магазин
function get_magazine_flag(wpn) return bit_and(wpn:get_wpn_int(nil, 936), addons_flags.magazine) ~= 0 end
-- планка для прицелов
function get_scope_mount_flag(wpn) return bit_and(wpn:get_wpn_int(nil, 936), addons_flags.scope_mount) ~= 0 end

function add_addon_flags(wpn, flags)
	local waddr = wpn:cast_weapon()
	ASSERT(waddr ~= 0, "[add_addon_flags] not weapon object!")
	local addr = sum_args( waddr, 936)
	local old_flags = db.actor:get_memory_int8("", addr)
	local new_flags = bit_or(old_flags, flags)
	db.actor:set_memory_int8(addr, new_flags)
end
-----------------------------------------------------------------------
-- Установка данных:
-----------------------------------------------------------------------
-- размер магазина активного типа зарядов
function set_active_magazine_size(wpn, v) wpn:set_wpn_int(1408, v) end
function get_forced_notex_scope(wpn)
	local waddr = wpn:cast_weapon()
	ASSERT(waddr ~= 0, "[get_forced_notex_scope] not weapon object!")
	local addr = sum_args(waddr, 936)
	local flags = db.actor:get_memory_int8("", addr)
	return bit_and(flags, 128) ~= 0
end
-- установить/отключить принудительное отключение использования текстуры прицела
function set_forced_notex_scope(wpn, force_no_texture)
	--log3("set_forced_notex_scope: %s", force_no_texture)
	local waddr = wpn:cast_weapon()
	ASSERT(waddr ~= 0, "[set_forced_notex_scope] not weapon object!")
	local addr = sum_args( waddr, 936)
	local flags = db.actor:get_memory_int8("", addr)
	--log3("old: %x", flags)
	local new_flags = force_no_texture 
		and bit_or(flags, 128) -- ставим флажок
		or  bit_and(flags, 127) -- снимаем флаажок
	--log3("new: %x", new_flags)
	db.actor:set_memory_int8(addr, new_flags)
end
function activate_visibility_updates(wpn, activate)
	local waddr = wpn:cast_weapon()
	ASSERT(waddr ~= 0, "[activate_visibility_updates] not weapon object!")
	local addr = sum_args( waddr, 936)
	local flags = db.actor:get_memory_int8("", addr)
	local new_flags = activate
		and bit_or(flags, 64) -- ставим флажок
		or  bit_and(flags, 191) -- снимаем флаажок
	db.actor:set_memory_int8(addr, new_flags)
end
----------------------------------------------------------------------------------------------------
function get_hud_offset(item)
	local v1 = item:get_hud_float(104)
	local v2 = item:get_hud_float(108)
	local v3 = item:get_hud_float(112)
	return {v1,v2,v3}
end
function get_hud_rotate(item)
	local v4 = item:get_hud_float(96)
	local v5 = item:get_hud_float(100)
	return {v4,v5}
end
function set_hud_offset(item, offset)
	item:set_hud_float(nil, offset[1], 104)
	item:set_hud_float(nil, offset[2], 108)
	item:set_hud_float(nil, offset[3], 112)
end
function set_hud_rotate(item, rot)
	item:set_hud_float(nil, rot[1], 96)
	item:set_hud_float(nil, rot[2], 100)
end