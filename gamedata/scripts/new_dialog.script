local nagrad = {
  
  level_buusty = {
  "outfit_lethalspeed_exo_m1",
  "seva_scient_outfit",
  "exo_military_outfit"  
 },
  level_1 = {
  "ammo_5.45x39_ap",
  "ammo_5.56x45_ap",
  "ammo_5.56x45_ss190"
 },
  level_2 = {
  "af_babka_1",
  "af_cry_1",
  "af_dik_1",
  "af_kol_1",
  "af_pudd_1",
  "af_spirit_1",
  "af_night_star",
  "af_gold_fish",
  "af_electra_moonlight",
  "af_rusty_sea-urchin",
  "af_dummy_glassbeads"
 },
  level_3 = {
  "af_babka_2",
  "af_cry_2",
  "af_dik_2",
  "af_kol_2",
  "af_pudd_2",
  "af_spirit_2",
  "af_simbion"
 },
  level_4 = {
  "wpn_k98",
  "wpn_awm",
  "wpn_g3",
  "wpn_rpk74_sk1",
  "wpn_g41",
  "wpn_l85_m2",
  "wpn_sr25_mk11_mod0_sk1",
--  "wpn_ak9",
  "wpn_xm8_para_sk2",
  "wpn_mp5_m3",
  "wpn_zastava_m76",
  "wpn_vint14",
--  "wpn_val_m1",
--  "wpn_ak107",
--  "wpn_aek973",
--  "wpn_ak74_m2",
 },
  level_5 = {
  "af_cry_3",
  "af_babka_4",
  "af_dik_4",
  "af_spirit_4",
  "af_armor_4",
  "af_pudd_4",
  "af_kol_4"
 },
  level_6 = {
  "ammo_7.62x54_7h14",
  "ammo_7.62x54_7h1",
  "ammo_7.62x54_ap",
  "ammo_7.62x39_k",
  "ammo_minigun",
  "ammo_gauss"
 },
level_7 = {
  "ammo_9x39_ap",
  "ammo_7.62x51_fmj",
  "ammo_7.62x51_ap",
  "ammo_7.62x54_7h14",
  "ammo_7.62x54_7h1",
  "ammo_7.62x54_ap",
  "ammo_7.62x39_k",
  "ammo_9x39_pab9",
  "antirad",
  "medkit",
  "medkit_army",
  "medkit_scientic",
  "ammo_9x19_pbp",
  "ammo_9x19_fmj",
  "ammo_5.45x39_ap",
  "ammo_5.45x39_fmj",
  "ammo_5.56x45_ap",
  "ammo_5.56x45_ss190",
  "ammo_11.43x23_fmj",
  "ammo_11.43x23_hydro",
  "wpn_addon_silencer",
  "mutant_flesh_eye",
  "mutant_boar_leg",
  "mutant_dog_tail",
  "mutant_psevdodog_tail",
  "af_medusa",
  "af_blood",
  "af_drops",
  "grenade_f1",
  "grenade_rgd5",
  "ammo_og-7b",
  "ammo_vog-25p",
  "ammo_vog-25",
  "ammo_m209"
 }
}

function prines_kopyto(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	
	local mutant_boar_leg = 0
	actor:iterate_inventory(function (dummy, item) if item:section()=="mutant_boar_leg" then         
        mutant_boar_leg = mutant_boar_leg+1 end end, nil)
    if mutant_boar_leg>=3 then
        return true
	else
        return false
	end
end
function otdal_kopyto(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	flamethrower.relocate_n_items_section(trader, "mutant_boar_leg", "out", 3)
    dialogs.relocate_item_section(second_speaker, item , "in")
end


function prines_hvost(first_speaker, second_speaker)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	
	local mutant_dog_tail = 0
	actor:iterate_inventory(function (dummy, item) if item:section()=="mutant_dog_tail" then                 mutant_dog_tail=mutant_dog_tail+1 end end, nil)
    if mutant_dog_tail>=3 then
        return true
	else
        return false
	end
end
function otdal_hvost(first_speaker, second_speaker)
	local item = ""
	local count = math.random(3,4)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	flamethrower.relocate_n_items_section(trader, "mutant_dog_tail", "out", 3)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function add_man()
	local obj=amk.spawn_item("mil_monolit_rush_respawn_1",vector():set(32.9309,-0.00135,197.588),1242,20400)
        local tbl = amk.read_stalker_params(obj)
        tbl.sid = 9498
        tbl.health = 0.2
	tbl.updhealth = 0.2
        amk.write_stalker_params(tbl, obj)
end 

function metka_man()
level_tasks.add_location(507,"green_location","Раненый")
end


function voronin_flesh_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("crazy_flash") ~= nil
end
return false
end


function voronin_flesh_done(first_speaker, second_speaker) 
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "crazy_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	



function prapor_jaw_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("wpn_addon_shtyk_nozh") ~= nil
end
return false
end


function prapor_jaw_done(first_speaker, second_speaker) 
dialogs.relocate_item_section(first_speaker, "wpn_addon_shtyk_nozh", "out")
dialogs.relocate_item_section(second_speaker, "wpn_spas12", "in")
end	

function informator_pda_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("bar_tiran_pda") ~= nil
end
return false
end


function informator_pda_done(first_speaker, second_speaker) 
dialogs.relocate_item_section(second_speaker, "bar_tiran_pda", "out")
dialogs.relocate_item_section(second_speaker, "af_medusa", "in")
end

function pda_take(first_speaker, second_speaker)
dialogs.relocate_item_section(first_speaker, "bar_tiran_pda", "in")
second_speaker:set_relation(game_object.friend, second_speaker)
	news_manager.send_tip(db.actor, "%c[255,160,160,160]".."КУЗНЕЦОВ:".."\\n".."%c[255,255,128,128]Меченый, здесь у нас на мосту какие-то наймы объявились. Начальство нам приказало их не трогать, видать, проплачены большие бабки, но я был бы не против от них избавиться. Стоят тут, как бельмо на глазу, следят за нами, со сталкерами не пообщаешься, водочки не попьёшь... Не мог бы ты кардинально решить вопрос?".."".."\n", nil, nil, 25000)
	news_manager.send_tip(db.actor, "%c[255,160,160,160]".."МЕЧЕНЫЙ:".."\\n".."%c[255,255,128,128]Надеюсь, они не по мою душу. Разберёмся!".."".."\n", 15, nil, 15000)
end

function gavr_pda_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("mil_bolt_pda") ~= nil
end
return false
end

function gavr_pda_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "mil_bolt_pda", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	


function saharov_pda_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("pda_priz") ~= nil
end
return false
end


function saharov_pda_done(first_speaker, second_speaker) 
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(trader, "pda_priz", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function freeman_eagle_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("wpn_eagle_m1") ~= nil
end
return false
end

function freeman_eagle_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "wpn_eagle_m1", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function ghange_set(npc) 
amk.start_timer(math.random(5,10))
	npc:set_character_community("killer", 0, 0)
end

function freeman_case_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("case_freeman") ~= nil
end
return false
end

function freeman_case_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	dialogs.relocate_item_section(trader, "case_freeman", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function gavr_doc_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("lab_x10_documents") ~= nil
end
return false
end

function gavr_doc_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "lab_x10_documents", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end

function bland_flash_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("bland_flash") ~= nil
end
return false
end

function bland_flash_done(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "bland_flash", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	


function item_much( itm, need_namber )
  return sak.have_item_namber( itm, need_namber )
end
function create_items( npc, section, number )
  return sak.create_items( npc, section, number )
end
function out_item_much( itm_section, need_number )
  return sak.out_item_namber( itm_section, need_number )
end


-- Akill begin
function krov_kamen()
	return new_dialog.item_much("mutant_flesh_eye",3) ~= false
end
function otdal_kamen()
	sak.out_item_namber("mutant_flesh_eye",3)
	sak.create_items_actor("ammo_9x19_pbp",2)
end

function prines_gravi()
	return new_dialog.item_much("mutant_face_tushkano",5) ~= false
end
function otdal_gravi()
	sak.out_item_namber("mutant_face_tushkano",5)
	sak.create_items_actor("ammo_11.43x23_hydro",2)
end

function prines_ruki()
	return new_dialog.item_much("mutant_hand_kontroler",2) ~= false
end
function otdal_ruki()
	sak.out_item_namber("mutant_hand_kontroler",2)
	sak.create_items_actor("ammo_5.45x39_ap",3)
end

-- Лимит диалогов. Дэн 12 раз
function trade_dan_not_enough()
	return not dialogs.dialog_is_enough("trade_dan_enough",12)
end
function trade_dan_enough()
	return dialogs.dialog_is_enough("trade_dan_enough",12)
end
function trade_dan_count()
	return dialogs.dialog_count("trade_dan_enough",12)
end

local foto_arts = {
	"af_cry_1",
	"af_babka_2",
	"af_dik_2",
	"af_spirit_2",
	"af_armor_2",
	"af_pudd_2",
	"af_kol_2"
}
function give_foto_arts()
	sak.create_items_actor(foto_arts[math.random(#foto_arts)],1)
	
	if	has_alife_info("monster_stealth_done_boar_s") and
		has_alife_info("monster_stealth_done_bloodsucker_s") and
		has_alife_info("monster_stealth_done_dog_s") and
		has_alife_info("monster_stealth_done_flesh_s") and
		has_alife_info("monster_stealth_done_pseudodog_s") and
		has_alife_info("monster_stealth_done_burer_s") and
		has_alife_info("monster_stealth_done_cat_s") and
		has_alife_info("monster_stealth_done_chimera_s") and
		has_alife_info("monster_stealth_done_controller_s") and
		has_alife_info("monster_stealth_done_fracture_s") and
		has_alife_info("monster_stealth_done_gigant_s") and
		has_alife_info("monster_stealth_done_tushkano_s") and
		has_alife_info("monster_stealth_done_snork_s")
	then
		db.actor:give_info_portion("silent_hunt_done")
	end
end
-- Akill end

function dan_grab_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("bad_psy_helmet") ~= nil
end
return false
end


function dan_grab_done(first_speaker, second_speaker) 
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
	dialogs.relocate_item_section(trader, "bad_psy_helmet", "out", 1)
    dialogs.relocate_item_section(actor, item , "in", count)
end	

function yakut_help_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("new_book") ~= nil
end
return false
end


function yakut_help_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(4,5)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	dialogs.relocate_item_section(trader, "new_book", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function yakut_treasure_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("notebook_new") ~= nil
end
return false
end

function yakut_treasure_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(first_speaker, "notebook_new", "out")
	second_speaker:set_relation(game_object.friend, second_speaker)
end

function dan_flash_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("nauch_flash") ~= nil
end
return false
end

function dan_flash_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(first_speaker, "nauch_flash", "out")
	dialogs.relocate_item_section(first_speaker, "good_psy_helmet", "in")
end	

function treasure_ecolog_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("new_book_prizrak") ~= nil
end
return false
end

function treasure_ecolog_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
	dialogs.relocate_item_section(trader, "new_book_prizrak", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end					

function barmen_simbion_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("af_simbion") ~= nil
end
return false
end

function barmen_simbion_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(second_speaker, "af_simbion", "out")
end	

function system_ecolog_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("computer_new") ~= nil
end
return false
end

function system_ecolog_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
	dialogs.relocate_item_section(trader, "computer_new", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end	

function prizrak_zver_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("sniper_flash") ~= nil
end
return false
end

function prizrak_zver_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(first_speaker, "sniper_flash", "out")
	dialogs.relocate_item_section(second_speaker, "wpn_dark_gauss", "in")
end	

function prizrak_finalzver_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("new_document_sniper") ~= nil
end
return false
end

function prizrak_finalzver_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(2,3)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_6[math.random(table.getn(nagrad.level_6))]
	dialogs.relocate_item_section(trader, "new_document_sniper", "out", 1)
    flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function yakut_ograblen_have(task, objective) 
if db.actor ~= nil then
return db.actor:object("inventory_new_box") ~= nil
end
return false
end

function yakut_ograblen_done(first_speaker, second_speaker) 
    dialogs.relocate_item_section(second_speaker, "inventory_new_box", "out")
    dialogs.relocate_item_section(second_speaker, "ammo_5.56x45_ss190", "in")
	new_dialog.create_items(db.actor,"ammo_5.56x45_ss190",4)
	dialogs.relocate_item_section(second_speaker, "antirad", "in")
	new_dialog.create_items(db.actor,"antirad",2)
	dialogs.relocate_item_section(second_speaker, "medkit_army", "in")
	new_dialog.create_items(db.actor,"medkit_army",3)
end	
-- Akill begin
function helmet_est()
	return
		new_dialog.item_much("good_psy_helmet",2)
end
function helmet_otdal()
	sak.out_item_namber("good_psy_helmet",1)
	sak.create_items_actor("ammo_super_gauss",5)
end
-- Akill end
function left_arhara(first_speaker, second_speaker) 
    dialogs.relocate_item_section(second_speaker, "device_torch", "in")
end

function atak_larger_done(first_speaker, second_speaker) 
    local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
	dialogs.relocate_item_section(second_speaker, item , "in")
end

function tri_kristal()
	return new_dialog.item_much("af_cristall",5) ~= false
end
   
function otdal_kristal(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_5[math.random(table.getn(nagrad.level_5))]
	flamethrower.relocate_n_items_section(trader, "af_cristall", "out", 5)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_lomot()
	return new_dialog.item_much("af_mincer_meat",10) ~= false
end
   
function otdal_lomot(first_speaker, second_speaker)
	local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
	flamethrower.relocate_n_items_section(trader, "af_mincer_meat", "out", 10)
    dialogs.relocate_item_section(second_speaker, item , "in")
end

function prines_odingrav()
	return new_dialog.item_much("af_gravi",1) ~= false
end
   
function otdal_odingrav(first_speaker, second_speaker)
new_dialog.out_item_much("af_gravi",1) 
end

function nagrada_odingrav(first_speaker, second_speaker)
new_dialog.create_items(db.actor,"antirad",2)
    dialogs.relocate_item_section(first_speaker, "antirad", "in")
end

function zahar_naemnik_done(first_speaker, second_speaker) 
    local item = ""
	local count = math.random(3,4)
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
	item = nagrad.level_1[math.random(table.getn(nagrad.level_1))]
	flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function prapor_apt_have()
	return new_dialog.item_much("medkit_scientic",10) ~= false
end
   
   
function prapor_apt_done(first_speaker, second_speaker)
new_dialog.out_item_much("medkit_scientic",10) 
end

function barrem_talk_have()
	return new_dialog.item_much("af_cry_2",1) ~= false
end

function vzal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "voen_pda", "in")
end

function otdal_pda_voen(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "voen_pda", "out")
end

function prizrak_tainiy_have(first_speaker, second_speaker)
    return new_dialog.item_much("plan_document",1) ~= false
end

function prizrak_tainiy_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "plan_document", "out")
end

function gold_art_have()
	return new_dialog.item_much("gold_art",10) ~= false
end

function gold_art_done()
new_dialog.out_item_much("gold_art",10)
end

function tri_tainik_first()
	return new_dialog.item_much("new_prizrak_document1",1) ~= false
end

function tri_tainik_second()
	return new_dialog.item_much("new_prizrak_document2",1) ~= false
end

function tri_tainik_third()
	return new_dialog.item_much("new_prizrak_document3",1) ~= false
end

function tri_tainik_have()
     return new_dialog.item_much("new_prizrak_document1",1) ~= false and                                           new_dialog.item_much("new_prizrak_document2",1) ~= false  and 
new_dialog.item_much("new_prizrak_document3",1) ~= false
end

function tri_tainik_done()
new_dialog.out_item_much("new_prizrak_document1",1)
new_dialog.out_item_much("new_prizrak_document2",1)
new_dialog.out_item_much("new_prizrak_document3",1)
end


function inform_20_pda_have()
     return new_dialog.item_much("device_pda_npc",20) ~= false 
end

function inform_40_pda_have()
     return new_dialog.item_much("device_pda_npc",40) ~= false 
end

function inform_20_pda(first_speaker, second_speaker)
    local item = ""
    local count = math.random(2,3)
 local actor, trader
 if db.actor and db.actor:id() == first_speaker:id() then
  actor = first_speaker
  trader = second_speaker
 else
  actor = second_speaker
  trader = first_speaker
 end
 item = nagrad.level_7[math.random(table.getn(nagrad.level_7))]
 flamethrower.relocate_n_items_section(trader, "device_pda_npc", "out", 20)
 flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function inform_40_pda(first_speaker, second_speaker)
    local item = ""
    local actor, trader
 if db.actor and db.actor:id() == first_speaker:id() then
  actor = first_speaker
  trader = second_speaker
 else
  actor = second_speaker
  trader = first_speaker
 end 
 flamethrower.relocate_n_items_section(trader, "device_pda_npc", "out", 40)
end

function dyak_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 2)   
   flamethrower.relocate_n_items_section(actor, "ammo_5.45x39_ap", "in", 3)
end

function dyak_nagrad(first_speaker, second_speaker)
    local item = ""
    local count = math.random(4,5)
 local actor, trader
 if db.actor and db.actor:id() == first_speaker:id() then
  actor = first_speaker
  trader = second_speaker
 else
  actor = second_speaker
  trader = first_speaker
 end
 item = nagrad.level_7[math.random(table.getn(nagrad.level_7))]
 flamethrower.relocate_n_items_section(actor, item , "in", count)
end

function kalmyak_need_done(first_speaker, second_speaker)
    local item = ""
    local actor, trader
 if db.actor and db.actor:id() == first_speaker:id() then
  actor = first_speaker
  trader = second_speaker
 else
  actor = second_speaker
  trader = first_speaker
 end
 item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
 dialogs.relocate_item_section(second_speaker, item , "in")
 new_dialog.out_item_much("box_kalmyak",1)
end

function kalmyak_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 2) 
--   flamethrower.relocate_n_items_section(actor, "ammo_9x19_fmj", "in", 6)
--   dialogs.relocate_item_section(first_speaker, "wpn_beretta", "in")
--   dialogs.relocate_item_section(first_speaker, "antirad", "in")
end

function kalmyak_need_have()
	return new_dialog.item_much("box_kalmyak",1) ~= false
end

function kalmyak_3_vodka()
     return new_dialog.item_much("vodka",3) ~= false 
end

function kalmyak_3_sigaret()
     return new_dialog.item_much("sigaret",3) ~= false 
end

function kalmyak_3_vodka_otdal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(first_speaker, "maz", "in")
   new_dialog.out_item_much("vodka",3)
end

function kalmyak_3_sigaret_otdal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(first_speaker, "maz", "in")
   new_dialog.out_item_much("sigaret",3)
end

function marsh_remont_have()
     return new_dialog.item_much("maz",3) ~= false 
end

function marsh_remont_done()
new_dialog.out_item_much("maz",3)
end

function dyak_maz_have()
     return new_dialog.item_much("af_soul",1) ~= false 
end

function dyak_maz_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "maz", "in", 3) 
   new_dialog.out_item_much("af_soul",1)
end


function controller_hutor_have()
     return new_dialog.item_much("red_mozg",1) ~= false 
end

function controller_hutor_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("red_mozg",1)
end

function burer_red_hand_est()
     return new_dialog.item_much("mutant_burer_red_hand",1) ~= false 
end

function burer_red_hand_otdal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("mutant_burer_red_hand",1)
end

function krovosos_red_jaw_est()
     return new_dialog.item_much("mutant_krovosos_red_jaw",1) ~= false 
end

function krovosos_red_jaw_otdal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("mutant_krovosos_red_jaw",1)
end

function sveeblov_ferma_have()
     return has_alife_info("sveeblov_ferma_begin") and wawka_dialog.good_item_have_number("wpn_pkm",1) 
end

function sveeblov_ferma_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_4[math.random(table.getn(nagrad.level_4))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
   new_dialog.out_item_much("wpn_pkm",1)
end


function kot_need_doc_have()
     return new_dialog.item_much("mono_dead_doc",1) ~= false 
end

function kot_need_doc_done()
new_dialog.out_item_much("mono_dead_doc",1)
end

function kot_need_next_have()
     return new_dialog.item_much("mono_note",1) ~= false 
end

function kot_need_next_done()
new_dialog.out_item_much("mono_note",1)
end

function need_televizor_have()
     return new_dialog.item_much("televizor",1) ~= false 
end

function need_televizor_done()
new_dialog.out_item_much("televizor",1)
end

function marsh_barman_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "wpn_awm_new", "in", 1) 
   dialogs.relocate_item_section(actor, "ammo_igl_new", "in", 1)
end

function marsh_barman_have()
     return new_dialog.item_much("wpn_awm_new",1) ~= false 
end

function marsh_barman_zabral(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_3[math.random(table.getn(nagrad.level_3))]
   dialogs.relocate_item_section(second_speaker, item , "in") 	
   dialogs.relocate_item_section(trader, "wpn_awm_new", "out", 1)  
end


function borman_sniper_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ss190", "in", 3)
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 3)   
end

function borman_glushitel_begin()
     return new_dialog.item_much("glushitel",1) ~= false 
end

function borman_glushitel_next(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "glushitel", "in", 1) 
end

function borman_glushitel_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ap", "in", 3)
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51_ap", "in", 1) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x54_ap", "in", 1) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x25_ps", "in", 1) 
   flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 1)    
end

function kot_kalmyak_lekar_next()
     return new_dialog.item_much("af_night_star",1) ~= false and                                           new_dialog.item_much("mutant_snork_leg",10) ~= false  
end

function kot_kalmyak_lekar_est()
new_dialog.out_item_much("af_night_star",1)
new_dialog.out_item_much("mutant_snork_leg",10)
end

function kot_kalmyak_lekar_have(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "lekar_kalmyak", "in", 1) 
end

function kot_kalmyak_lekar_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "monolit_black_outfit_plus", "in", 1)
   dialogs.relocate_item_section(actor, "wpn_akm_m3", "in", 1) 
   new_dialog.out_item_much("lekar_kalmyak",1)
end

function lekar_kalmyak_actor()
     return new_dialog.item_much("lekar_kalmyak",1) ~= false 
end

function kot_holod_lekar_next()
     return new_dialog.item_much("af_simbion",1) ~= false 
end

function kot_holod_lekar_est(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "lekar_kalmyak", "in", 1) 
   new_dialog.out_item_much("af_simbion",1)
end

function kot_holod_lekar_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "monolit_black_outfit_plus", "in", 1) 
   new_dialog.out_item_much("lekar_kalmyak",1)
end


function holod_af_gravi_have()
     return new_dialog.item_much("af_gravi",1) ~= false 
end

function holod_af_gravi_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 3) 
   new_dialog.out_item_much("af_gravi",1)
end

function holod_af_mincer_meat_have()
     return new_dialog.item_much("af_mincer_meat",1) ~= false 
end

function holod_af_mincer_meat_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 3) 
   new_dialog.out_item_much("af_mincer_meat",1)
end

function holod_two_af_vyvert_have()
     return new_dialog.item_much("af_vyvert",2) ~= false 
end

function holod_two_af_vyvert_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "grenade_f1", "in", 3) 
   new_dialog.out_item_much("af_vyvert",2)
end


function holod_af_ameba_slug_have()
     return new_dialog.item_much("af_ameba_slug",1) ~= false 
end

function holod_af_ameba_slug_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 4) 
   new_dialog.out_item_much("af_ameba_slug",1)
end

function holod_two_af_electra_sparkler_have()
     return new_dialog.item_much("af_electra_sparkler",2) ~= false 
end

function holod_two_af_electra_sparkler_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 4) 
   new_dialog.out_item_much("af_electra_sparkler",2)
end

function holod_two_af_blood_have()
     return new_dialog.item_much("af_blood",2) ~= false 
end

function holod_two_af_blood_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   flamethrower.relocate_n_items_section(actor, "medkit", "in", 4) 
   new_dialog.out_item_much("af_blood",2)
end

function xalyava_nebo_have(task, info)
    if (db.actor:has_info("xalyava_naem1_dead") and db.actor:has_info("xalyava_naem2_dead") and db.actor:has_info("xalyava_naem3_dead") and db.actor:has_info("xalyava_naem4_dead") and 
db.actor:has_info("xalyava_naem5_dead") and db.actor:has_info("xalyava_naem6_dead") and 
db.actor:has_info("xalyava_naem7_dead") and db.actor:has_info("xalyava_naem8_dead")) then
    return db.actor:give_info_portion("xalyava_nebo_have") 
  end
return false
end

function xalyava_nebo_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_buusty[math.random(table.getn(nagrad.level_buusty))]
   dialogs.relocate_item_section(second_speaker, item , "in") 
end

function francuz_have()
     return new_dialog.item_much("pda_francuz",1) ~= false 
end

function francuz_done()
	new_dialog.out_item_much("pda_francuz",1)
	sak.create_items_actor("wpn_glock21",1)
	sak.create_items_actor("ammo_357_hp_mag",2)
end

function actor_have_tri_vo()
     return new_dialog.item_much("vodka",3) ~= false 
end

function nebo_clear_dal(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "case_nebo", "in", 1) 
end

function nebo_clear_have()
     return new_dialog.item_much("case_nebo",1) ~= false 
end

function nebo_clear_done()
new_dialog.out_item_much("case_nebo",1)
end

function nebo_kurier_doc_est(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   item = nagrad.level_2[math.random(table.getn(nagrad.level_2))]
   dialogs.relocate_item_section(second_speaker, item , "in")
end

function nebo_kurier_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "nebo_clear", "in", 1) 
end

function act_have_nebo_exo_outfit() 
	if db.actor then
		if db.actor:object("nebo_exo_outfit") and db.actor:object("nebo_exo_outfit"):condition() and db.actor:object("nebo_exo_outfit"):condition()>0.95 then
			return true
		end
	end
	return false
end

function act_have_nebo_scientific_outfit() 
	if db.actor then
		if db.actor:object("nebo_scientific_outfit") and db.actor:object("nebo_scientific_outfit"):condition() and db.actor:object("nebo_scientific_outfit"):condition()>0.95 then
			return true
		end
	end
	return false
end

function act_have_monolit_black_outfit() 
	if db.actor then
		if db.actor:object("monolit_black_outfit") and db.actor:object("monolit_black_outfit"):condition() and db.actor:object("monolit_black_outfit"):condition()>0.95 then
			return true
		end
	end
	return false
end

function act_have_10000()
  return db.actor:money()>=10000
end

function act_have_15000()
  return db.actor:money()>=15000
end

function act_have_20000()
  return db.actor:money()>=20000
end

function act_have_25000()
  return db.actor:money()>=25000
end

function act_have_30000()
  return db.actor:money()>=30000
end

function shadowman_zver_have(task, info)
    if (db.actor:has_info("shadowman_zver1_dead") and db.actor:has_info("shadowman_zver2_dead") and db.actor:has_info("shadowman_zver3_dead") and db.actor:has_info("shadowman_zver4_dead") and 
db.actor:has_info("shadowman_zver5_dead") and db.actor:has_info("shadowman_zver6_dead") and 
db.actor:has_info("shadowman_zver7_dead") and db.actor:has_info("shadowman_zver8_dead") and db.actor:has_info("shadowman_zver9_dead") and db.actor:has_info("shadowman_zver10_dead") and db.actor:has_info("shadowman_zver11_dead") and db.actor:has_info("shadowman_zver12_dead") and db.actor:has_info("shadowman_zver13_dead") and db.actor:has_info("shadowman_zver14_dead") and db.actor:has_info("shadowman_zver15_dead") and db.actor:has_info("shadowman_zver16_dead") and db.actor:has_info("shadowman_zver17_dead") and db.actor:has_info("shadowman_zver18_dead") and db.actor:has_info("shadowman_zver19_dead") and db.actor:has_info("shadowman_zver20_dead") and db.actor:has_info("shadowman_zver21_dead") and db.actor:has_info("shadowman_zver22_dead") and db.actor:has_info("shadowman_zver23_dead") and db.actor:has_info("shadowman_zver24_dead") and db.actor:has_info("shadowman_zver25_dead") and db.actor:has_info("shadowman_zver26_dead") and db.actor:has_info("shadowman_zver27_dead") and db.actor:has_info("shadowman_zver28_dead") and db.actor:has_info("shadowman_zver29_dead") and db.actor:has_info("shadowman_zver30_dead")) then
    return db.actor:give_info_portion("shadowman_zver_have") 
  end
return false
end

function shadowman_zver_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_12x70_buck", "in", 5)
end

function shadowman_forest_done(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "medkit_army", "in", 6)
end

function act_have_tri_grib()
     return new_dialog.item_much("mushroom",3) ~= false 
end

function grib_five_762x25_ps(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_7.62x25_ps", "in", 5)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function grib_tri_762x51box(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_7.62x51box", "in", 3)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function grib_tri_medkit_army(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "medkit_army", "in", 3)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function grib_tri_antirad(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "antirad", "in", 3)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function grib_four_545x39_fmj(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_5.45x39_fmj", "in", 4)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function grib_four_556x45_ss190(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_5.56x45_ss190", "in", 4)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function grib_tri_9x39_pab9(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
    flamethrower.relocate_n_items_section(actor, "ammo_9x39_pab9", "in", 3)
new_dialog.out_item_much("mushroom",3)	
archievements.acv_count_event("acv_grib", 40, "Грибник", 3) 
end

function klyak_forest_doc_next(first_speaker, second_speaker)
local item = ""
	local actor, trader
	if db.actor and db.actor:id() == first_speaker:id() then
		actor = first_speaker
		trader = second_speaker
	else
		actor = second_speaker
		trader = first_speaker
	end
   dialogs.relocate_item_section(actor, "rukzak_green", "in", 1) 
end

function actor_has_rukzak_green()
     return new_dialog.item_much("rukzak_green",1) ~= false 
end

function klyak_forest_doc_green()
new_dialog.out_item_much("rukzak_green",1)	
end

function klyak_forest_doc_have()
     return new_dialog.item_much("klyak_forest_doc",1) ~= false 
end

function klyak_forest_doc_done()
new_dialog.out_item_much("klyak_forest_doc",1)	
end

--' Проверим наличие бритвы для Волка
function kvest_britva_have(task, objective)
if db.actor ~= nil then
return db.actor:object("britva") ~= nil
end
return false
end




























									