-- -*- mode: lua; coding: windows-1251-dos -*-

-- Обработка smart_terrain-ов или неписей, которых нужно убирать в оффлайн
-- принудительно, при удалении ГГ от них, и возращать в онлайн обратно,
-- при приближении к ним.

function init()
end


local switch_distances = {}
function load_switch_distances( sobj )
  local lname = object_level_name( sobj )
  if not switch_distances[ lname ] then
    switch_distances[ lname ] = {}
    local dsh_sect = "dsh.switch_distances." .. lname
    if sys_ini:section_exist( dsh_sect ) then
      for _, k in ipairs( get_section_keys( dsh_sect ) ) do
        switch_distances[ lname ][ k ] = get_float( dsh_sect, k )
      end
    end
  end
  return switch_distances[ lname ]
end


local cache_switch_distance = {}
function get_switch_distance( sobj )
  if not cache_switch_distance[ sobj.id ] then
    cache_switch_distance[ sobj.id ] = {}
    local level_switch_distances = load_switch_distances( sobj )
    local sd = level_switch_distances[ sobj:name() ]
    if not sd then
      local strn_name = get_smart_terrain_name( sobj )
      if strn_name then
        sd = level_switch_distances[ strn_name ]
      end
    end
    if sd then
      cache_switch_distance[ sobj.id ].sd = sd
    end
  end
  return cache_switch_distance[ sobj.id ].sd
end


function se_can_switch_online( sobj )
  if not db.actor then return end
  local sd = get_switch_distance( sobj )
  if sd then
    if sobj.online then sd = sd + 20 end
    return sobj.position:distance_to( db.actor:position() ) <= sd
  end
end


local can_switch_offline = {}
function load_can_switch_offline( sobj )
  local lname = object_level_name( sobj )
  if not can_switch_offline[ lname ] then
    can_switch_offline[ lname ] = {}
    local suffixes = { "" }
    if not ui_mm_opt_main.GetOption( "dsh_no_antifreeze" ) then
      table.insert( suffixes, ".opt" )
    end
    for _, sfx in ipairs( suffixes ) do
      local dsh_sect = "dsh.can_switch_offline" .. sfx .. "." .. lname
      if sys_ini:section_exist( dsh_sect ) then
        for _, k in ipairs( get_section_keys( dsh_sect ) ) do
          can_switch_offline[ lname ][ k ] = get_bool( dsh_sect, k )
        end
      end
    end
  end
  return can_switch_offline[ lname ]
end


local cache_switch_offline = {}
function se_can_switch_offline( sobj )
  if not cache_switch_offline[ sobj.id ] then
    cache_switch_offline[ sobj.id ] = {}
    local level_can_switch_offline = load_can_switch_offline( sobj )
    local can
    if IsStalker( sobj ) then
      can = level_can_switch_offline[ "human" ]
    end
    if can == nil then
      can = level_can_switch_offline[ sobj:name() ]
      if can == nil then
        can = level_can_switch_offline[ sobj:profile_name() ]
      end
      if can == nil then
        local strn_name = get_smart_terrain_name( sobj )
        if strn_name then
          can = level_can_switch_offline[ strn_name ]
        end
      end
    end
    if can ~= nil then
      cache_switch_offline[ sobj.id ].can = can
    end
  end
  return cache_switch_offline[ sobj.id ].can
end


function get_smart_terrain_name( sobj )
  local strn_id
  if sobj.smart_terrain_id then
    strn_id = sobj:smart_terrain_id()
  else
    strn_id = 65535
  end
  if strn_id ~= 65535 then
    local strn = alife():object( strn_id )
    if strn then
      return strn:name()
    end
  end
end
