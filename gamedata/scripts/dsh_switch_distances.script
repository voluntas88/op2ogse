-- -*- mode: lua; coding: windows-1251-dos -*-

-- Обработка smart_terrain-ов или неписей, которых нужно убирать в оффлайн
-- принудительно, при удалении ГГ от них, и возращать в онлайн обратно,
-- при приближении к ним.

function attach( sm )
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
end


local can_switch_offline = {}
local switch_distances   = {}

function on_spawn()
  local lname    = level.name()
  local dsh_sect = "dsh.switch_distances." .. lname
  if sys_ini:section_exist( dsh_sect ) then
    for _, k in ipairs( get_section_keys( dsh_sect ) ) do
      switch_distances[ k ] = get_float( dsh_sect, k )
    end
  end
  if sys_ini:section_exist( "dsh.can_switch_offline" ) then
    for _, k in ipairs( get_section_keys( "dsh.can_switch_offline" ) ) do
      can_switch_offline[ k ] = get_bool( "dsh.can_switch_offline", k )
    end
  end
end


local ignore = {}

function get_switch_distance( sobj )
  if db.actor and not ignore[ sobj.id ] then
    local sd = switch_distances[ sobj:name() ]
    if not sd then
      local strn_id
      if sobj.smart_terrain_id then
        strn_id = sobj:smart_terrain_id()
      else
        strn_id = 65535
      end
      if strn_id ~= 65535 then
        local strn = alife():object( strn_id )
        if strn then
          sd = switch_distances[ strn:name() ]
        end
      end
    end
    if sd then
      return sd
    else
      ignore[ sobj.id ] = true
    end
  end
  return nil
end


function se_can_switch_online( sobj )
  local sd = get_switch_distance( sobj )
  if sd then
    if sobj.online then sd = sd + 20 end
    return sobj.position:distance_to( db.actor:position() ) <= sd
  end
  return nil
end


function se_can_switch_offline( sobj )
  return can_switch_offline[ sobj:name() ]
end
