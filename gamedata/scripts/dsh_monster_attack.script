-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_monster_death",  fun = this.on_death         })
  sm:subscribe({ signal = "on_monster_hit",    fun = this.on_hit           })
  sm:subscribe({ signal = "on_monster_spawn",  fun = this.on_monster_spawn })
  sm:subscribe({ signal = "on_update",         fun = this.on_actor_update  })
end


local update_t
function on_actor_update()
  if update_t and update_t > time_global() then return end
  local s_nd = level.get_snd_volume()
  if s_nd < 1 then
    s_nd = s_nd + 0.1
    level.set_snd_volume( s_nd )
  end
  update_t = time_global() + 8538
end


function are_all_attacks_disabled()
  if
    has_alife_info( "volna_goodwill" ) or has_alife_info( "peshera_go" )
  then
    return true
  end
  return false
end


function on_monster_spawn( obj, binder )
  local subscribe = false
  local workers   = get_update_workers( obj )
  if obj:alive() then
    local k = script_name() .. ".workers"
    if table.getn( workers.alive ) > 0 then
      binder[ k ] = workers
      subscribe   = true
    end
  else
    local k = script_name() .. ".workers"
    if table.getn( workers.dead ) > 0 then
      binder[ k ] = workers
      subscribe   = true
    end
  end
  if subscribe then
    local s = {
      [ "signal" ] = "on_monster_update." .. obj:id(),
      [ "fun"    ] = this.on_update,
      [ "queued" ] = true,
    }
    binder[ script_name() .. ".subscribed" ] = s
    ogse_signals.get_mgr():subscribe( s )
  end
end


function get_update_workers( obj )
  local t = {
    [ "alive" ] = {},
    [ "dead"  ] = {},
  }
  if obj:clsid() == clsid.bloodsucker_s then
    table.insert( t.alive, this.bloodsucker_attack )
  elseif obj:clsid() == clsid.boar_s then
    if
      obj:section() == "boar_weak"
      or obj:section() == "boar_normal"
      or obj:section() == "boar_strong"
      or obj:section() == "boar_kachok"
    then
      table.insert( t.alive, this.boar_attack )
    end
    table.insert( t.alive, boar_body_attack )
    table.insert( t.dead,  boar_body_attack )
  elseif obj:clsid() == clsid.burer_s then
    table.insert( t.alive, this.burer_attack )
  elseif obj:clsid() == clsid.cat_s then
    table.insert( t.alive, this.cat_attack )
  elseif obj:clsid() == clsid.chimera_s then
    table.insert( t.alive, this.chimera_attack )
  -- elseif obj:clsid() == clsid.controller_s then
  --   table.insert( t.alive, this.controller_attack )
  elseif obj:clsid() == clsid.dog_s then
    table.insert( t.alive, this.dog_attack )
    table.insert( t.alive, this.dog_attack_phantom )
  elseif obj:clsid() == clsid.poltergeist_s then
    table.insert( t.alive, this.poltergeist_attack )
  elseif obj:clsid() == clsid.pseudodog_s then
    if obj:section() ~= "volkodav" then
      table.insert( t.alive, this.pseudodog_attack )
    end
  elseif obj:clsid() == clsid.tushkano_s then
    if not string.find( obj:section(), "rat_", 1, true ) then
      table.insert( t.alive, this.tushkano_attack )
    end
  elseif obj:clsid() == clsid.zombie_s then
    if obj:section() == "zombie_plague" then
      table.insert( t.alive, this.zombie_plague_attack )
    elseif obj:section() == "zombie_plague_komar" then
      table.insert( t.alive, this.zombie_plague_komar_attack )
    else
      table.insert( t.alive, this.zombie_attack )
    end
  end
  return t
end


function on_update( obj )
  if are_all_attacks_disabled() then return end
  local binder  = obj:binded_object()
  local workers = binder[ script_name() .. ".workers" ]
  if obj:alive() then
    workers = workers.alive
  else
    workers = workers.dead
  end
  for _, fun in ipairs( workers ) do
    fun( obj )
  end
end


function on_hit( obj, amount, local_direction, who, bone_index )
  if obj:alive() then
    local chk_dist = obj:position():distance_to( who:position() )
    if chk_dist > obj:range() then
      obj:set_range( chk_dist * 1.1 )
    end
    obj:make_object_visible_somewhen( who )
  end
end


function master_koef()
  return 1 / ( 4 - level.get_game_difficulty() )
end


function bloodsucker_attack( obj )
  if obj.health < 0.05 then return end
  local enemy = obj:best_enemy()
  if
    not (
      enemy and enemy:id() == db.actor:id() and obj:see( enemy )
    )
  then
    return
  end
  local binder = obj:binded_object()
  set_custom_panic( obj, binder, enemy )
  if binder.attack2_t and binder.attack2_t > time_global() then return end
  binder.attack2_t   = time_global() + 1000
  local distance     = obj:position():distance_to( enemy:position() )
  local attack_dist  = 15
  local need_phantom = false
  if distance < attack_dist then
    if math.random() < 0.5 then
      local snd_obj = xr_sound.get_safe_sound_object(
        "monsters\\bloodsucker\\bloodsucker_attack"
      )
      snd_obj:play_no_feedback( enemy, sound_object.s2d, 0, vector(), 5.0 )
      local h = hit()
      h.type      = hit.explosion
      h.direction = vector():set( 0, 0, 0 )
      h.power     = 0.05 + 0.02 * level.get_game_difficulty()
      h.impulse   = 0
      h.draftsman = obj
      enemy:hit( h )
      h.type      = hit.wound
      enemy:hit( h )
    end
  else
    if
      obj:section() == "bloodsucker_strong"
      or obj:section() == "bloodsucker_effector"
    then
      if ( not binder.attack_t ) or binder.attack_t <= time_global() then
        if
          not (
            binder.phantom_spawned_id
            and level.object_by_id( binder.phantom_spawned_id )
          )
        then
          binder.phantom_spawned_id = nil
          if math.random() < 0.4 then
            need_phantom = true
          end
        end
        binder.attack_t = time_global() + 5000
      end
    end
  end
  if need_phantom then
    local sobj = alife():create(
      "phantom_krovosos_" .. math.random( 2 ),
      obj:position(),
      enemy:level_vertex_id(), enemy:game_vertex_id()
    )
    binder.phantom_spawned_id = sobj.id
  end
end


function boar_attack( obj )
  local enemy = obj:best_enemy()
  if
    not (
      enemy and enemy:id() == db.actor:id() and obj:see( enemy )
    )
  then
    return
  end
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( db.actor:position() )
  local attack_dist = 2
  binder.attack_t   = time_global() + (
    dist < ( attack_dist * 3 ) and 0 or 1000
  )
  if dist < attack_dist then
    local v1 = obj:direction()
    local v2 = db.actor:direction()
    if ( v1.x * v2.x ) + ( v1.z * v2.z ) < -0.6 then
      local h = hit()
      h.draftsman = obj
      h.type      = hit.wound
      h.direction = vector():set(
        math.random( -10, 10 ) / 10,
        math.random(   0, 30 ) / 10,
        math.random( -10, 10 ) / 10
      )
      h:bone( "bip01_spine" ) --/ ??? ????? '?????'
      h.power     = 0
      h.impulse   = 1000
      db.actor:hit( h )
      binder.attack_t = time_global() + 400
    end
  end
end


function boar_body_attack( obj )
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( db.actor:position() )
  local attack_dist = 3
  binder.attack_t   = time_global() + (
    dist < ( attack_dist * 2 ) and 100 or 1000
  )
  if dist < attack_dist then
    local belt_rs = inventory.on_belt_restore_speed(
      "radiation_restore_speed"
    )
    if belt_rs > 0 then
      belt_rs    = 0
    elseif belt_rs < 0 then
      if binder.attack_pt then
        local previous_check_time = game.CTime()
        previous_check_time:set( unpack( binder.attack_pt ) )
        local current_time        = game.get_game_time()
        local dt = current_time:diffSec( previous_check_time )
        belt_rs  = 0 - belt_rs * dt
      else
        belt_rs  = 0
      end
    end
    db.actor.radiation = 0.0005 + 0.0002 * level.get_game_difficulty()
      + 0.008 * dsh.get_this_level_difficulty() + belt_rs
    binder.attack_pt   = { game.get_game_time():get() }
    if dsh_hud_fx.has_detector() then
      local snd_obj = sound_object(
        "detectors\\geiger_" .. math.random( 4 )
      )
      snd_obj:play_no_feedback(
        db.actor, sound_object.s2d, 0, vector(), 0.5
      )
    end
  elseif binder.attack_pt then
    binder.attack_pt = nil
  end
end


function burer_attack( obj )
  local enemy = obj:best_enemy()
  if
    not (
      enemy and enemy:id() == db.actor:id() and obj:see( enemy )
    )
  then
    return
  end
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( enemy:position() )
  local attack_dist = 25
  binder.attack_t   = time_global() + (
    dist < attack_dist and 0 or 1000
  )
  if dist > attack_dist then return end
  local v1 = obj:direction()
  local v2 = db.actor:direction()
  if ( v1.x * v2.x ) + ( v1.z * v2.z ) < -0.6 then
    local diff = level.get_game_difficulty()
    if math.random() < diff / 10 then
      db.actor.power = -1.0
    end
    local aitem = db.actor:active_item()
    if
      aitem and math.random() < diff / 20
      and ( db.actor:active_slot() == 1 or db.actor:active_slot() == 2 )
    then
      if
        ( not inventory.on_belt( "af_idol_monolita" ) )
        or math.random() < 0.5
      then
        db.actor:drop_item( aitem )
        archievements.acv_count_event( "acv_drop", 10, "????-?????????" )
      end
    end
    binder.attack_t = time_global() + ( 6000 * ( 1 + math.random( -0.2, 0.2 ) ) )
  end
end


function cat_attack( obj )
  if obj.health < 0.05 then return end
  local enemy = obj:best_enemy()
  if
    not (
      enemy and enemy:id() == db.actor:id() and obj:see( enemy )
    )
  then
    return
  end
  local binder = obj:binded_object()
  set_custom_panic( obj, binder, enemy )
  if binder.attack_t and binder.attack_t > time_global() then return end
  binder.attack_t  = time_global() + 500
  if math.random() < 0.15 + ( 0.05 * level.get_game_difficulty() ) then
    level.add_pp_effector( "black_cats.ppe", 2015, false )
    dsh_sleep.zevota()
    dsh_sleep.test_for_need_sleep( 17 )
  end
end


function chimera_attack( obj )
  if obj.health < 0.5 then return end
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( db.actor:position() )
  local attack_dist = 15
  binder.attack_t   = time_global() + 500
  if dist < attack_dist and math.random() < 0.5 then
    local snd_obj = sound_object( "monsters\\chimera\\attack_2" )
    snd_obj:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 5.0 )
    db.actor.power = -0.05
  end
end


-- ???? ?????????? ?????? ?? ???? ??????? (?????: demover123)
function controller_attack( obj )
  local target = obj:best_enemy()
  if
    target and obj:see( target )
    and target:id() == db.actor:id()
  then
    local binder = obj:binded_object()
    if not binder.attack_get_hit then
      binder.attack_get_hit             = time_global() + 100
      binder.attack_start_anim_hit_cont = true
    elseif binder.attack_get_hit <= time_global() then
      local dist = obj:position():distance_to( target:position() )
      if dist <= 1.7 then
        if binder.attack_start_anim_hit_cont then
          if obj:animation_count() > 0 then
            obj:clear_animations()
          end
          obj:add_animation(
            "stand_walk_fwd_" .. math.random( 0, 1 ), true
          )
          obj:play_cycle( "stand_attack_1", true )
          local song_start = xr_sound.get_safe_sound_object(
            "monsters\\controller\\controller_hit_2"
          )
          song_start:play_at_pos(
            obj, obj:position(), sound_object.s3d
          )
          binder.attack_start_anim_hit_cont = false
        end
        if not binder.attack_hit_to_enemy then
          binder.attack_hit_to_enemy = time_global() + 300
        elseif binder.attack_hit_to_enemy <= time_global() then
          level.add_cam_effector(
            "camera_effects\\hit_back_left.anm", 777, false, ""
          )
          local h = hit()
          h.draftsman = obj
          h.direction = vector():set( 0, 0, 0 )
          h:bone( "bip01_spine" )
          h.power     = 0.4
          h.impulse   = 1
          h.type      = hit.wound
          target:hit( h )
          binder.attack_hit_to_enemy = nil
          binder.attack_get_hit      = nil
        end
      end
    end
  end
  if obj:animation_count() < 1 then
    local i = math.random( 0, 5 )
    obj:add_animation( "stand_walk_fwd_" .. i, true )
  end
end


function dog_attack( obj )
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  binder.attack_t = time_global() + 1513
  if obj.health < 0.05 then return end
  local enemy = obj:best_enemy()
  if not (
    enemy and enemy:id() == db.actor:id() and obj:see( enemy )
  ) then
    return
  end
  local dist = obj:position():distance_to( enemy:position() )
  if dist > 8 then return end
  if math.random() > dsh.get_this_level_difficulty() then return end
  level.add_pp_effector( "radiation.ppe", 2012, false )
  local h = hit()
  h.type      = hit.telepatic
  h.power     = 0.01 + 0.02 * master_koef() * dsh.get_this_level_difficulty()
  h.impulse   = 0.0
  h:bone( "bip01_spine" ) -- ????? ??????????? ?????
  h.draftsman = obj
  h.direction = obj:direction()
  db.actor:hit( h )
  local dog_shield = inventory.on_belt( "af_idol_monolita" ) and 0 or 1
  local drop       = (
    0.05 + ( 0.03 * level.get_game_difficulty() )
  ) * dog_shield
  if math.random() < drop then
    local active_slot = db.actor:active_slot()
    if active_slot and ( active_slot == 1 or active_slot == 2 ) then
      db.actor:drop_item( db.actor:active_item() )
      archievements.acv_count_event( "acv_drop", 10, "????-?????????" )
    end
  end
end


function dog_attack_phantom( obj )
  if not (
    obj:section() == "dog_strong" or obj:section() == "dog_habaruch"
  ) then
    return
  end
  local binder = obj:binded_object()
  if binder.attack_t2 and binder.attack_t2 > time_global() then return end
  binder.attack_t2 = time_global() + 5000
  if obj.health < 0.05 then return end
  local enemy = obj:best_enemy()
  if not (
    enemy and enemy:id() == db.actor:id() and obj:see( enemy )
  ) then
    return
  end
  local dist = obj:position():distance_to( enemy:position() )
  if dist < 8 then return end
  if not (
    binder.phantom_spawned_id
    and level.object_by_id( binder.phantom_spawned_id )
  ) then
    binder.phantom_spawned_id = nil
    if math.random() < 0.3 then
      local sobj = alife():create(
        "phantom_dog_" .. math.random( 2 ),
        obj:position(),
        enemy:level_vertex_id(), enemy:game_vertex_id()
      )
      binder.phantom_spawned_id = sobj.id
    end
  end
end


function poltergeist_attack( obj )
  local enemy = obj:best_enemy()
  if not ( enemy and obj:see( enemy ) ) then return end
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( enemy:position() )
  local attack_dist = 3
  binder.attack_t   = time_global() + (
    dist < ( attack_dist * 2 ) and 0 or 1000
  )
  if dist > attack_dist then return end
  charge_tushkano( obj, enemy )
end


function pseudodog_attack( obj )
  local enemy = obj:best_enemy()
  if not (
    enemy and enemy:id() == db.actor:id()
    and obj:see( enemy ) and enemy:see( obj )
  ) then
    return
  end
  local binder = obj:binded_object()
  local time_next_attack = 2500
  local time_cam_effect  = 700
  if ( not binder.attack_t ) or binder.attack_t < time_global() then
    local v1 = obj:direction()
    local v2 = db.actor:direction()
    if
      ( v1.x * v2.x ) + ( v1.z * v2.z ) < -0.6
      and obj:position():distance_to( db.actor:position() ) < 20
    then
      binder.attack_n = true
      for _, n in ipairs({ 1, 2 }) do
        level.add_cam_effector(
          "build_1935_pseudodog_effect_" .. n .. ".anm", 990 + n, false,
          ""
        )
      end
      level.add_pp_effector ( "psy_antenna.ppe", 395, false )
      local h = hit()
      h.draftsman = obj
      h.type      = hit.telepatic
      h.direction = vector():set( 0, 0, 0 )
      h:bone( "bip01_spine" ) --/ ??? ????? '?????'
      h.power     = 0.05 + 0.02 * master_koef() * dsh.get_this_level_difficulty()
      h.impulse   = 0.0
      db.actor:hit( h )
      local snd = xr_sound.get_safe_sound_object(
        "monsters\\pseudodog\\psy_affect_0", sound_object.s2d
      )
      snd:play_at_pos( db.actor, db.actor:position() )
      local dog_shield = inventory.on_belt( "af_idol_monolita" ) and 0 or 1
      local drop       = (
        0.05 + ( 0.03 * level.get_game_difficulty() )
      ) * dog_shield
      if math.random() < drop then
        local active_slot = db.actor:active_slot()
        if active_slot and ( active_slot == 1 or active_slot == 2 ) then
          db.actor:drop_item( db.actor:active_item() )
          archievements.acv_count_event( "acv_drop", 10, "????-?????????" )
        end
      end
      binder.attack_t = time_global()
        + time_next_attack * ( 1 + math.random( -0.2, 0.2 ) )
        + time_cam_effect
    end
  elseif
    binder.attack_n
    and binder.attack_t < time_global() + time_next_attack
  then
    level.remove_pp_effector( 395 )
    for _, n in pairs({ 1, 2 }) do
      level.remove_cam_effector( 990 + n )
    end
    binder.attack_n = false
  end
end


function set_custom_panic( obj, binder, enemy )
  local dist = obj:position():distance_to( enemy:position() )
  local panic_dist = 6
  binder.panic_t   = time_global() + (
    dist < ( panic_dist * 3 ) and 0 or 1000
  )
  if enemy:active_slot() == 0 and enemy:see( obj ) and dist < panic_dist then
    obj:set_custom_panic_threshold( 1 )
  else
    obj:set_custom_panic_threshold( 0 )
  end
end


function tushkano_attack( obj )
  local enemy = obj:best_enemy()
  if not ( enemy and obj:see( enemy ) ) then return end
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( enemy:position() )
  local attack_dist = 2
  binder.attack_t   = time_global() + (
    dist < ( attack_dist * 2 ) and 0 or 1000
  )
  if dist > attack_dist then return end
  if obj:section() == "electro_tushkano_normal" then
    charge_tushkano( obj, enemy )
  else
    if math.random() > 0.25 then return end
    local h = hit()
    h.type      = hit.chemical_burn
    h.direction = vector():set( 0, 0, 0 )
    h.power     = 0.03 + 0.015 * level.get_game_difficulty()
    h.impulse   = 0
    h.draftsman = enemy
    enemy:hit( h )
  end
end


function zombie_attack( obj )
  if obj.health < 0.05 then return end
  local enemy = obj:best_enemy()
  if
    not (
      enemy and enemy:id() == db.actor:id() and obj:see( enemy )
    )
  then
    return
  end
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( enemy:position() )
  local attack_dist = 35
  binder.attack_t   = time_global() + 1000
  if dist > attack_dist then return end
  if math.random() < 0.2 + 0.1 * level.get_game_difficulty() then
    if math.random() < 0.4 then
      local snd_obj=xr_sound.get_safe_sound_object(
        "monsters\\zombie\\zombi_attack2"
      )
      snd_obj:play_no_feedback( enemy, sound_object.s2d, 0, vector(), 5.0 )
      level.set_snd_volume( 0.1 )
    end
    if db.actor.satiety >= 0.1 then
      db.actor.satiety = -0.1
    end
  end
end


-- ????? ????????? ??? ??????????? ? ??????? ?????
local insect_particle = particles_object( "ogsm\\ogsm_flies_00" )
local insect_sound    = xr_sound.get_safe_sound_object( [[anomaly\flies]] )

function zombie_plague_attack( obj )
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( db.actor:position() )
  local attack_dist = 10
  binder.attack_t   = time_global() + (
    dist < ( attack_dist * 2 ) and 100 or 1000
  )
  if dist < 10 then
    level.add_pp_effector( "dead_zone.ppe", 1001, true )
    level.set_pp_effector_factor( 1001, 0.1 )
    local actor = db.actor:position()
    if not insect_particle:playing() then
      insect_particle:play_at_pos(
        vector():set( actor.x, actor.y + 1.8, actor.z )
      )
    else
      insect_particle:move_to(
        vector():set( actor.x, actor.y + 1.8, actor.z ),
        vector():set( actor.x, actor.y + 1.8, actor.z )
      )
    end
    if not insect_sound:playing() then
      insect_sound:play_at_pos( db.actor, actor )
      local zh = hit()
      zh.draftsman = obj
      zh.type      = hit.chemical_burn
      zh.direction = obj:position():sub( actor )
      zh:bone( "bip01_spine" )
      zh.power     = 5
      zh.impulse   = 1.0
      db.actor:hit( zh )
    else
      insect_sound:set_position( actor )
    end
  else
    level.remove_pp_effector( 1001 )
    insect_particle:stop()
  end
end


-- ????? ????????? ??? ??????????? ? ?????????? ?????
local komar_sound = xr_sound.get_safe_sound_object( [[anomaly\komar]] )

function zombie_plague_komar_attack( obj )
  local binder = obj:binded_object()
  if binder.attack_t and binder.attack_t > time_global() then return end
  local dist = obj:position():distance_to( db.actor:position() )
  local attack_dist = 12
  binder.attack_t   = time_global() + (
    dist < ( attack_dist * 2 ) and 100 or 1000
  )
  if dist < 12 then
    level.add_pp_effector( "total_recall.ppe", 1002, true )
    level.set_pp_effector_factor( 1002, 0.1 )
    local actor = db.actor:position()
    if not insect_particle:playing() then
      insect_particle:play_at_pos(
        vector():set( actor.x, actor.y + 1.8, actor.z )
      )
    else
      insect_particle:move_to(
        vector():set( actor.x, actor.y + 1.8, actor.z ),
        vector():set( actor.x, actor.y + 1.8, actor.z )
      )
    end
    if not komar_sound:playing() then
      komar_sound:play_at_pos( db.actor, actor )
      local zh = hit()
      zh.draftsman = obj
      zh.type      = hit.chemical_burn
      zh.direction = obj:position():sub( actor )
      zh:bone( "bip01_spine" )
      zh.power     = 8
      zh.impulse   = 2.0
      db.actor:hit( zh )
    else
      komar_sound:set_position( actor )
    end
  else
    level.remove_pp_effector( 1002 )
    insect_particle:stop()
  end
end


local tushkano_particle = particles_object( "anomaly2\\electra_entrance_big" )
local tushkano_sound    = sound_object( [[monsters\tushkano\tushkano_spark]] )

function charge_tushkano( obj, enemy )
  if not tushkano_particle:playing() then
    tushkano_particle:play_at_pos( obj:position() )
  end
  if not tushkano_sound:playing() then
    tushkano_sound:play_at_pos( obj, obj:position(), 0 )
    local zh = hit()
    zh.draftsman = enemy
    zh.type      = hit.shock
    zh.direction = obj:position():sub( enemy:position() )
    zh:bone( "pelvis" )
    zh.power     = 0.075 + 0.025 * level.get_game_difficulty()
    zh.impulse   = 0.05
    enemy:hit(zh)
  end
end


function on_death( obj, who )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    local workers = binder[ script_name() .. ".workers" ]
    if workers then
      if table.getn( workers.alive ) > 0 then workers.alive = {} end
      if table.getn( workers.dead  ) == 0 then
        ogse_signals.get_mgr():unsubscribe( subscribed )
      end
    else
      ogse_signals.get_mgr():unsubscribe( subscribed )
    end
  end
  if obj:section() == "zombie_plague" then
    level.remove_pp_effector( 1001 )
    insect_particle:stop()
  elseif obj:section() == "zombie_plague_komar" then
    level.remove_pp_effector( 1002 )
    insect_particle:stop()
  end
end

