-- -*- mode: lua; coding: windows-1251-dos -*-
-- файл из мода "Народной солянки 2009" от 14.06.
-- Адаптирован для Менеджера оружия. Rulix aka Bak от 2.07.09
-- Адатировал: Idler.

local upd_time
local upd_time1
local upd_time2
local upd_time3
local upd_time4
local upd_time5

local table_sort = table.sort
local math_ceil = math.ceil

function init(obj)
  xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
  npc:bind_object(actor_binder(npc))
  -- level_tasks.add_location(707,"blue_location","Лукаш")
  -- level_tasks.add_location(702,"blue_location","Макс")
  -- level_tasks.add_location(728,"blue_location","Повар")
end

local game_difficulty_by_num = {
  [0] = "gd_novice",
  [1] = "gd_stalker",
  [2] = "gd_veteran",
  [3] = "gd_master"
  }

lasthealth  = 0
lasttime  = 0
post_process = 0
local weapon_hide = false
-- local arts = false

local sim = alife()
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init (obj) super(obj)
  sim = alife()
  self.bCheckStart = false
  self.weather_manager = level_weathers.WeatherManager()
  self.actor_detector = xr_detector.actor_detector()
  self.is_saved = false
  self.am = ogse_signals.get_mgr()
  self.am:call("on_load_before_all")
  self.am:call("on_init", obj)
  event("actor_init"):trigger({object = obj})
end
function actor_binder:__finalize()
	self.am:call("on_finalize", obj)
	event("actor_finalize"):trigger()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
  --amk.updateGameTime()
  printf("actor net spawn")
--  skunk.dbglog("actor net spawn")
  db.add_actor(self.object)
  self.am:call( "on_before_spawn" )
  zamok.restore()
  level.show_indicators()

  self.bCheckStart = true
  self.weapon_hide = false -- спрятано или нет оружие при разговоре.
  weapon_hide = false -- устанавливаем глобальный дефолтовый флаг.

  if object_binder.net_spawn(self,data) == false then
--    skunk.dbglog("actor net spawn 1")   
    return false
  end

  set_extensions_flags(15)

--  skunk.dbglog("actor net spawn 2")  
  if self.st.disable_input_time == nil then
    level.enable_input()
  end

  fly.stop()
--  self.weather_manager:reset()
--  game_stats.initialize ()

  if(actor_stats.add_to_ranking~=nil)then
    actor_stats.add_to_ranking(self.object:id())
  end

  --' Загружаем настройки дропа
  death_manager.init_drop_settings()
  
-- added by xStream for AMK miniSDK
  if rx_ai then 
	rx_ai.actor_net_spawn()
  end
  
  amk.on_game_load(obj)  
  xr_gulag.make_restrictors_registry()
--  ui_mm_opt_add.del_bad_objects()
--===============================

--[[local bad_object_names = {"wpn_lr30053522", "wpn_lr30058409" } --"wpn_lr30025601", "wpn_lr30028817","wpn_lr30033589"
local i, se_name, se_obj

for i, se_name in ipairs(bad_object_names) do
  se_obj = alife():object(se_name)
  if se_obj then
    news_manager.send_tip(db.actor,"Удалили глючный ствол:"..se_name,nil,nil,1000)
    alife():release(se_obj, true)
  end
end]]

--===============================
  sak.add_tail()
  braad_test.false_info()
  -- end of addition
  meceniy_work.main()
  spawn_level_changer.remove_old_teleport()  
  -- kostya_level --
	spawn_teleport.spawn_teleport_exit()
	spawn_teleport.spawn_teleport_hospital()
--    bind_det_arts.start_update()
    netpacket_pda_id = netpacket_pda_create.create_pda()
-- Akill begin
	akill.akill_start_sound()
-- Akill end
	snp.net_spawn() -- snp
	fly_island.release_completed_fly_islands() -- острова
--	nightvision.pnv_switch(nil, false, false) -- ПНВ
--	hotkeys.init()

	self.lastY = self.object:position().y
	self.currY = self.lastY
	self.update_cnt = 1
	self.delta = 0
	
-------- пауза при загрузке ---------------
	if not ui_mm_opt_main.GetOption("pause_on_load") then 
	  ui_main_menu.start()
	end
-------------------------------------------

	self.am:call("on_spawn", data)
	event("actor_spawn"):trigger({data = data})
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()

  -- added by xStream for AMK miniSDK
  amk.on_game_save(obj)
  -- end of addition

  if(actor_stats.remove_from_ranking~=nil)then
    actor_stats.remove_from_ranking(self.object:id())
  end
--  game_stats.shutdown ()
  set_extensions_flags(0)
  db.del_actor(self.object)

  self.object:set_callback(callback.inventory_info, nil)
  self.object:set_callback(callback.article_info, nil)
  self.object:set_callback(callback.on_item_take, nil)
  self.object:set_callback(callback.on_item_drop, nil)
  self.object:set_callback(callback.trade_sell_buy_item, nil)
  --self.object:set_callback(callback.actor_sleep, nil)
  self.object:set_callback(callback.task_state, nil)
  --self.object:set_callback(callback.map_location_added, nil)
  self.object:set_callback(callback.level_border_enter, nil)
  self.object:set_callback(callback.level_border_exit, nil)
  self.object:set_callback(callback.take_item_from_box, nil)
  self.object:set_callback(callback.use_object, nil)
  self.object:set_callback(callback_ex.on_key_press, nil)
  self.object:set_callback(callback_ex.on_key_release, nil)
  self.object:set_callback(callback_ex.on_key_hold, nil)
  self.object:set_callback(callback_ex.on_mouse_wheel, nil)
  self.object:set_callback(callback_ex.on_mouse_move, nil)
  self.object:set_callback(callback_ex.on_belt, nil)
  self.object:set_callback(callback_ex.on_ruck, nil)
  self.object:set_callback(callback_ex.on_slot, nil)
  self.object:set_callback(callback_ex.on_select_item, nil)
  self.object:set_callback(callback_ex.on_hud_animation_end, nil)
  self.object:set_callback(callback.hit, nil)
  self.object:set_callback(callback_ex.on_goodwill_change, nil)
--  self.object:set_callback(callback_ex.on_release_npc, nil)
  self.object:set_callback(callback.death, nil)
  self.object:set_callback(callback_ex.entity_alive_before_hit, nil)
  self.object:set_callback(callback_ex.on_before_use_item, nil)
  self.object:set_callback(callback_ex.on_after_save, nil)

  if sr_psy_antenna.psy_antenna then
    sr_psy_antenna.psy_antenna:destroy()
    sr_psy_antenna.psy_antenna = false
  end

--  knife_hud.net_destroy()
  xr_sound.stop_all_sound_object()

  if iniStatistic then
    get_console():execute("load ~~~ amk.dump_table(iniLines):")
    amk.dump_table(iniLines)
    get_console():execute("load ~~~ amk.dump_table(iniOtherLines):")
    amk.dump_table(iniOtherLines)
      get_console():execute("load ~~~ amk.dump_table(iniStat):")
      local t = {}
      for sect, count in pairs(iniStat) do
          table.insert(t, {sect, count})
      end
      table_sort(t, sortStat)
    amk.dump_table(t)
  end
  
  self.am:call("on_destroy")
  event("actor_destroy"):trigger()
  object_binder.net_destroy(self)
end

function sortStat(t1, t2)
	return t1[2] > t2[2]
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
  object_binder.reinit(self)
  
  local npc_id = self.object:id()

  db.storage[npc_id] = { }

  self.st = db.storage[npc_id]
  self.st.pstor = nil

  self.next_restrictors_update_time = -10000

  self.object:set_callback(callback.inventory_info, self.info_callback, self)
  self.object:set_callback(callback.article_info, self.article_callback, self)
  self.object:set_callback(callback.on_item_take, self.on_item_take, self)
  self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
  self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
  --self.object:set_callback(callback.actor_sleep, self.sleep_callback, self)
  self.object:set_callback(callback.task_state, self.task_callback, self)
  --self.object:set_callback(callback.map_location_added, self.map_location_added_callback, self)
  self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
  self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
  self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
  self.object:set_callback(callback.use_object, self.on_use_object, self)
  self.object:set_callback(callback.hit, self.hit_callback, self)
  self.object:set_callback(callback.death, self.death_callback, self)


  self.object:set_callback(callback_ex.on_key_press, self.on_key, self)			-- нажатие клавиши
  self.object:set_callback(callback_ex.on_key_release, self.on_key_free, self)		-- отпускание клавиши
  self.object:set_callback(callback_ex.on_key_hold, self.on_key_hold, self)		-- удержание клавиши
  self.object:set_callback(callback_ex.on_mouse_wheel, self.on_wheel_rotation, self)	-- вращение колесика мыши
  self.object:set_callback(callback_ex.on_mouse_move, self.on_mouse_move, self)		-- движение мыши
  self.object:set_callback(callback_ex.on_belt, self.item_to_belt, self)		-- перемещение предмета на пояс
  self.object:set_callback(callback_ex.on_ruck, self.item_to_backpack, self)	-- перемещение предмета в рюкзак
  self.object:set_callback(callback_ex.on_slot, self.item_to_slot, self)		-- перемещение предмета в слот
  self.object:set_callback(callback_ex.on_select_item, self.on_select_item, self)		-- перемещение предмета в слот
  self.object:set_callback(callback_ex.on_hud_animation_end, self.hud_animation_end, self) -- вызывается в конце проигрывания анимации худа (только если используем play_hud_animation)
  self.object:set_callback(callback_ex.on_goodwill_change, self.on_goodwill_change, self)		-- изменение отношений
--  self.object:set_callback(callback_ex.on_release_npc, self.on_release_npc, self)		-- удаление серверного объекта непися или монстра
  --
  self.object:set_callback(callback_ex.entity_alive_before_hit, self.before_hit_callback, self)
  self.object:set_callback(callback_ex.on_before_use_item, self.before_use, self)
  self.object:set_callback(callback_ex.on_after_save, self.after_save, self)

  self.am:call("on_reinit")
  event("actor_reinit"):trigger()
end

function actor_binder:hud_animation_end(a1, blend_addr)
	local addr = sum_args_ex(blend_addr, 56)
	local value = db.actor:get_memory_int("", addr)

	--log3("[actor_binder:hud_animation_end] blend_addr = %x, v = %d, a1 = %d", blend_addr, value, a1)
end
function actor_binder:on_goodwill_change(from, to)
	self.am:call("on_goodwill_change", from, to)
end

function actor_binder:on_release_npc(npc_id)
	self.am:call("on_release_npc", npc_id)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:death_callback(victim, who)
	if victim:id() == db.actor:id() then
		archievements.on_actor_death(who)
	end
	
	-- Правка неотключения пения контролера после смерти гг
	if kostya_dialog.kill_online_kontroller() then
		news_manager.send_tip(db.actor, "Если во время смерти ГГ звучало \"пение\" контролера, то дождитесь его завершения прежде, чем загрузить сохранение, иначе придется полностью перезапускать игру.", nil, "nano", 30000)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	if string.sub(item:section(),1,10)=="val_zapis_" then
		valerich_treasures.spawn_next( tonumber(string.sub(item:section(),11,-1)) )
	end

	-- если калбек на взятие предмета из тайника поставить сюда, а не в on_item_take, то калбек сработает только один раз
	-- и не будет вызываться каждый раз при лоаде, поэтому поршнем его отсекать не нужно
--	hotkeys.on_item_take(item)
	fly.returner_clear_pos(item)
	snp.check_treasure_item(item)
	braad_test.mina_band2(item)
	
	-- подъем рюкзаков
	if box:is_inv_box_empty() then
	  if transparent_treasure.IsTaken(box:section()) then 
		level.start_stop_menu(level.main_input_receiver(), true)

		-- здесь можно прописывать калбеки взятия на проверку по секции тайника, чтобы не придумывать уникальные предметы
		snp.check_treasure(box)
		archievements.check_treasure(box)
		kostya_dialog.stealth_on_take(box)
		
		alife():create("treasure_item",box:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
		alife():release(alife():object(box:id()))
	  end
	  
	  if box:section() ~= "m_inventory_box" then
		archievements.acv_count_event("acv_sled", 300, "Следопыт")
	  end
	end

  local story_id = box:story_id()
  if story_id == nil then
    return
  end

  treasure_manager.take_item_from_box(box, story_id)
-- zamok.remove(box, item)

	--AMK UTILS--
	amk.on_item_take_from_box(box,item)
	amk_utils.actor_item_from_box(box, item)
	--AMK UTILS--

  self.am:call("on_take_from_box", box, item, sim:object(item:id()))
  event("actor_take_item_from_box"):trigger({from = box, what = item})
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
--  self.actor_detector:actor_enter()
  
  --AMK UTILS--
--  amk_utils.actor_level_border_enter(npc, info_id)
  --AMK UTILS--
  
  self.am:call("on_level_border_enter", npc, info_id)
  event("actor_level_border_enter"):trigger({who = npc, info = info_id})
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
--  self.actor_detector:actor_exit()
  
   --AMK UTILS--
--   amk_utils.actor_level_border_exit(npc, info_id)
   --AMK UTILS--
   
  self.am:call("on_level_border_exit", npc, info_id)
  event("actor_level_border_exit"):trigger({who = npc, info = info_id})
end
----------------------------------------------------------------------------------------------------------------------
local info2call = {
	ui_pda                   = "on_pda_open",
	ui_pda_hide              = "on_pda_hide",
	ui_pda_contacts          = "on_pda_contacts_open",
	ui_pda_contacts_hide     = "on_pda_contacts_hide",
	ui_pda_map_local         = "on_pda_map_local",
	ui_pda_map_global        = "on_pda_map_global",
	ui_pda_news              = "on_pda_news_open",
	ui_pda_news_hide         = "on_pda_news_hide",
	ui_pda_jobs_failed       = "on_pda_jobs_failed",
	ui_pda_jobs_accomplished = "on_pda_jobs_accomplished",
	ui_pda_jobs_current      = "on_pda_jobs_current",
	ui_pda_jobs              = "on_pda_jobs_open",
	ui_pda_jobs_hide         = "on_pda_jobs_hide",
	ui_pda_diary             = "on_pda_diary_open",
	ui_pda_diary_hide        = "on_pda_diary_hide",
	ui_pda_encyclopedia      = "on_pda_encyclopedia_open",
	ui_pda_encyclopedia_hide = "on_pda_encyclopedia_hide",
	ui_pda_actor_info        = "on_pda_actor_info",
	ui_pda_ranking           = "on_pda_ranking",
	ui_pda_events            = "on_pda_events",
	ui_inventory             = "on_inventory_open",
	ui_inventory_hide        = "on_inventory_hide",
	ui_talk                  = "on_talk_open",
	ui_talk_hide             = "on_talk_hide",
	ui_trade                 = "on_trade_open",
	ui_trade_hide            = "on_trade_hide",
	ui_car_body              = "on_body_open",
	ui_car_body_hide         = "on_body_hide",
}
function actor_binder:info_callback(npc, info_id)
--  printf("*INFO*: npc='%s' id='%s'", npc:name(), info_id)
  --' Сюжет
  level_tasks.proceed(self.object)
  -- Отметки на карте
--  hidden_slots.on_info(info_id)
  archievements.on_info(info_id)
  level_tasks.process_info_portion(info_id)

  if string.sub(info_id,1,3)~="ui_" then
	db.vbr = drrr.next_vbr()
  end
  
              --AMK UTILS--
            amk.on_info(npc,info_id) 
            amk_utils.actor_info(npc, info_id) 
--            inventory.on_inventory_info(info_id) 
--            hotkeys.on_info(info_id) 
               --AMK UTILS--
	if npc:id() == db.actor:id() then
		meceniy_spawn.respawn(info_id)
    end
  self.am:call("on_info", npc, info_id)
  event("actor_info"):trigger({who = npc, info = info_id})
  local sc = info2call[info_id]
  if sc then
     self.am:call(sc, npc)
     event(sc):trigger({who = npc})
  end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade (item, sell_bye, money)
    if sell_bye == true then
		game_stats.money_trade_update(money)
    else       
		if isMagazinedWeapon(item) then
			item:unload_magazine()
		end
		archievements.on_receive_count_item(item)
		game_stats.money_trade_update(-money)
    end

    self.am:call("on_trade", item, sell_bye, money)
    event("actor_trade"):trigger({what = item, money = money, item_is_sold = sell_bye})
    db.traded = true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback(npc, group, name, article_type)
  --printf("article_callback [%s][%s]", group, name)
  if device().precache_frame >1 then return end
  
  if group == "Diary" then
    news_manager.send_encyclopedy("diary", group)
  else
    news_manager.send_encyclopedy("encyclopedy", group)
  end
  
  --AMK UTILS--
  amk.on_info(npc,info_id)
  amk_utils.actor_article(npc, group, name)
  --AMK UTILS--
  
  self.am:call("on_article", npc, group, name, article_type)
  event("actor_article"):trigger({who = npc, article_group = group, article_name = name, article_type = article_type})
end
--------------------------------------------------------------------------------------------------
function actor_binder:on_item_take (obj)
    level_tasks.proceed(self.object)
    --game_stats.update_take_item (obj, self.object)
          local item = obj 
          --AMK UTILS--
          amk.on_item_take(obj)
          amk_utils.actor_item_take(obj)
          
          if obj:clsid() == clsid.wpn_ammo then 
	dunin_ammo.on_take(obj) 
	end 
	sak.check_used_item(obj)
	braad_test.checking_use_item(obj)

--	art_hit.hit_by_art(obj)
  --AMK UTILS--
    babah.on_item_take(obj)
--  inventory.on_item_take(item)
spawn_zombi.checking_taken_item(obj)
spawn_zombi.checking_taken_item2(obj)
spawn_zombi.checking_taken_item3(obj)
spawn_zombi.checking_taken_item4(obj)
spawn_zombi.checking_taken_item5(obj)
spawn_zombi.checking_taken_item6(obj)
spawn_zombi.checking_taken_item7(obj)
spawn_zombi.checking_taken_item8(obj)
spawn_zombi.checking_taken_item9(obj)
spawn_zombi.checking_taken_item10(obj)
spawn_zombi.checking_taken_item11(obj)
spawn_zombi.checking_taken_item12(obj)
spawn_zombi.checking_taken_item13(obj)
spawn_zombi.checking_taken_item14(obj)
spawn_zombi.checking_taken_item15(obj)
spawn_zombi.checking_taken_item16(obj)
spawn_zombi.checking_taken_item17(obj)
spawn_zombi.checking_taken_item18(obj)
spawn_teleport.checking_taken_item19(obj)
spawn_teleport.checking_taken_item20(obj)
spawn_teleport.checking_taken_item21(obj)
spawn_teleport.checking_taken_item22(obj)
new_spawn.checking_taken_item23(obj)
spawn_teleport.checking_taken_item24(obj)
spawn_teleport.checking_taken_item25(obj)
spawn_teleport.checking_taken_item26(obj)
spawn_teleport.checking_taken_item27(obj)
spawn_teleport.checking_taken_item28(obj)
spawn_restrictor.checking_taken_item29(obj)
spawn_restrictor.checking_taken_item30(obj)
spawn_teleport.checking_taken_item31(obj)
spawn_restrictor.checking_taken_item32(obj)
spawn_teleport.checking_taken_item33(obj)
spawn_teleport.checking_taken_item34(obj)
spawn_teleport.checking_taken_item35(obj)
spawn_teleport.checking_taken_item36(obj)
new_spawn.checking_taken_item37(obj)
arhara_dialog.checking_taken_item38(obj)
spawn_zombi.checking_taken_item39(obj)
spawn_zombi.checking_taken_item40(obj)
meceniy_utils.on_item_take_callback(obj)
spawn_zombi.checking_taken_item41(obj)
spawn_zombi.checking_taken_item42(obj)
spawn_zombi.checking_taken_item43(obj)
arhara_dialog.checking_taken_item44(obj)
arhara_dialog.checking_taken_item45(obj)
arhara_dialog.checking_taken_item46(obj)
arhara_dialog.checking_taken_item47(obj)
arhara_dialog.checking_taken_item48(obj)
arhara_dialog.checking_taken_item49(obj)
arhara_dialog.checking_taken_item50(obj)
arhara_dialog.checking_taken_item51(obj)
arhara_dialog.checking_taken_item52(obj)
arhara_dialog.checking_taken_item53(obj)
arhara_dialog.checking_taken_item54(obj)
arhara_dialog.checking_taken_item55(obj)
arhara_dialog.checking_taken_item56(obj)
arhara_dialog.checking_taken_item57(obj)
arhara_dialog.checking_taken_item58(obj)
valerich_treasures.on_item_take(obj)
kostya_dialog.checking_taken_item59(obj)
braad_test.checking_taken_item60(obj)
kostya_dialog.checking_taken_item61(obj)
kostya_dialog.checking_taken_item62(obj)
kostya_dialog.checking_taken_item63(obj)
kostya_dialog.checking_taken_item64(obj)
kostya_dialog.checking_taken_item_vzn(obj)
kostya_dialog.peshera_go(obj)
snp.checking_taken_item_snp(obj)
archievements.on_receive_count_item(obj)
archievements.on_item_take(obj)
volazar_dialog.check_upd(obj)
-- Akill begin
akill.checking_taken_item68(obj)
akill.checking_taken_item69(obj)
akill.checking_taken_item70(obj)
akill.checking_taken_item71(obj)
akill.checking_taken_item74(obj)
akill.checking_taken_item75(obj)
akill.checking_taken_item76(obj)
akill.checking_taken_item77(obj)
akill.checking_taken_item78(obj)
akill.checking_taken_item79(obj)
akill.checking_taken_item80(obj)
akill.checking_taken_item81(obj)
akill.checking_taken_item82(obj)
akill.checking_taken_item83(obj)
akill.checking_taken_item84(obj)
akill.checking_taken_item85(obj)
akill.checking_taken_item86(obj)
akill.checking_taken_item87(obj)
-- Akill end
chess.item_take(obj)
monster_parts.on_part_take(obj)
-- hotkeys.on_item_take(item)
fly.returner_clear_pos(obj)

	if rx_ai then
		rx_ai.actor_item_take(obj)
	end 

	if isMagazinedWeapon(obj) and self.object:is_talking() and not protected_items.not_unloaded_weapon(obj:section()) then
		obj:unload_magazine()
	end
	
	-- должен в итоге быть монолитовцем при определенных условиях
	snp.join_monolith()

--[=[
	-- фикс переодевания гг при взятии броника
	if obj:clsid() == clsid.equ_stalker_s then
		local outfit = db.actor:get_current_outfit()
		if outfit and outfit:id() ~= obj:id() then
			db.actor:transfer_item(outfit, db.actor)
		end
	end
--]=]
    buusty_dialog.use_money(obj)

        local sobj = sim:object(obj:id()) 
        if sobj then -- такое бывает, если до этого объект был удалён в on_ruck
           self.am:call("on_take", obj, sobj)
           event("actor_item_take"):trigger({what = obj})
        end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop (obj)
  level_tasks.proceed(self.object)
    --game_stats.update_drop_item (obj, self.object)
    -- if level.vertex_position(db.actor:level_vertex_id()):distance_to(db.actor:position())>1 then
      -- amk.mylog("Здесь нет вертексов")
    -- else
      -- amk.mylog("Вертекс "..db.actor:level_vertex_id().." "..db.actor:game_vertex_id())
    -- end 
    
  --AMK UTILS--
  amk.on_item_drop(obj)
  amk_utils.actor_item_drop(obj)
  --AMK UTILS--
--  hotkeys.on_item_drop(obj)
--  inventory.on_item_drop(obj)
  sak.check_droped_item(obj)
  braad_test.drop_actor(obj)
  braad_test.drop_lim(obj)
  -------------------------------
  kostya_dialog.peshera_drink(obj)
--[[spawn_level_changer.checking_droped_item(obj)
spawn_level_changer.checking_droped_item2(obj)
spawn_level_changer.checking_droped_item3(obj)
spawn_level_changer.checking_droped_item4(obj)
spawn_level_changer.checking_droped_item5(obj)
spawn_level_changer.checking_droped_item6(obj)
spawn_level_changer.checking_droped_item7(obj)
spawn_level_changer.checking_droped_item8(obj)
spawn_level_changer.checking_droped_item11(obj)
spawn_level_changer.checking_droped_item12(obj)
spawn_level_changer.checking_droped_item13(obj)
spawn_level_changer.checking_droped_item14(obj)]]
--spawn_level_changer.checking_droped_item10(obj)
-- zamok.add(obj)
snp.checking_dropped_item_snp(obj)	-- snp
-- nightvision.checking_droped_obj(obj) -- ПНВ

  self.am:call( "on_drop_before_all", obj )
  local sobj = sim:object(obj:id())
  if sobj then
     self.am:call("on_drop", obj, sobj)
     event("actor_item_drop"):trigger({what = obj})
  end
end
----------------------------------------------------------------------------------------------------------------------

function actor_binder:before_use(item)
	self.am:call("on_actor_before_use", item, sim:object(item:id()))
end


function actor_binder:before_hit_callback( p_s_hit, p_ignore_flags )
  self.last_hit_data = read_hit_data( p_s_hit )
  self.am:call(
    "on_actor_before_hit", self.last_hit_data, p_s_hit, p_ignore_flags
  )
end


function actor_binder:task_callback(_task, _objective, _state)
  task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
  if _objective:get_idx() == 0 then
    if _state == task.fail then
	  if db.actor then
        db.actor:give_info_portion("acv_task_fail")
	  end
      news_manager.send_task(db.actor, "fail", _task, _objective)
    elseif _state == task.completed then
      task_manager.reward_by_task(_task)
      news_manager.send_task(db.actor, "complete", _task, _objective)
    else
      news_manager.send_task(db.actor, "new", _task, _objective)
    end
  else
    if _task:get_objective(0):get_state() == task.in_progress then
      news_manager.send_task(db.actor, "update", _task, _objective)
    end
  end
  
  --AMK UTILS--
  amk_utils.actor_task(_task, _objective, _state)
  --AMK UTILS--
  
  self.am:call("on_task", _task, _objective, _state)
  event("actor_task"):trigger({task = _task, objective = _objective, state = _state})
end

----------------------------------------------------------------------------------------------------------------------
function actor_binder:map_location_added_callback(spot_type_str, object_id)
  if (false==app_ready()) or (device().precache_frame>1) then return end
  --'news_manager.send_task(db.actor, "new")
  self.am:call("on_add_map_location", spot_type_str, object_id)
  event("actor_add_map_location"):trigger({spot_type = spot_type_str, object_id = object_id})
end
----------------------------------------------------------------------------------------------------------------------
-- malandrinus
--watch_value = 0
-- malandrinus
scopeUsed = false
local update_was_never_called = true
function actor_binder:update(delta)
  if update_was_never_called then
    self.am:call("on_before_first_update")
  end
  self.am:call( "on_before_update", delta )
-- malandrinus
--    watch_value = game.time()
-- /malandrinus
  local time = time_global()
  amk.oau_watchdog=200
  amk.oau_reason="actor_binder:update"
  --amk.updateGameTime()
  amk.oau_watchdog=2001
  object_binder.update(self, delta)

  amk.oau_watchdog=188
  if self.bCheckStart then
    printf("SET DEFAULT INFOS")   
	
	db.money = self.object:money()
	db.vbr = drrr.next_vbr()

    if not has_alife_info("storyline_actor_start") and
       (level.name() == "l01_escape")
    then
      self.am:call("on_storyline_start")
      self.object:give_info_portion("storyline_actor_start")
      _G.g_start_avi = true
      printf("*AVI* RUN START AVI")     
    end

    if not has_alife_info("encyclopedy") and has_alife_info("arhara_shaxter_start") then
      self.object:give_info_portion("encyclopedy")
    end

    if not has_alife_info("global_dialogs") then
      self.object:give_info_portion("global_dialogs")
    end

    if not has_alife_info("level_changer_icons") then
      self.object:give_info_portion("level_changer_icons")
    end

    if update_was_never_called then
	for k, v in pairs(xr_companion.companions) do
		if xr_companion.companions[k] == "companion" then
--			if not ogse_car_control.current_car then
				xr_companion.check_teleport(k)
--			end
		end
	end
    end

    level_tasks.add_lchanger_location()
	all_spawn_fix.respawn_allspawn()
	ui_mm_opt_add.send_bad_objects_info()
	ui_load_dialog.saved_games_limit_show_error()
	archievements.acv_death()

	if has_alife_info("fli_chaes_start") and not has_alife_info("fli_chaes_have") and not has_alife_info("fli_chaes_fail") then
		fly_island.fli_chaes_set_range()
	end

	if has_alife_info("sar_monolith_destroy") and not has_alife_info("sar2_monolith_miracle") then
		db.actor:give_info_portion("sar2_monolith_miracle")
	end

	-- Фикс Бармена и двери Арены
	if level.name() == "l05_bar" then
		all_spawn_fix.release_allspawn_object("bar_arena_door_0000")
		alife():create(6708)
	end

	if not has_alife_info("acv_giv") then
		db.actor.no_load_time = amk.game_minutes()+9*60
	end
	
	if amk.has_timer("no_save") then
		abort("Этим сохранением пользоваться нельзя. Удалите его.")
	end
	amk.start_timer("no_save", 5)
	
	--self.health = self.object.health -- светки без проверки стен
    ui_mm_opt_add.del_bad_objects()
    self.bCheckStart = nil    
  end 
  
  amk.oau_watchdog=199
--  sk_actor_death.is_killed()
  fly.update()
  fly.returner_update()
--  lootmoney.transfer_all_desired()
--  bind_monster.transfer_all_desired()
  chess.update()
  self:rotting() -- гниение тупов

--[[  
local fov = device().fov
local wpn
if fov < 35 and xr_logic.pstor_retrieve(db.actor, "use_scope", 0) == 0 then
wpn = db.actor:item_in_slot(db.actor:active_slot())
if wpn and wpn:section() == "wpn_crossbow" or wpn and wpn:section() == "wpn_svd_m3" or wpn and wpn:section() == "wpn_b94_sil" then
if not xr_conditions.is_day() then
level.add_pp_effector("bast.ppe", 1034, true)
get_console():execute ("r2_mblur 0.6")
end
xr_logic.pstor_store(db.actor, "use_scope", 1)
end
elseif fov > 35 and xr_logic.pstor_retrieve(db.actor, "use_scope", 0) == 1 then
xr_logic.pstor_store(db.actor, "use_scope", 0)
level.remove_pp_effector(1034)
get_console():execute ("r2_mblur 0.")
end
]]
  if upd_time3 == nil then
    upd_time3 = time + 500
  elseif upd_time3 < time then
    upd_time3 = time + 500  
--[[
    local accuracy = math_ceil(db.actor:accuracy()*1000)
    if accuracy == 1 then
        if not scopeUsed then
            local item = db.actor:active_item()
            if item then
                --get_console():execute("load ~#I#: db.actor:active_item():section()="..tostring(item:section()))
                if item:section() == "wpn_binoc" then
                    scopeUsed = true
                elseif IAmAWeapon[item:clsid()] then
                    local t = amk.get_weapon_data(alife():object(item:id()))
                    scopeUsed = (bit_and(t.addon_flags, 1) == 1 or rx_utils.get_addon_status(item, "sc") == 1)
                    --amk.dump_table(t)
                end
            end
        end
    else
        scopeUsed = false
    end
]]
  end
--[[
  -- $DreamMod  апдейт схемы сна
  if ogse_sleep_mgr.is_sleep_active() and xr_conditions.actor_dead() then
    xr_logic.issue_event(db.actor, db.storage[db.actor:id()]["ar_sleep"], "update")
  end
]]
  amk.oau_watchdog=198
  -- апдейт погоды
--  self.weather_manager:update()
  amk.oau_watchdog=197
  -- апдейт схемы детектора
  player_ogg.used_item() --self.actor_detector:update()
  amk.oau_watchdog=196  
  --ms_ai.sleep_manager()
  amk.oau_watchdog=195
  -- апдейт звуковой схемы актера
  xr_sound.update_actor()
  amk.oau_watchdog=194
  meceniy_work.set_invisible()
  amk.oau_watchdog=193  
--    meceniy_utils.on_actor_update_callback()
-- by Monnoroch

	if upd_time == nil then
		upd_time = time + 10000
	elseif upd_time < time then
		upd_time = time + 10000
--		monnoroch.upd_time(time)
		
		if db.actor.no_load_time and db.actor.no_load_time < amk.game_minutes() then
			db.actor:give_info_portion("acv_giv")
			db.actor.no_load_time = nil
		end
		
		if not has_alife_info("acv_stay1") and amk.game_days() > 182 then
			db.actor:give_info_portion("acv_stay1")
		elseif not has_alife_info("acv_stay2") and amk.game_days() > 365 then
			db.actor:give_info_portion("acv_stay2")
		end
	end
	
  if upd_time1 == nil then
      upd_time1 = time + 1000
  elseif upd_time1 < time then
      upd_time1 = time + 1000
		amk.oau_watchdog=1931
--	  game_stats.update (delta, self.object)
--      meceniy_work.set_invisible()
	  meceniy_utils.on_actor_update_callback()
        amk.oau_watchdog=1932
--      sak.show_time()
        amk.oau_watchdog=1933
--      arc_main.actor_update()
        amk.oau_watchdog=1934
	  meceniy_work.mainw()
  end
  amk.oau_watchdog=1935
--	  sak.out_teleport() --в net_spawn() этому место!
  if upd_time2 == nil then
    upd_time2 = time + 5000
  elseif upd_time2 < time then
    upd_time2 = time + 5000
--[[
    if not self.object:is_talking() then
      dunin_ammo.on_update()
    end
]]
    amk.oau_watchdog=1936
    sak.nepis_umer()
    amk.oau_watchdog=1937
    braad_test.dead_npc()
    amk.oau_watchdog=1938
    braad_test.check_info()
    amk.oau_watchdog=1939
    braad_test.new_info()
    amk.oau_watchdog=19391
    braad_test.kot_info()
    amk.oau_watchdog=19392
    braad_test.forest_info()
    amk.oau_watchdog=19393
    amk.oau_watchdog=19394
    braad_test.update_new()
    amk.oau_watchdog=19395
    braad_test.kot_update()
    amk.oau_watchdog=19396
--	drrr.vbr()
    amk.oau_watchdog=19397
    amk_alcohol.update()
  end
  amk.oau_watchdog=192
--  knife_hud.update()
--  art_hit.update()
-- ----------------------------------------------------- ARENA_EXTENSION_MOD--------------------------------------------------------
  aem_manager.get_aem():update()
-- ----------------------------------------------------- ARENA_EXTENSION_MOD--------------------------------------------------------
  amk.oau_watchdog=191
  --' Проверка потери жизни
--[[
  if self.object.health - lasthealth > 0.001 or
     self.object.health - lasthealth < -0.001 then
    printf("%f | %f", self.object.health, self.object.health - lasthealth, game.time() - lasttime)
    lasthealth = self.object.health
    lasttime = game.time()
  end
]]  
  -- Обновление отключения ввода с клавиатуры.
  if self.st.disable_input_time ~= nil and
     game.get_game_time():diffSec(self.st.disable_input_time) >= self.st.disable_input_idle 
  then
    level.enable_input()
    self.st.disable_input_time = nil
  end
  -- Обновление сна с переносом чувака в указанную позицию
  if self.st.sleep_relocate_time ~= nil and
     game.get_game_time():diffSec(self.st.sleep_relocate_time) >= self.st.sleep_relocate_idle 
  then
	db.actor:give_info_portion("teleport_started")
    self.object:set_actor_position(self.st.sleep_relocate_point)
    local dir = self.st.sleep_relocate_point:sub(self.st.sleep_relocate_look)
    self.object:set_actor_direction(dir:getH())
	db.actor:give_info_portion("teleport_finished")
    self.st.sleep_relocate_time = nil
  end

  -- Апдейт прятание оружия игрока во время диалога
  if weapon_hide == true or self.object:is_talking() then
    if self.weapon_hide == false then
      self.object:hide_weapon()
      self.weapon_hide = true
    end
  else
    if self.weapon_hide == true then
		-- сюда пишем все проверки, когда можно достать оружие
		if	not db.eat
		then
			self.object:restore_weapon()
			self.weapon_hide = false
		end
    end
  end 

  amk.oau_watchdog=191
  -- обновление рестрикторов, которые под логикой, срабатывает через интервалы времени
  if self.next_restrictors_update_time < time then
    bind_restrictor.actor_update(delta)
	
	-- Апдейтим наш телепорт (Kostya_level)
	bind_mteleport.actor_update(delta)
    self.next_restrictors_update_time = time + 200

--    task_manager.actor_update()

	-- Для актора hit_callback не вызывается. Заткнем эту дырку.
	--[[ Пока отключено - светки без проверки стен
	if self.health-self.object.health > 0.001 then
		hit_flash_callback(self.object, self.health-self.object.health, vector():set(1,0,0), self.object, 0)
	end
	self.health = self.object.health
	--]]
  end

	self.update_cnt = self.update_cnt+1
	self.delta = self.delta+delta
	if self.update_cnt > 5 then
		self.currY = self.object:position().y
		self.lastY = self.currY
		self.update_cnt = 1
		self.delta = 0
		
		if has_alife_info("teleport_finished") then
			db.actor:disable_info_portion("teleport_started")
			db.actor:disable_info_portion("teleport_finished")
		end
	end

  amk.oau_watchdog=190
  -- обновление постпроцессов
  if post_process ~= 0 then
    if post_process:update () == true then
       post_process = 0
    end
  end

  -- обновление пси-антенны
  if sr_psy_antenna.psy_antenna then
    sr_psy_antenna.psy_antenna:update(delta)
  end

           --[[ local hud_demo = get_hud()
    local custom_static_demo = hud_demo:GetCustomStatic("cs_demo_play")

    if custom_static_demo == nil then
		hud_demo:AddCustomStatic("cs_demo_play", true)
		hud_demo:GetCustomStatic("cs_demo_play"):wnd():SetTextST("st_demo_play")
	end
	]]

--       inventory.update() 

  --' Вывод сообщения о большой радиации
  if self.object.radiation >= 0.7 then
    local hud = get_hud()
    local custom_static = hud:GetCustomStatic("cs_radiation_danger")
    if custom_static == nil then
      hud:AddCustomStatic("cs_radiation_danger", true)
      hud:GetCustomStatic("cs_radiation_danger"):wnd():SetTextST("st_radiation_danger")
    end
  else
    local hud = get_hud()
    local custom_static = hud:GetCustomStatic("cs_radiation_danger")
    if custom_static ~= nil then
      hud:RemoveCustomStatic("cs_radiation_danger")
    end
  end
  amk.oau_watchdog=189
--  if not self.object:is_talking() then 
--	dunin_ammo.on_update()
--  end 
  
  amk.oau_watchdog=187
  --AMK UTILS--
  amk.on_actor_upade(delta)
--  amk_utils.actor_update(delta)
  --AMK UTILS--
  amk.oau_watchdog=186
--  amk.oau_reason="actor_binder:update"  
--  sak.out_teleport() 
--  amk.oau_watchdog=185
--  sak.nepis_umer()
--  amk.oau_watchdog=184
--  braad_test.dead_npc()
--  braad_test.check_info()
--  braad_test.new_info()
--  braad_test.kot_info()
--  braad_test.forest_info()
--  braad_test.update_new()
--  braad_test.kot_update()
--  amk.oau_watchdog=183
  
  -- added by Red75. Контроль за переполнением 
  if self.warning then
    self.warning=nil
    get_hud():AddCustomStatic("hud_save_warning")
    local wnd=get_hud():GetCustomStatic("hud_save_warning"):wnd()
    if self.critical==1 then
      wnd:SetTextST(game.translate_string("amk_warn_trans"))
      self.critical=nil
    elseif self.critical==2 then
      wnd:SetTextST(game.translate_string("amk_warn_trans_critical"))
      self.critical=nil
    else
      wnd:SetTextST(game.translate_string("amk_warn_attention"))
    end
  elseif self.wt and self.wt<time_global() then
    self.wt=nil
    if get_hud():GetCustomStatic("hud_save_warning") then
      get_hud():RemoveCustomStatic("hud_save_warning")
    end
  end
  
  amk.oau_watchdog=182
  if rx_ai then rx_ai.actor_update() end
  amk.oau_watchdog=181
         -- end of addition
  stco.update()
  transparent_treasure.update()
--  hotkeys.update()
  amk.oau_watchdog=180
  -------

--  meceniy_work.mains()	--/обьекты
--  amk.oau_watchdog=179
--  meceniy_work.mainw()	--/Зомбирование  
--  amk.oau_watchdog=179
-- by Monnoroch
--	if upd_time == nil then                           
--		upd_time = time + 10000                 
--	elseif upd_time < time then                       
--		upd_time = time + 10000                  
--		monnoroch.upd_time(time)                 
--	end
 -- by Monnoroch 
  --проверка зависания биндеров НПЦ и мобов раз в 0,5сек
  --закомментировано на случай разбора полётов
--[[  if upd_time3 == nil then
    upd_time3 = time + 500
  elseif upd_time3 < time then
    upd_time3 = time + 500  
    if db and db.storage then
      for k,v in pairs(db.storage) do
        if v.us ~= nil and v.us ~= 0 then
          abort("binder(%s) zavis(%s)", db.creatures[k]:name(), v.us)
          v.us = nil				
          break
        end
      end
      self.is_saved = false
    end
  end]]
   if upd_time5 == nil then
    upd_time5 = time + 120000
  elseif upd_time5 < time then
    upd_time5 = time + 120000
	  fly_island.check_code()
	  -- buusty_dialog.xo_repair_finished()
  end
  if upd_time4 == nil then
      upd_time4 = time + 500
  elseif upd_time4 < time then
      upd_time4 = time + 500
      doc_viewer.update()
      amk.oau_watchdog=179
      amk.oau_watchdog=178
--	  lightning.strike_if_needed()
-- Akill begin
	akill.check_actor_health()
	akill.check_actor_outfit()
	akill.check_actor_armor()
-- Akill end
	  
      amk.oau_watchdog=183
	  snp.update()
  end

  amk.oau_watchdog=184
--  bind_det_arts.update()
  
  amk.oau_watchdog=0
  amk.oau_reason=""    
  
-- Вывод информации level_vertex_id, game_vertex_id, pos
if db.debug then
	local hud = get_hud()
	local cs = hud:GetCustomStatic("cs_debug" )
	if cs == nil then
		hud:AddCustomStatic("cs_debug", true)
		cs = hud:GetCustomStatic("cs_debug" )
	end
	local lvid, gvid = db.actor:level_vertex_id(), db.actor:game_vertex_id()
	local pos, dir = db.actor:position(), device().cam_dir -- db.actor:direction()
	local pos2 = level.vertex_position(lvid)
	local vdist = pos2:distance_to(pos)
	local vdistxz = pos2:distance_to_xz(pos)
	local valid = vdist <= 0.7
	local msg = string.format("lvid:  %d", lvid) ..										-- левел вертекс
				string.format(" gvid: %d\\n", gvid) ..									-- гейм вертекс
				string.format("pos:   %.2f,%.2f,%.2f\\n", pos.x, pos.y, pos.z) ..		-- позиция актора
				string.format("vpos:  %.2f,%.2f,%.2f\\n", pos2.x, pos2.y, pos2.z) ..	-- позиция левел вертекса
				string.format("vdist: %.2f, vdistXZ: %.2f\\n", vdist, vdistxz) ..		-- расстояние от гг до вертекса
				string.format("dir:   %.2f,%.2f,%.2f\\n", dir.x, dir.y, dir.z) ..		-- направление взгляда актора
				string.format("valid: %s", tostring(valid))								-- есть ли аи сетка?
	if cs ~= nil then
		cs:wnd():SetText(msg)
	end
end

  self.am:call("on_update", delta)
  if update_was_never_called then
    self.am:call("on_first_update")
    update_was_never_called = false
  end
  event("actor_update"):trigger({delta = delta})

	-- Обновление упаковщика патронов -- должно быть предпоследним на апе актора!
	dunin_ammo.on_update()	
	-- Отложенное удаление патронов -- должно быть последним на апе актора!
	death_manager.release_deferred_ammo()
end

function actor_binder:on_key(key)
	self.am:call("on_key_down", key, dik_to_bind(key))
	event("key_down"):trigger({key = key, bind = dik_to_bind(key)})
end

function actor_binder:on_key_free(key)
	self.am:call("on_key_up", key, dik_to_bind(key))
	event("key_up"):trigger({key = key, bind = dik_to_bind(key)})
end

function actor_binder:on_key_hold(key)
	self.am:call("on_key_hold", key, dik_to_bind(key))
	event("key_hold"):trigger({key = key, bind = dik_to_bind(key)})
end

function actor_binder:on_wheel_rotation(vol)
	self.am:call("on_wheel", vol-100000)
	event("mouse_wheel"):trigger({val = vol-100000})
end

function actor_binder:on_mouse_move(velx, vely)
	self.am:call("on_mouse_move", velx-100000, vely-100000)
	event("mouse_move"):trigger({ x = velx-100000, y = vely-100000})
end

function actor_binder:item_to_belt(obj)
	local sobj = sim:object(obj:id())
	if sobj then
		self.am:call("on_item_to_belt", obj, sobj)
		event("actor_item_to_belt"):trigger({what = obj})
	end
end

function actor_binder:item_to_backpack(obj)
	local sobj = sim:object(obj:id())
	if sobj then -- такое бывает, когда спавним в инвентарь предмет, а потом его тут же удаляем ещё выхода в онлайн
		self.am:call("on_item_to_ruck", obj, sobj)
		event("actor_item_to_ruck"):trigger({what = obj})
	end
end

function actor_binder:item_to_slot(obj)
	local sobj = sim:object(obj:id())
	if sobj then
		self.am:call("on_item_to_slot", obj, sobj)
		event("actor_item_to_slot"):trigger({what = obj})
	end
end

function actor_binder:on_select_item( obj )
  local sobj = sim:object( obj:id() )
  if sobj then
    self.am:call("on_select_item", obj, sobj)
  end
end

function actor_binder:hit_callback(obj, amount, local_direction, who, bone_index)
	self.am:call("on_hit", obj, amount, local_direction, who, bone_index)
	event("actor_hit"):trigger({victim = obj, amount = amount, dir = local_direction, who = who, bone = bone_index})
end

--[=[ светки без проверки стен
----------------------------------------------------------------------------------------------------------------------
function hit_flash_callback(obj, amount, local_direction, who, bone_index)
	--get_console():execute("load ~~~ hit_callback: "..tostring(has_alife_info("grenade_flash_blow")).." "..amount.." "..time_global())
	if has_alife_info("grenade_flash_blow") then
		xr_sound.get_safe_sound_object([[weapons\explo\grenade_flash]]):play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
		level.add_pp_effector("teleport.ppe", 2000, false)
		amk.start_timer("run", 1.5, "bind_grenade.flash_bum1()")
		db.actor:disable_info_portion("grenade_flash_blow")
	end
end
--]=]

----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
  if amk.has_timer("no_save") and not db.debug then
	abort("Сохранение сделано слишком быстро после загрузки. Из-за этого очень вероятно, что созданное сохранение, а также текущее игровое состояние будет повреждено. Поэтому немедленно удалите только что созданное сохранение, затем полностью перезапустите игру.")
		amk.start_timer("zonedocs_gg_kill",3,0)
  end

  -- проваливание заданий, во время которых нельзя сохраняться
  esc_fly.sidor_delo_fail()
  
  -- удаление запущенных варок перед сейвом
  amk.remove_timer("af_transform_universal")
  
  if level.get_game_difficulty() == 0 then
	db.actor:give_info_portion("acv_real_fail")
  end
  
  if not has_alife_info("teleport_started") and utils.level_changing() then
	archievements.acv_count_event("acv_skit", 300, "Скиталец")
  end

  if rx_ai then rx_ai.actor_save(packet) end

  local pk1=fake_net_packet.fake_net_packet()
  self:save_old(pk1)
	
	log1("~~Actor netpacket size "..pk1:w_tell())
	get_console():execute("flush")
	
	if pk1:w_tell() > 7500 then
		task_manager.cleanup_actor()
	end	
	
	if pk1:w_tell() > 7700 then
		task_manager.cleanup_actor()
	end

  pk1=fake_net_packet.fake_net_packet()
  self:save_old(pk1)
  amk.mylog("Packet size is "..pk1:w_tell())
  --news_manager.send_tip(db.actor, "Размер нетпакета ГГ: "..tostring(pk1:w_tell()), nil, nil, 10000)
  if pk1:w_tell()>7500 then
    self.warning=true
    self.critical=1
    self.wt=time_global()+60000
    amk.emergency_cleanup()
    self:save_old(packet)
    amk.mylog("Actor packet size is "..packet:w_tell().."!")
 amk.send_tip("Actor packet size critical=2 >7500 ","Размер нетпакета ГГ критический:"..pk1:w_tell(),0,15,"gen_info")
    amk.emergency_restore()
  elseif pk1:w_tell()>6000 then
-- отключено предупреждение меньше 7500 by Proper70 begin
--    self.warning=true
--   self.wt=time_global()+60000
    self.wt=time_global()
-- отключено предупреждение меньше 7500 by Proper70 end
    self:save_old(packet)
-- amk.send_tip("Actor packet size critical=1 >6000 ","Размер нетпакета ГГ допустимый:"..pk1:w_tell(),0,15,"gen_info")
  else
    self:save_old(packet)
    self.wt=time_global()
-- amk.send_tip("Actor packet size <6000 ","Размер нетпакета ГГ мал. Всё ОК:"..pk1:w_tell(),0,15,"gen_info")
  end
  self.am:call("on_save", packet)
  event("actor_save"):trigger({packet = packet})
  self.am:call("on_save_after_all")
  self.is_saved = true
end


function actor_binder:save_old(packet)
  
	local save_treasure_manager = true
	
	printf("actor_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	--' Сохраняем уровень сложности
	if save_treasure_manager == true then
		packet:w_u8(level.get_game_difficulty() + 128)
	else
		packet:w_u8(level.get_game_difficulty())
	end


	--' Сохраняем данные об отключенном вводе
	if self.st.disable_input_time == nil then
		packet:w_bool(false)
	else
		packet:w_bool(true)
		utils.w_CTime(packet, self.st.disable_input_time)
	end
	amk.oAmkLauncher:SaveData(self.object)

	xr_logic.pstor_save_all(self.object, packet)
	self.weather_manager:save(packet)

	sr_psy_antenna.save( packet )
	
	if save_treasure_manager == true then
		treasure_manager.save(packet)      
	end                                  

	task_manager.save(packet)
	self.actor_detector:save(packet)	
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	printf("actor_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)
	printf("actor_binder:object_binder.load(): self.object:name()='%s'", self.object:name())

	--' Загружаем уровень сложности
	local game_difficulty = reader:r_u8()
	
	local load_treasure_manager = false      
	if game_difficulty >= 128 then           
		game_difficulty = game_difficulty - 128
		load_treasure_manager = true           
	end                                      

	
	get_console():execute("g_game_difficulty "..game_difficulty_by_num[game_difficulty])

	if reader:r_eof() then
		abort("Это сохранение необратимо повреждено - удалите его, и переиграйте с более раннего сохранения. Продолжать игру на этом сохранении категорически запрещено!")
		string.format("%s")
	end

	local stored_input_time = reader:r_u8()
	if stored_input_time == true then
		self.st.disable_input_time = utils.r_CTime(reader)
	end

	xr_logic.pstor_load_all(self.object, reader)
    amk.oAmkLauncher:LoadData(self.object)
    
	self.weather_manager:load(reader)

	sr_psy_antenna.load(reader)
	
	if load_treasure_manager == true then
		treasure_manager.load(reader)      
	end                                  

	
	task_manager.load(reader)
	self.actor_detector:load(reader)
  self.am:call("on_load", reader)
  event("actor_load"):trigger({packet = reader})
  
  if xr_logic.pstor_retrieve(self.object,"emerg",false) then -- нельзя использовать amk.load_varible(), так как db.actor ещё не определён
    self.warning=true
    self.critical=2
    self.wt=time_global()+60000
  end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_use_object(obj)
	archievements.on_use_item(obj)
    fly.start(obj)
	amk_alcohol.drink_vodka(obj)
    buusty_dialog.use_money(obj)
   if obj then
      local id = obj:id()
      local sobj = sim:object(id)
      if sobj then
         self.am:call("on_use", obj, sobj)
         event("actor_use_inventory_item"):trigger({what = obj})
      end
   end
end

function actor_binder:rotting()
	if db.rotting > 0 then
		if not self.rot then
			self.rot = {}
			self.rot.next_sound = time_global()+math.random(4000,6000)
			self.rot.sound_id = 0
			self.rot.prev_sound_id = 0
			self.rot.effactor = 0.1
			level.add_pp_effector("alcohol.ppe", 5436, true)
			level.set_pp_effector_factor(5436, self.rot.effactor)
		end
		
		if self.rot.next_sound < time_global() then
			repeat
				self.rot.sound_id = math.random(1,14)
			until self.rot.sound_id ~= self.rot.prev_sound_id
			
			self.rot.sound = xr_sound.get_safe_sound_object([[rotting\rotting_]]..self.rot.sound_id)
			self.rot.sound:play(self.object, 0, sound_object.s2d)
			self.rot.next_sound = time_global()+self.rot.sound:length()+math.random(4000,6000)
			self.rot.prev_sound_id = self.rot.sound_id
			
			if self.rot.effactor < 1 then
				self.rot.effactor = self.rot.effactor+0.05
				level.set_pp_effector_factor(5436, self.rot.effactor)
			end
		end
	else
		self.rot = nil
		level.remove_pp_effector(5436)
	end
end


function actor_binder:after_save()
  self.am:call( "on_after_save" )
end


--старт префетча звуков
--if string.find(command_line(), "-noprefetch") == nil then
--  sound_prefetch.prefetch_sounds()
--end


-- Weapon functions
function hide_weapon()
  weapon_hide = true
end
function restore_weapon()
  weapon_hide = false
end

function has_traded()
	if db.traded then
		if db.actor:is_talking() then
			db.actor:stop_talk()
		end
		db.traded = nil
	end
end
