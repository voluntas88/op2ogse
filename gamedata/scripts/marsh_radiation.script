-- -*- mode: lua; coding: windows-1251-dos -*-
-- радиация на Болотах в воде, апдейт раз в полсекунды


function attach( sm )
  --sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
end


function on_spawn()
  if level.name() ~= "marsh" or has_alife_info( "no_marsh_radiation" ) then
    return
  end
  dsh.timeout( 500, this.update )
end


local pt
function update()
  local pos = db.actor:position()
  if pos.y < -0.01 then
    if not has_alife_info( "marsh_radiation" ) then
      -- вошел в воду
      db.actor:give_info_portion( "marsh_radiation" )
    end
    -- в воде, апдейтим
    local belt_rs = inventory.on_belt_restore_speed(
      "radiation_restore_speed"
    )
    local dt
    if pt then
      local previous_check_time = game.CTime()
      previous_check_time:set( unpack( pt ) )
      local current_time        = game.get_game_time()
      dt = current_time:diffSec( previous_check_time )
    end
    if belt_rs > 0 then
      belt_rs   = 0
    elseif belt_rs < 0 then
      if dt then
        belt_rs = 0 - belt_rs * dt
      else
        belt_rs = 0
      end
    end
    local delta_radiation = -0.02 * pos.y * math.random( 1, 4 )
    if delta_radiation > 0 then
      db.actor.radiation = delta_radiation + belt_rs
      local belt_ps = inventory.on_belt_restore_speed(
        "power_restore_speed"
      )
      if belt_ps < 0 then
        belt_ps   = 0
      elseif belt_ps > 0 then
        if dt then
          belt_ps = belt_ps * dt
        else
          belt_ps = 0
        end
      end
      local r_health = db.actor.power - delta_radiation * 5 - belt_ps
      if r_health >= 0.05 then
        db.actor.power = r_health
      end
    end
    pt = { game.get_game_time():get() }
  else
    -- вышел из воды
    db.actor:disable_info_portion( "marsh_radiation" )
    pt = nil
  end
  dsh.timeout( 500, this.update )
end
