-- -*- mode: lua; coding: windows-1251-dos -*-
-- Биндер фотоаппарата

-- фото местности с указанных точек
local territory_from_places = {
	[1] = { -- Затон гаусс-установка
		-- точка, которую фотаем: позиция, угол захвата в градусах (точность фото), использовать ли увеличение, территория, поршень о наличии задания, смс об успешном фото
		position={x=-421.85653686523,y=26.832511901855,z=-382.17221069336}, angle=3.0, scope=false, loc="zaton", danger=false, has_info="volna_foto_start", sms="Снимок установки с этого ракурса получен.",
		places = {
			-- места, с которых нужно сфотать точку: позиция, радиус зоны для удачного фото, какой выдать поршень.
			{position={x=-427.55120849609,y=25.158079147339,z=-386.2109375}, radius=5.0, info="volna_foto_gauss1"},
			{position={x=-426.79205322266,y=25.159393310547,z=-378.66714477539}, radius=5.0, info="volna_foto_gauss2"},
			{position={x=-417.63455200195,y=24.198610305786,z=-386.77926635742}, radius=5.0, info="volna_foto_gauss3"},
			{position={x=-417.86773681641,y=24.281158447266,z=-377.49911499023}, radius=5.0, info="volna_foto_gauss4"}
		}
	},
	[2] = { -- Х-18 эмбрион
		position={x=25.546020889282,y=-9.0142399215698,z=-27.526565170288}, angle=3.0, scope=true, loc="l04u_labx18", danger=false, has_info="bar_dolg_petrenko_electra_flash_start", sms="Снимок эмбриона с этого ракурса получен.",
		places = {
			{position={x=22.200523376465,y=-9.6393566131592,z=-26.628593444824}, radius=0.5, info="petrenko_foto_embrion1"},
			{position={x=13.896068572998,y=-8.6110229492188,z=-17.953956604004}, radius=0.5, info="petrenko_foto_embrion2"}
		}
	},
	[3] = { -- ЧАЭС2 Фото Стрелка
		position={x=106.22660064697,y=63.244293212891,z=126.69090270996}, angle=3.0, scope=false, loc="l12_stancia_2", danger=false, has_info="foto_strelok_start", sms="Фотография Саркофага получена.",
		places = {
			{position={x=-26.665603637695,y=0.29913738369942,z=201.48274230957}, radius=20.0, info="foto_strelok_done"}
		}
	}
}

-- Таблица фото монстров. Секция = поршень при удачном фото. Поиск по точному совпадению.
local foto_ohota_monsters = {
	["dog_weak"]				= "foto_ohota_dog_red",
	["dog_normal"]				= "foto_ohota_dog_brown",
	["dog_strong"]				= "foto_ohota_dog_white",
	["dog_skeleton"]			= "foto_ohota_dog_orange",
	["dog_green"]				= "foto_ohota_dog_green",
	["dog_sil_hill"]			= "foto_ohota_dog_shill",
	["dog_zombie"]				= "foto_ohota_dog_doberman",
	["dog_habaruch"]			= "foto_ohota_dog_black",
	["pseudodog_weak"]			= "foto_ohota_psydog_brown",
	["pseudodog_normal"]		= "foto_ohota_psydog_brown",
	["pseudodog_big"]			= "foto_ohota_psydog_grey",
	["pseudodog_strong"]		= "foto_ohota_psydog_grey",
	["flesh_weak"]				= "foto_ohota_flesh",
	["flesh_normal"]			= "foto_ohota_flesh",
	["flesh_strong"]			= "foto_ohota_flesh",
	["flesh_swamp"]				= "foto_ohota_flesh_swamp",
	["zanoza_strong"]			= "foto_ohota_zanoza",
	["boar_weak"]				= "foto_ohota_boar",
	["boar_normal"]				= "foto_ohota_boar",
	["boar_strong"]				= "foto_ohota_boar",
	["boar_kachok"]				= "foto_ohota_boar",
	["spider"]					= "foto_ohota_spider",
	["snork_stronger"]			= "foto_ohota_snork",
	["snork_outdoor"]			= "foto_ohota_snork",
	["snork_indoor"]			= "foto_ohota_snork",
	["aes_snork"]				= "foto_ohota_snork",
	["snork_strong"]			= "foto_ohota_snork",
	["snork_normal"]			= "foto_ohota_snork",
	["snork_weak"]				= "foto_ohota_snork",
	["snork_jumper"]			= "foto_ohota_snork_jumper",
	["vypolzen"]				= "foto_ohota_vypolzen",
	["vypolzen_red"]			= "foto_ohota_vypolzen_red",
	["tushkano_normal"]			= "foto_ohota_tushkan",
	["tushkano_strong"]			= "foto_ohota_tushkan_strong",
	["m_poltergeist_normal_tele"]	= "foto_ohota_polter_tele",
	["m_poltergeist_tele_outdoor"]	= "foto_ohota_polter_tele",
	["m_poltergeist_normal_flame"]	= "foto_ohota_polter_flame",
	["m_poltergeist_strong_flame"]	= "foto_ohota_polter_flame",
	["poltergeist_build"]		= "foto_ohota_polter",
	["m_poltergeist_dd"]		= "foto_ohota_poltergeist_dd",
	["electro_polter"]			= "foto_ohota_electro_polter",
	["polter_xray"]				= "foto_ohota_polter_xray",
	["bloodsucker_mil"]			= "foto_ohota_sucker_albinos",
	["bloodsucker_strong"]		= "foto_ohota_sucker",
	["bloodsucker_normal"]		= "foto_ohota_sucker_normal",
	["bloodsucker_weak"]		= "foto_ohota_sucker",
	["bloodsucker_effector"]	= "foto_ohota_sucker_boloto",
	["bloodsucker_child"]		= "foto_ohota_sucker_hell",
	["bloodsucker_hell"]		= "foto_ohota_sucker_hell",
	["controller_tubeman"]		= "foto_ohota_controler",
	["m_controller_old_fat"]	= "foto_ohota_controler",
	["m_controller_old"]		= "foto_ohota_controler",
	["m_controller_normal_fat"]	= "foto_ohota_controler",
	["m_controller_normal"]		= "foto_ohota_controler",
	["controller_senator"]		= "foto_ohota_controler_senator",
	["controller_babka"]		= "foto_ohota_controler_babka",
	["m_controller_act"]		= "foto_ohota_kontroler_act",
	["controller_flame"]		= "foto_ohota_controler_flame",
	["gigant_virus_strong"]		= "foto_ohota_gigant",
	["gigant_big_strong"]		= "foto_ohota_gigant",
	["gigant_strong"]			= "foto_ohota_gigant",
	["gigant_normal"]			= "foto_ohota_gigant",
	["gigant_weak"]				= "foto_ohota_gigant",
	["gigant_red_strong"]		= "foto_ohota_gigant_red",
	["gigant_super_jumper"]		= "foto_ohota_gigant_jumper",
	["gigant_jumper_normal"]	= "foto_ohota_gigant_jumper",
	["gigant_jumper_strong"]	= "foto_ohota_gigant_jumper",
	["burer_normal"]			= "foto_ohota_burer",
	["burer_weak"]				= "foto_ohota_burer",
	["burer_strong"]			= "foto_ohota_burer_strong",
	["burer_build"]				= "foto_ohota_burer_build",
	["karlito"]					= "foto_ohota_karlito",
	["carlic"]					= "foto_ohota_carlic",
	["carlic_weak"]				= "foto_ohota_carlic",
	["carlic_strong"]			= "foto_ohota_carlic",
	["chimera_weak"]			= "foto_ohota_chimera",
	["chimera_normal"]			= "foto_ohota_chimera_red",
	["electro_chimera"]			= "foto_ohota_chimera_electro",
	["chimera_x_ray"]			= "foto_ohota_chimera_prizrak",
	["new_electro_chimera"]		= "foto_ohota_new_electro",
	["chimera_strong"]			= "foto_ohota_chimera_white",
	["chimera_black"]			= "foto_ohota_chimera_black",
	["fire_chimera"]			= "foto_ohota_fire_chimera",
	["chimera_wolf"]			= "foto_ohota_chimera_wolf",
	["tarakan_strong"]			= "foto_ohota_tarakan",
	["tarakan_normal"]			= "foto_ohota_tarakan",
	["rat_strong"]				= "foto_ohota_rat",
	["rat_normal"]				= "foto_ohota_rat",
	["rat_weak"]				= "foto_ohota_rat",
	["cat_strong"]				= "foto_ohota_cat",
	["cat_normal"]				= "foto_ohota_cat",
	["cat_weak"]				= "foto_ohota_cat",
	["fracture_strong"]			= "foto_ohota_izlom",
	["fracture_normal"]			= "foto_ohota_izlom",
	["fracture_weak"]			= "foto_ohota_izlom",
	["fracture_master"]			= "foto_ohota_izlom_master",
	["fracture_karlik"]			= "foto_ohota_izlom_karlik",
	["bibliotekar"]				= "foto_ohota_biblik",
	["bibliotekar_black"]		= "foto_ohota_biblik_black",
	["deathclaw_strong"]		= "foto_ohota_kogot",
	["deathclaw_normal"]		= "foto_ohota_kogot",
	["deathclaw_weak"]			= "foto_ohota_kogot",
	["rotan"]					= "foto_ohota_rotan",
	["oboroten"]				= "foto_ohota_oboroten",
	["new_hell"]				= "foto_ohota_new_hell"
}

-- Таблица фото уникальных монстров. Секция, есть ли поршень выдачи задания, поршень при удачном фото.
local foto_unique_monster = {
	["white_wolf"]		= {has_info="ohota_wolf_start", info = "foto_ohota_white_wolf"},
	["kontrik_electro1"]	= {has_info="kontrik_electro_start", info = "foto_ohota_kontrik_electro"},
	["kontrik_electro2"]	= {has_info="kontrik_electro_start", info = "foto_ohota_kontrik_electro"},
	["kontrik_electro3"]	= {has_info="kontrik_electro_start", info = "foto_ohota_kontrik_electro"},
}

-- Таблица фото аномалий. Секция - поршень при удачном фото. Поиск по вхождению.
local foto_ohota_anomaly = {
	["_zharka"]			= "foto_anomaly_zharka",
	["_galant"]			= "foto_anomaly_electra",
	["_buzz"]			= "foto_anomaly_holodec",
	["_fountain"]		= "foto_anomaly_fontan",
	["_mincer"]			= "foto_anomaly_karusel",
	["_mosquito_bald"]	= "foto_anomaly_tramplin",
	["_gravi_zone"]		= "foto_anomaly_voronka",
	["_ice"]			= "foto_anomaly_snow",
	["_sphere"]			= "foto_anomaly_puzyr",
	["_zavesa"]			= "foto_anomaly_tornado",
	["_smallrain"]		= "foto_anomaly_tuman",
	["_sakbuzz_average"] = "foto_anomaly_oblako"
}

-- Тихая охота монстров. Поиск по классу.
local silent_hunt_monsters = {
	[clsid.boar_s] 			= "boar_s",
	[clsid.bloodsucker_s] 	= "bloodsucker_s",
	[clsid.dog_s] 			= "dog_s",
	[clsid.flesh_s] 		= "flesh_s",
	[clsid.pseudodog_s] 	= "pseudodog_s",
	[clsid.burer_s] 		= "burer_s",
	[clsid.cat_s] 			= "cat_s",
	[clsid.chimera_s] 		= "chimera_s",
	[clsid.controller_s] 	= "controller_s",
	[clsid.fracture_s]	 	= "fracture_s",
	[clsid.gigant_s] 		= "gigant_s",
	[clsid.tushkano_s] 		= "tushkano_s",
	[clsid.snork_s]			= "snork_s"
}


function attach( sm )
  sm:subscribe({ signal = "on_actor_fire", fun = this.on_actor_fire })
end


function on_actor_fire( cur_wpn )
  local wpn = cur_wpn.wpn
  if wpn:section() ~= "wpn_fot" then return end
  -- вызываем поочередно проверки. останавливаем при первой удачной
  if
    check_creatures()
    or check_anomaly()
    or check_territory_from_places()
  then
  end
end


-- фото местности с указанных точек
function check_territory_from_places()
	local a, b
	
	for i=1,#territory_from_places do
		a = territory_from_places[i]
		
		if has_alife_info(a.has_info) and obj_in_shot(vector():set(a.position.x,a.position.y,a.position.z), 0, 1000, a.angle, a.scope, a.loc, a.danger) then
			--get_console():execute("load ~~~ Попали в цель")
			-- задание активно и попали в цель, проверяем ракурс
			for j=1,#territory_from_places[i].places do
				b = territory_from_places[i].places[j]

				if not has_alife_info(b.info) and db.actor:position():distance_to(vector():set(b.position.x,b.position.y,b.position.z)) < b.radius then
					-- этого снимка еще не было и ракурс правильный - засчитываем фото.
					news_manager.send_tip(db.actor, a.sms, nil, nil, 10000)
					db.actor:give_info_portion(b.info)
					return true
				end
			end
		end
	end
	
	return false
end


-- фото монстров и неписей
function check_creatures()
  ray_pick.init(
    device().cam_pos, device().cam_dir, 10, rq_target.rqtBoth, db.actor
  )
  local res = ray_pick.check()
  if not res then return false end
  local dist = ray_pick.get_dist()
  local obj  = ray_pick.get_obj()
  if not obj then return false end

  local section = obj:section()
  -- монстры
  if
    IsMonster( obj )
    and not protected_items.is_monster_friend( section )
  then
    local clsid = obj:clsid()

    -- сначала смотрим тихую охоту
    if
      (
        has_alife_info( "silent_hunt_start" )
        and not has_alife_info( "silent_hunt_done")
      )
      and (
        silent_hunt_monsters[ clsid ]
        and not has_alife_info( "monster_stealth_" .. silent_hunt_monsters[ clsid ] )
      )
      and obj_in_shot(
        obj:bone_position( "bip01_head" ), 0, 10, 3.5, true, nil, false
      )
    then
      -- удачный снимок и такого еще не было
      news_manager.send_tip(
        db.actor,
        "%c[255,160,160,160]" .. "МЕЧЕНЫЙ:" .. "\\n"
        .. "%c[255,255,128,128]Захар, я подкрался к очередному монстру и успешно его сфотографировал."
        .. "" .. "\n", nil, nil, 15000
      )
      news_manager.send_tip(
        db.actor,
        "%c[255,160,160,160]" .. "ЗАХАР:" .. "\\n"
        .. "%c[255,255,128,128]Отлично. Неси фото и ищи следующего." .. "\n",
        15, nil, 15000
      )
      db.actor:give_info_portion(
        "monster_stealth_" .. silent_hunt_monsters[ clsid ]
      )
      return true
				
    -- затем фото уникальных монстров
    elseif 
      foto_unique_monster[ section ]
      and has_alife_info( foto_unique_monster[ section ].has_info )
      and not has_alife_info( foto_unique_monster[ section ].info )
      and ( dist >= 0 and dist <= 10 )
    then
      -- удачный снимок и такого еще не было
      news_manager.send_tip(
        db.actor,
        "Уникальный монстр сфотографирован." .. "\n", nil, nil, 10000
      )
      db.actor:give_info_portion( foto_unique_monster[ section ].info )
      return true

    -- затем обычную охоту
    elseif
      (
        has_alife_info( "foto_ohota_start" )
        and not has_alife_info( "foto_ohota_done")
      )
      and foto_ohota_monsters[ section ]
      and not has_alife_info( foto_ohota_monsters[ section ] )
      and ( dist >= 0 and dist <= 10 )
    then
      -- удачный снимок и такого еще не было
      news_manager.send_tip(
        db.actor, "Монстр сфотографирован." .. "\n", nil, nil, 10000
      )
      db.actor:give_info_portion( foto_ohota_monsters[ section ] )
      return true
    end
  end
	
  return false
end


-- фото аномалий
function check_anomaly()
  if
    not has_alife_info( "foto_ohota_start" ) or
    has_alife_info( "foto_anomaly_done" )
  then
    return false
  end

  local anoms = amk_anoms.get_anomaly_list( db.actor, 10 )
  for anom_sect, info in pairs( foto_ohota_anomaly ) do
    if not has_alife_info( info ) then
      -- такого снимка еще не было, смотрим аномалии
      for _, anom in ipairs( anoms ) do
        -- внутри это: {id=id,name=obj:name(),pos=o.pos,radius=o.radius}
        if
          string.find( anom.name, anom_sect )
          and obj_in_shot( anom.pos, 5, 10, 7.0, false, nil, false )
        then
          -- удачный снимок
          news_manager.send_tip(
            db.actor, "Аномалия сфотографирована." .. "\n", nil, nil, 10000
          )
          db.actor:give_info_portion( info )
          return true
        end
      end
    end
  end
	
  return false
end


--[[Проверка попадания объекта в кадр. Параметры:
trg_pos - вектор, позиция цели, объект или точка пространства
min_dist - минимальная дистанция до объекта, чтобы фото считалось удачным
max_dist - максимальная дистанция до объекта, чтобы фото считалось удачным
max_angle - максимальный угол отклонения позиции цели от направления взгляда на max_dist, в градусах, чтобы фото считалось удачным
use_scope - использовать ли прицел при съемке
trg_loc - если задано - только на данной территории. Обязано быть одним из значений, возвращаемых функцией level.name()
actor_danger - проверять ли данжер ГГ. Если true, то фото засчитывается только если ГГ не видят враги
Если не задано - объект может быть на любой территории]]
function obj_in_shot(trg_pos, min_dist, max_dist, max_angle, use_scope, trg_loc, actor_danger)

	-- территория цели задана, но загружена другая или неправильно использован прицел, или неправильный данжер - ничего не делаем
  if
    ( trg_loc and trg_loc ~= level.name() ) or
    (     use_scope and not bind_stalker.scopeUsed ) or
    ( not use_scope and     bind_stalker.scopeUsed
      and get_console():get_bool( "hud_crosshair" ) )
  then
    return false
  end

	local act_pos = device().cam_pos
	local dist = act_pos:distance_to(trg_pos)
	if (dist >= min_dist) and (dist <= max_dist) then
		-- дистанция подходящая
		local trg_dir = vector():sub(trg_pos,act_pos):normalize()
		local angle_cos = device().cam_dir:dotproduct(trg_dir)

		-- эффективный угол в пересчете на дистанцию в радианах
		local disp = math.sin(math.rad(max_angle))*max_dist -- дисперсия
		if disp > dist/2 then -- но не больше 30 градусов
			disp = dist/2
		end

		local eff_angle = math.asin(disp/dist)
		--get_console():execute("load ~~~ disp: "..disp..", dist: "..dist..", angle_cos: "..angle_cos..", eff_angle cos: "..math.cos(eff_angle))
		if angle_cos >= math.cos(eff_angle) then
			return true
		end
	end

    return false
end
