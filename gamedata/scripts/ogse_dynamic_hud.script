-- -*- mode: lua; coding: windows-1251-dos -*-
--------------------------------------------------------------------------------
-- Dynamic HUD from ABC Inferno and AMK by Rulix 
-- Исправлено и доработано для OGSE by OGSE Team 2009-2013
--------------------------------------------------------------------------------

function attach(sm)
  sm:subscribe({ signal = "on_destroy",  fun = this.on_destroy     })
  sm:subscribe({ signal = "on_helmet_on_off_done", fun = this.on_helmet_on_off_done })
  sm:subscribe({ signal = "on_hit",      fun = this.on_hit         })
  sm:subscribe({ signal = "on_key_down", fun = this.chek_keys      })
  sm:subscribe({ signal = "on_key_up",   fun = this.chek_keys_free })
  sm:subscribe({ signal = "on_spawn",    fun = this.on_spawn       })
  sm:subscribe({ signal = "on_update",   fun = this.on_update      })
end
auto_attach = true


-- чтобы отключить эффект, поставьте вместо единицы ноль:
local blurs_enable = monnoroch_options.blurs_enable
local blood_enable = monnoroch_options.blood_enable
local bleed_enable = monnoroch_options.bleed_enable

local blood_intensity  = 0
local mycurrent_suithud
local need_sniper_chek = false
local sniper_mode      = false
local suit_condition
local suithud, suithud_enable = true, false
local wotsuittype      = ""

local sm = ogse_signals.get_mgr()


function on_spawn()
  local have_helmet = ogse.load_var(
    script_name() .. ".helmet_on_off.status", true
  )
  if have_helmet then
   -- suithud, suithud_enable = true,  false
	suithud, suithud_enable = false,  false
  else
    suithud, suithud_enable = false, false
  end
end


function on_destroy()
  switch_shader_effects( "off" )
end


local show_time_t
function on_update()
  -- Обновление шкалы радиации и худа при использовании бинокля/прицела
  check_sniper()
  update_hud_elements()
  -- Обновление шкалы радиации и худа при использовании бинокля/прицела
  -- Динамический худ
  doabcevents()
  -- Динамический худ
  if ( not show_time_t ) or show_time_t <= time_global() then
    sak.show_time()
    show_time_t = time_global() + 1000
  end
end


-- Убирание худа при использовании оптического прицела или бинокля
function check_sniper()
  if
    db.actor and db.actor:alive()
    and ( need_sniper_chek == true or sniper_mode == true )
  then
    if zoom_mode() == 1 then
      local wpn = db.actor:active_item()
      if wpn and wpn:is_weapon() then
        local scope_status = ogse_wpn_utils.get_scope_status( wpn )
        local scope_flag = scope_status == 1
          or (
            scope_status == 2 and ogse_wpn_utils.get_scope_flag( wpn )
          )
        if scope_flag then
          local gl_status = 0
          if wpn:is_weapon_gl() then
            gl_status = ogse_wpn_utils.get_grenade_launcher_status( wpn )
          end
          local gl_flag = gl_status == 1
            or (
              gl_status == 2 and ogse_wpn_utils.get_grenade_launcher_flag( wpn )
            )
          if
            ( not gl_flag )
            or ( not ogse_wpn_utils.get_gl_mode( wpn ) )
          then
            local binder = wpn:binded_object()
            if
              ( not binder )
              or ( not binder[ "dsh_switch_scope.use_iron_scope" ] )
            then
              sniper_mode = true
              bind_stalker.scopeUsed = true
              return
            end
          end
        end
      end
    end
  end
  sniper_mode = false
  bind_stalker.scopeUsed = false
end


-- Обновление динамических элементов худа
local on_sniper_mode = false
function update_hud_elements()
  if db.actor and db.actor:alive() then
    if sniper_mode == true then
      if suithud_enable then
        suithud_enable = false
        set_my_suit_hud()
      end
      biodetector.update( "off" )
      ui_rad.update( false )
      if not on_sniper_mode then
        sak.show_time()
        if not wpn_IsRotatingToZoom( db.actor:active_item() ) then
          ogse_night_vision.on_sniper_mode( true )
          on_sniper_mode = true
        end
      end
    else
      if suithud and not suithud_enable then
        suithud_enable = true
        check_my_suit_hud()
      end
      biodetector.update()
      ui_rad.update( true )
      if on_sniper_mode then
        ogse_night_vision.on_sniper_mode( false )
        sak.show_time()
        on_sniper_mode = false
      end
    end
  else
    if suithud_enable then
      suithud_enable = false
      set_my_suit_hud()
    end
    biodetector.update( "off" )
    if amk.load_variable( "option_rad", 1 ) > 0 then
      ui_rad.update( false )
    end
  end
end


local freemem  = 0
local freemem2 = 0

function doabcevents()
  if not db.actor then return end
  local chkfreetime = time_global()
  if freemem == 0 then freemem = time_global() + 1000 end
  if chkfreetime > freemem then
    freemem = 0
    check_my_suit_hud()
--    bleed_condition()
  end
  local chkfreetime2 = time_global()
  if freemem2 == 0 then freemem2 = time_global() + 40 end
  if chkfreetime2 > freemem2 then
    freemem2 = 0
    init_blurs()
  end
end


local last_shader_mode = "off"
function switch_shader_effects( mode )
  if mode ~= last_shader_mode then
    cmd( "r2_rain_drops_control " .. mode )
    cmd( "r2_lens_dirt_control "  .. mode )
    last_shader_mode = mode
  end
end

-- Проверка нажатия клавиш
function chek_keys( key, bind )
  if sniper_mode or level.main_input_receiver() then return end
  if bind == key_bindings.kWPN_ZOOM then
    need_sniper_chek = true
  elseif key == dsh.get_kbd_key( "helmet_on_off" ) then
    helmet_on_off()
  end
end


-- Проверка отпускания клавиш
function chek_keys_free( key, bind )
  if bind == key_bindings.kWPN_ZOOM then
    need_sniper_chek = false
  end
end


local smoktime = 0
function check_my_suit_hud()
  if not suithud_enable then return end
  local gsmktime = time_global()
  if smoktime == 0 then smoktime = time_global() + 4000 end
  if db.actor then
    local csuithud = db.actor:get_current_outfit()
    local suithudtype, isitbino, suithudname
    if csuithud then suithudname = csuithud:section() end
    local dynamic_hud_enable = false
    if suithudname then
      suit_condition = ""
      if     csuithud:condition() > 0.9 then
        suit_condition = "blue"
      elseif csuithud:condition() > 0.69 then
        suit_condition = "green"
      elseif csuithud:condition() > 0.60 then
        suit_condition = "yellow"
      elseif csuithud:condition() > 0.40 then
        suit_condition = "red"
      elseif csuithud:condition() > 0.25 then
        suit_condition = "red2"
      else
        suit_condition = "red3"
      end
      dynamic_hud_enable = get_bool( suithudname, "dynamic_hud_enable", false )
      if dynamic_hud_enable then
        wotsuittype      = get_string( suithudname, "dynamic_hud_type" )
        local hud_prefix = get_string(
          suithudname, "dynamic_hud_prefix", wotsuittype
        )
        if hud_prefix then
          suithudtype = hud_prefix .. "_" .. suit_condition
        end
      end
    else
      suithudtype = nil
      wotsuittype = nil
    end
    if not db.actor:alive() then suithudtype = nil end
    set_my_suit_hud( dynamic_hud_enable, suithudtype )
  end
end


local suitfirstrun = true
local is_helmet_on = false
local hidden_hud

function set_my_suit_hud( dynamic_hud_enable, hudtype )
  if not hudtype and not dynamic_hud_enable then
    if is_helmet_on and not sniper_mode then
      sm:call( "on_actor_before_helmet_off" )
    end
    local wchud = get_hud():GetCustomStatic( mycurrent_suithud )
    if wchud then get_hud():RemoveCustomStatic( mycurrent_suithud ) end
    suitfirstrun = true
    switch_shader_effects( "off" )
    if sniper_mode then
      hidden_hud = mycurrent_suithud
    end
    mycurrent_suithud = nil
    if is_helmet_on and not sniper_mode then
      is_helmet_on = false
      sm:call( "on_actor_helmet_off" )
    end
    return
  end
  local call_helmet = false
  if hudtype ~= mycurrent_suithud then
    if mycurrent_suithud then
      get_hud():RemoveCustomStatic( mycurrent_suithud )
    end
    if hudtype then
      get_hud():AddCustomStatic( hudtype )
      sak.show_time( true )
      sm:call( "on_hud_show" )
      biodetector.update( "off" )
      if string.find( hudtype, wotsuittype ) then
        if
          ( not suitfirstrun )
          and suit_condition ~= "green"
          and suit_condition ~= "blue"
        then
          local snd_obj = sound_object( "material\\glass\\glass_fall03hl" )
          if snd_obj then
            snd_obj:play_no_feedback(
              db.actor, sound_object.s2d, 0, vector(), 9.0
            )
          end
        end
        if suitfirstrun then
          suitfirstrun = false
        end
      end
    end
    if not hidden_hud then
      call_helmet = true
    end
  end
  switch_shader_effects( "on" )
  mycurrent_suithud = hudtype
  hidden_hud        = nil
  is_helmet_on      = true
  if call_helmet then
    call_helmet = false
    sm:call( "on_actor_helmet_on" )
  end
end


function get_current_helmet()
  if is_helmet_on then
    if sniper_mode then
      return ( hidden_hud        or "" ), wotsuittype
    else
      return ( mycurrent_suithud or "" ), wotsuittype
    end
  end
  return false
end


local isactcondset = false
local radeffect    = false
function bleed_condition()
  if bleed_enable == 0 then return end
  if db.actor.health < 0.31 and not isactcondset then
    level.add_pp_effector( "alcohol.ppe", 2012, true )
    isactcondset = true
  end
  if db.actor.health > 0.30 and isactcondset then
    level.remove_pp_effector( 2012 )
    isactcondset = false
  end
  if db.actor.radiation > 0.3 and not radeffect then
    level.add_pp_effector( "alcohol.ppe", 2013, true )
    radeffect = true
  end
  if db.actor.radiation == 0 and radeffect then
    level.remove_pp_effector( 2013 )
    radeffect = false
  end
end


function init_blurs()
  if blurs_enable == 0 then return end
  if amk.load_variable( "option_hud", 2 ) < 2 then return end
  if
    mycurrent_suithud
    and ( not string.find( mycurrent_suithud, "_red3"    ) )
    and ( not string.find( mycurrent_suithud, "hud_sci_" ) )
  then
    local zoom = 67.5 / device().fov
    zoom =( zoom - 1 ) * 1.5 + 1
    if zoom < 1.001 then
      zoom = 1.001
    end
    local stretchy = 0.75 / ( math.floor( device().aspect_ratio * 1000 ) / 1000 )
    if stretchy < 1 then stretchy = 1 end
    local rect = {
      x = -768 * zoom + 768,
      y = ( -512 * zoom + 512 ) * stretchy - ( stretchy - 1 ) * 300,
      w = 1024 * zoom,
      h = 768 * zoom * stretchy,
    }
    set_blurs( true, rect )
  else
    set_blurs( false )
  end
end


local blurs
local blurval       = 0 -- уровень запотевания от 0 до 1
local blurlt        = 0 -- время последнего обновления
local blurcyctime   = 0 -- время начала последнего цикла дыхания (выдох)
local blurlastphase = 0

function set_blurs( enabled, rect )
  if ( not blurs ) or ( not get_hud():GetCustomStatic( "hud_blur1" ) ) then
    blurs = {}
    for i = 1, 4 do
      get_hud():AddCustomStatic( "hud_blur" .. i )
      blurs[ i ] = get_hud():GetCustomStatic( "hud_blur" .. i ):wnd()
      blurs[ i ]:SetWidth( 0 )
      sm:call( "on_hud_show" )
    end
  end
  if not enabled then
    for i = 1, 4 do
      blurs[ i ]:SetWidth( 0 )
    end
    return
  end
  -- Циклы в зависимости от силы дыхания: 0->1->0 0->1->2->4->5->0 0->1->2->3->4->5->0 5->4->3->4->5 4->3->4
  local power  = db.actor.power
  -- текущая частота дыхания от 30 до 120 циклов в минуту
  local period = 1.0 + power * power * 1.0
  local expirt = 0.3
  local breathpower = 3
  local delta  = ( time_global() - blurlt     ) / 1000 -- дельта в секундах
  local phase  = ( time_global() -blurcyctime ) / 1000 -- фаза дыхательного цикла в сек.
  blurlt = time_global()
  if phase > period then
    phase = phase % period
    blurcyctime = blurlt - phase * 1000
  end
  if blurlastphase > phase then
    blurlastphase = 0
  end
  local blurdelta = delta * -0.7 -- работа вентиляции
  if blurlastphase < expirt and phase < expirt then
    blurdelta = blurdelta + ( phase - blurlastphase ) * breathpower
  elseif blurlastphase < expirt then
    blurdelta = blurdelta + ( expirt - blurlastphase ) * breathpower
  end
  blurlastphase = phase
  blurval       = blurval + blurdelta
  if blurval > 0.999 then
    blurval = 0.999
  elseif blurval < 0 then
    blurval = 0
  end
  local tm  = math.floor( blurval * 3 )
  local tmn = tm + 1
  local v   = 1 - ( blurval * 3 - math.floor( blurval * 3 ) )
  local v1  = 1 - v
  if tm ~= 0 then
    blurs[ tm ]:SetColor( GetARGB( v * 255, 255, 255, 255 ) )
  end
  if tmn ~= 0 then
    blurs[ tmn ]:SetColor( GetARGB( v1 * 255, 255, 255, 255 ) )
  end
  for i = 1, 4 do
    if i == tm or i == tmn then
      blurs[ i ]:SetWndRect( Frect():set( rect.x, rect.y, rect.w, rect.h ) )
    else
      blurs[ i ]:SetWndRect( Frect():set( rect.x, rect.y, 0, 0 ) )
    end
  end
end


function is_sniper_mode()
  return sniper_mode
end


local active_pnv, active_torch
function helmet_on_off()
  if suithud then
    suithud, suithud_enable = false, false
    ogse.save_var( script_name() .. ".helmet_on_off.status", false, "bool" )
  else
    suithud, suithud_enable = true, false
    ogse.save_var( script_name() .. ".helmet_on_off.status", true,  "bool" )
    dsh_hud_fx.force_on_helmet()
  end
  biodetector.update( "off" )
  biodetector.switch_hide( true )
  active_pnv = ogse_night_vision.get_active_nv_device()
  if active_pnv then
    ogse_night_vision.turn_off_nv_fx()
  end
  local torch = db.actor:item_in_slot( 9 )
  if torch and torch:is_torch() and torch:is_torch_enabled() then
    active_torch = torch
    torch:switch_torch( false )
  end
  set_my_suit_hud()
end


function on_helmet_on_off_done( mode )
  if active_torch then
    active_torch:switch_torch( true )
    active_torch = nil
  end
  if active_pnv then
    ogse_night_vision.turn_on_nv_fx(
      get_string( active_pnv:section(), "nightvision_sect" )
    )
    active_pnv = nil
  end
  biodetector.switch_hide( false )
end


function on_hit( obj, amount, dir, who, bone_index )

end
