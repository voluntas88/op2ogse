-- -*- mode: lua; coding: windows-1251-dos -*-
-------------------------------------------------------------------------------
--| ogse_relations.script                                                   |--
--| Скриптовая обвязка для очистки отношений                                |--
--| K.D., OGS Evolution Team, 2015                                          |--
--| Ревизия: 14/03/2015                                                     |--
-------------------------------------------------------------------------------

function attach(sm) -- для менеджера сигналов
  sm:subscribe({ signal = "on_goodwill_change", fun = this.on_goodwill_change })
  sm:subscribe({ signal = "on_load", fun = this.load })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
  sm:subscribe({ signal = "on_release_npc", fun = this.on_release })
  sm:subscribe({ signal = "on_save", fun = this.save })
end


local relation_seen  = {}
local relation_table = {}

function on_goodwill_change( from, to )
  if to == 0 then return end
  if not relation_seen[ to ] then relation_seen[ to ] = {} end
  if relation_seen[ to ][ from ] then
--    log1(
--      "[RELATIONS] REPEATED GOODWILL CHANGED FROM "
--        .. alife():object( from ):name() .. " TO " .. alife():object( to ):name()
--    )
  else
    if not relation_table[ to ] then
      relation_table[ to ] = {}
    end
    table.insert( relation_table[ to ], from )
    relation_seen[ to ][ from ] = true
--    log1(
--      "[RELATIONS] GOODWILL CHANGED FROM "
--        .. alife():object( from ):name() .. " TO " .. alife():object( to ):name()
--    )
  end
end


function on_release( npc_id )
  if not db.actor then return end
  if npc_id == 0 then return end
--  log2( "[RELATIONS] NPC %s RELEASED", tostring( npc_id ) )
  if relation_table[ npc_id ] then
    clear_personal_records( npc_id )
  end
end


function clear_personal_records( npc_id )
  local from_table = relation_table[ npc_id ]
  for _, id in ipairs( from_table ) do
    db.actor:clear_personal_record( id, npc_id )
--    local sobj = alife():object( id )
--    if sobj then
--      log1(
--        "[RELATIONS] RELATION RECORD CLEARED FOR OBJECT " .. sobj:name()
--      )
--    else
--      log1(
--        "[RELATIONS] RELATION RECORD CLEARED FOR OBJECT WITH ID " .. id
--      )
--    end
  end
  relation_seen[ npc_id ] = nil
  relation_table[ npc_id ] = nil
end


function save()
  local pk = net_packet()
  pk:w_begin( 123 ) -- двухбайтовая заглушка
  pk:r_seek( 2 )    -- чтобы пропустить эти два байта при чтении
  local rel_table_size = 0
  for k, v in pairs( relation_table ) do
    rel_table_size = rel_table_size + 1
  end
  pk:w_u16( rel_table_size )
--  log1( "[RELATIONS] RELATION TABLE SIZE IS " .. tostring( rel_table_size ) )
  for k, v in pairs( relation_table ) do
    local table_size = table.getn( v )
--    log1(
--      "[RELATIONS] SAVING RELATION TABLE RECORD "
--        .. tostring( k ) .. " WITH SIZE " .. tostring( table_size )
--    )
    if k == "actor" then
      pk:w_u16( 0 )
    else
      pk:w_u16( k )
    end
    pk:w_u16( table_size )
    for _, id in ipairs( v ) do
      pk:w_u16( id )
--      log1(
--        "[RELATIONS] SAVING RELATION TO "
--          .. tostring( k ) .. " FROM " .. tostring( id )
--      )
    end
  end
--  log1(
--    "[RELATIONS] RELATION TABLE SAVED! Packet length = "
--      .. tostring( pk:w_tell() )
--  )
  ogse.save_var( "dsh_ogse_relations", pk, "chunk" )
end


function load()
  local pk = ogse.load_var_safe( "dsh_ogse_relations" )
  if pk then
    local table_size = pk:r_u16()
--    log1( "[RELATIONS] RELATION TABLE SIZE IS ".. tostring( table_size ) )
    for i = 1, table_size do
      local to_id   = pk:r_u16()
      local to_size = pk:r_u16()
--      log1(
--        "[RELATIONS] LOADING RELATION TABLE RECORD "
--          .. tostring( to_id ) .. " WITH SIZE " .. tostring( to_size )
--      )
      if to_id == 0 then
        to_id = "actor"
      end
      relation_seen[ to_id ] = {}
      relation_table[ to_id ] = {}
      for j = 1, to_size do
        local curr_id = pk:r_u16()
        ASSERT(
          ( not relation_seen[ to_id ][ curr_id ] ),
          "[RELATIONS] FOUND SECOND RECORD TO %s FROM %s",
          tostring( to_id ), tostring( curr_id )
        )
        table.insert( relation_table[ to_id ], curr_id )
        relation_seen[ to_id ][ curr_id ] = true
--        log1(
--          "[RELATIONS] LOADING RELATION TO "
--            .. tostring( to_id ) .. " FROM " .. tostring( curr_id )
--        )
      end
    end
--    log1( "[RELATIONS] RELATION TABLE LOADED!" )
  end
end


local attitude_neutal_threshold = get_float(
  "game_relations", "attitude_neutal_threshold"
)
local fix_rel_exceptions = {
  [ "crazy_doctor_npc"  ] = true, -- сумасшедший доктор в X-16
  [ "mil_dolg"          ] = true, -- группа Черепа
  [ "val_bandit_krisyk" ] = true, -- Крысюк
  -- Гавр и телохранители
  [ "mil_trader_gavr"     ] = true,
  [ "mil_gavr_bodyguard1" ] = true,
  [ "mil_gavr_bodyguard2" ] = true,
}

function on_npc_spawn( npc, binder )
  local sobj = alife():object( npc:id() )
  if not sobj then return end
  if
    fix_rel_exceptions[ npc:name() ]
    or fix_rel_exceptions[ npc:profile_name() ]
  then
    return
  end
  local strn_name = dsh_switch_distances.get_smart_terrain_name( sobj )
  if strn_name and fix_rel_exceptions[ strn_name ] then return end
  local p_gw = npc:goodwill( db.actor )
  if p_gw < attitude_neutal_threshold then
    local comm = npc:character_community()
    local c_gw = relation_registry.community_goodwill( comm, db.actor:id() )
    if
      c_gw >= attitude_neutal_threshold
      and (
        ( not relation_seen[ npc:id() ] )
        or ( not relation_seen[ npc:id() ][ db.actor:id() ] )
      )
    then
      npc:set_goodwill( attitude_neutal_threshold, db.actor )
    end
  end
end
