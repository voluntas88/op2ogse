-- -*- mode: lua; coding: windows-1251-dos -*-
-- file:		UI_MM_OPT_MAIN.script
-- created:		01.07.2005
-- description:	options dialog
-- author:		Serge Vynnychenko
--

-- Эти опции будут использоваться всегда, независимо от настроек пользователя.
local force_options = {
  [ "no_offline_battles" ] = true,
}


local options_cache = {}

class "options_dialog" (CUIScriptWnd)

function options_dialog:__init() super()
   self:SetFont(GetFontMedium()) --set base font for dialog.

	self.m_preconditions	= {}
	
    self:InitControls()
    self:InitCallBacks()
end

function options_dialog:__finalize()

end

hint_name = nil
hint_caption = nil
current_view = nil

function options_dialog:InitControls()	
	self:Init(0,0,1024,768)
	self:Enable(true)
	
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_opt.xml")
	

	--xml:InitStatic("back_video", self)
	xml:InitStatic("background", self)
	--xml:InitStatic("rug_video", self)
	self.dialog = xml:InitStatic("main_dialog:dialog", self)
	
	self.hint		= xml:InitFrame				("frame_hint", self)
	hint_name		= xml:InitStatic			("hint_name", self)
	hint_caption	= xml:InitStatic			("hint_caption", self)	
	current_view 	= 1
	
	xml:InitStatic("main_dialog:cap_options", self.dialog)
		
	self.dlg_video = ui_mm_opt_video.opt_video()
	self.dlg_video:InitControls(55,74, xml, self)
	self.dialog:AttachChild(self.dlg_video)

	self.dlg_sound = ui_mm_opt_sound.opt_sound()
	self.dlg_sound:InitControls(55,74, xml, self)
	self.dlg_sound:Show(false)
	self.dialog:AttachChild(self.dlg_sound)
	
	self.dlg_gameplay = ui_mm_opt_gameplay.opt_gameplay()
	self.dlg_gameplay:InitControls(55,74, xml, self)
	self.dlg_gameplay:Show(false)
	self.dialog:AttachChild(self.dlg_gameplay)
	
	self.dlg_controls = ui_mm_opt_controls.opt_controls()
	self.dlg_controls:InitControls(55,74, xml, self)
	self.dlg_controls:Show(false)
	self.dialog:AttachChild(self.dlg_controls)

	self.dlg_video_adv = ui_mm_opt_video_adv.opt_video_adv()
	self.dlg_video_adv:InitControls(55,74, xml, self)
	self.dlg_video_adv:Show(false)
	self.dialog:AttachChild(self.dlg_video_adv)

	local btn
	btn = xml:Init3tButton("main_dialog:btn_accept", self.dialog)
	self:Register(btn, "btn_accept")
	btn = xml:Init3tButton("main_dialog:btn_cancel", self.dialog)
	self:Register(btn, "btn_cancel")
	
	self.tab = xml:InitTab("main_dialog:tab", self.dialog)
	self:Register(self.tab, "tab")
	
	
	self.message_box = CUIMessageBoxEx()
	
	self.b_r2_restart_shown		= false
	
	self.cap_download				= xml:InitStatic		("download_static",self)
	self.text_download				= xml:InitStatic		("download_text",self)
	self.download_progress			= xml:InitProgressBar	("progress_download", self)
	self.btn_cancel_download		= xml:Init3tButton		("btn_cancel_download", self)
	self:Register					(self.btn_cancel_download, "btn_cancel_download")
end

function options_dialog:UpdateControls()
	local opt = COptionsManager()

	opt:SetCurrentValues("mm_opt_video_preset")
	opt:SaveBackupValues("mm_opt_video_preset")

	opt:SetCurrentValues("mm_opt_video")
	opt:SaveBackupValues("mm_opt_video")
	
	opt:SetCurrentValues("mm_opt_video_adv")
	opt:SaveBackupValues("mm_opt_video_adv")

	opt:SetCurrentValues("mm_opt_gameplay")
	opt:SaveBackupValues("mm_opt_gameplay")

	opt:SetCurrentValues("mm_opt_sound")
	opt:SaveBackupValues("mm_opt_sound")

	opt:SetCurrentValues("mm_opt_controls")

	opt:SetCurrentValues("key_binding")

	if not xrRender_test_r2_hw() then
		--self.combo_r2:SetCurrentID		(0)
		--self.combo_r2:Enable			(false)
	end

	self:UpdateDependControls()
	self:GameSetupMenuLoad()
	self:OnDifficultyChanged()
end

function options_dialog:UpdateDependControls()
	
	local _current_id	= 2 --self.combo_r2:CurrentID()

	for i,j in pairs(self.m_preconditions) do
		j				(i, _current_id)
	end
end

function options_dialog:InitCallBacks()
	self:AddCallback("tab",					ui_events.TAB_CHANGED,		self.OnTabChange,			self)
	self:AddCallback("btn_advanced_graphic",ui_events.BUTTON_CLICKED,	self.OnBtnAdvGraphic,		self)
	self:AddCallback("btn_accept",			ui_events.BUTTON_CLICKED,	self.OnBtnAccept,			self)
	self:AddCallback("btn_cancel",			ui_events.BUTTON_CLICKED,	self.OnBtnCancel,			self)
	self:AddCallback("btn_default_graphic",	ui_events.BUTTON_CLICKED,	self.OnBtnDefGraph,			self)	
	self:AddCallback("btn_default_sound",	ui_events.BUTTON_CLICKED,	self.OnBtnDefSound,			self)	
--	self:AddCallback("combo_r2",			ui_events.LIST_ITEM_SELECT,	self.OnR2changed,			self)	
	self:AddCallback("combo_preset",		ui_events.LIST_ITEM_SELECT,	self.OnPresetChanged,		self)	
	self:AddCallback("btn_simply_graphic",	ui_events.BUTTON_CLICKED,	self.OnSimplyGraphic,		self)	
	self:AddCallback("btn_keyb_default",	ui_events.BUTTON_CLICKED,	self.OnBtnDefault,			self)
--	self:AddCallback("btn_check_updates",	ui_events.BUTTON_CLICKED,	self.OnBtnCheckUpdates,		self)

	self:AddCallback("btn_cancel_download",	ui_events.BUTTON_CLICKED,	self.OnBtn_CancelDownload,	self)

	self:AddCallback("list_difficulty",		ui_events.LIST_ITEM_SELECT,	self.OnDifficultyChanged,	self)
end

function options_dialog:HintRefresh()
	hint_name:SetText("Описание настроек")
	if current_view == 1 then
		hint_caption:SetText("Нажмите кнопку 'Расширенные', чтобы изменить настройки, добавленные модом OGSE.")
	else
		hint_caption:SetText("Наведите курсор мыши на опцию и увидите здесь её описание. Таким образом вы сможете понять смысл незнакомых вам настроек, а так же новых настроек, добавленных модом OGSE.")
	end
end

function options_dialog:OnBtnCheckUpdates()
	local console			= get_console()
	console:execute			("check_for_updates 1")
end

function options_dialog:OnBtnDefault()
	local console			= get_console()
--	console:execute			("cfg_load default_controls")
	console:execute			("unbindall")

	local opt				= COptionsManager()
	opt:SetCurrentValues	("mm_opt_controls")
	opt:SetCurrentValues	("key_binding")
end

function options_dialog:OnPresetChanged()	
	local opt					= COptionsManager()
	opt:SetCurrentValues		("mm_opt_video")
	opt:SetCurrentValues		("mm_opt_video_adv")
end

function options_dialog:OnR2changed()	

	self:UpdateDependControls				()
	
	if false==self.b_r2_restart_shown then
		self.b_r2_restart_shown			 = true
		self.message_box:Init			("message_box_restart_game")
		self:GetHolder():start_stop_menu(self.message_box,true)
	end
	
end

function options_dialog:OnBtnDefGraph()
	local opt = COptionsManager()
	opt:SendMessage2Group("mm_opt_video","set_default_value")
end

function options_dialog:OnBtnDefSound()	
	local opt = COptionsManager()
	opt:SendMessage2Group("mm_opt_sound","set_default_value")
end

function options_dialog:OnBtnAccept()
	
	local opt = COptionsManager()
	local console = get_console()
	
	opt:SaveValues("mm_opt_video_preset")
	opt:SaveValues("key_binding")
	opt:SaveValues("mm_opt_video")
	opt:SaveValues("mm_opt_video_adv")
	opt:SaveValues("mm_opt_gameplay")
	opt:SaveValues("mm_opt_sound")	
	opt:SaveValues("mm_opt_controls")
	opt:OptionsPostAccept()	
	self:GameSetupMenuSave()

	self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
	
	ogse_rebind_key.save_keys() -- сохраняем переназначаемые клавиши, чтобы иметь возможность их после восстановить
	cmd("cfg_save") -- сохраняем файл настроек на диск
	set_static_rescale_factor(device().height / device().width / 0.75)
end

function options_dialog:OnBtnCancel()
	local opt = COptionsManager()
	opt:UndoGroup("mm_opt_video_preset")
	opt:UndoGroup("mm_opt_video")
	opt:UndoGroup("mm_opt_video_adv")
	opt:UndoGroup("mm_opt_gameplay")
	opt:UndoGroup("mm_opt_sound")
	opt:OptionsPostAccept()
	self:GameSetupMenuLoad()
	
	self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
end

function options_dialog:OnTabChange()
	self.dlg_video:Show		(false)
	self.dlg_sound:Show		(false)
	self.dlg_gameplay:Show	(false)
	self.dlg_controls:Show	(false)
	self.dlg_video_adv:Show	(false)
	
	local i = self.tab:GetActiveIndex()
	if i == 0 then
		self.dlg_video:Show(true)		
	elseif i == 1 then
		self.dlg_sound:Show(true)
	elseif i == 2 then
		self.dlg_gameplay:Show(true)
	elseif i == 3 then
		self.dlg_controls:Show(true)
	end
end

function options_dialog:OnBtnAdvGraphic()
	self.dlg_video:Show		(false)
	self.dlg_video_adv:Show	(true)
	current_view = 2
	self:HintRefresh()
end

function options_dialog:OnSimplyGraphic()
	self.dlg_video:Show		(true)
	self.dlg_video_adv:Show	(false)
	current_view = 1
	self:HintRefresh()
end

function options_dialog:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	if res==false then
	
		local bind = dik_to_bind(dik)
		
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				if self.dlg_video_adv:IsShown() then
					self.dlg_video_adv:Show	(false)
					self.dlg_video:Show		(true)
				else
					self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
					self:GetHolder():start_stop_menu	(self,true)
					self.owner:Show						(true)
				end
			end	
		
		end
	end
	   
	return res
end

function options_dialog:Update()
	CUIScriptWnd.Update(self)
	
	local mm = main_menu.get_main_menu()
	local sss = mm:GetPatchProgress()
	
	if sss:GetInProgress() then
		self.text_download:Show					(true)
		self.cap_download:Show					(true)
		self.download_progress:Show				(true)
		local _progr							= sss:GetProgress()
		self.download_progress:SetProgressPos	(_progr)
		local str								= string.format("%.0f%%(%s)",_progr,sss:GetFlieName())
		self.text_download:SetText				(str)
		self.btn_cancel_download:Show			(true)
	else
		self.text_download:Show					(false)
		self.cap_download:Show					(false)
		self.download_progress:Show				(false)
		self.btn_cancel_download:Show			(false)
	end
end

function options_dialog:OnBtn_CancelDownload()
	local mm = main_menu.get_main_menu()
	mm:CancelDownload()
end

function options_dialog:GameSetupMenuLoad()
	local f = getFS()
	self.dynamic_bioradar:SetCheck(f:exist("$game_saves$", "dynamic_bioradar.ltx") ~= nil)
	self.autosave_enable:SetCheck(f:exist("$game_saves$", "autosave_enable.ltx") ~= nil)
	self.pause_on_load:SetCheck(f:exist("$game_saves$", "pause_on_load.ltx") ~= nil)
	self.animations:SetCheck(f:exist("$game_saves$", "animations.ltx") ~= nil)
	self.fast_respawn:SetCheck(f:exist("$game_saves$", "fast_respawn.ltx") ~= nil)
	self.transparent_treasure:SetCheck(f:exist("$game_saves$", "transparent_treasure.ltx") ~= nil)
	
	self.prev_buy = ui_mm_opt_add.GetUserText(self.buy, "buy")
	self.prev_del = ui_mm_opt_add.GetUserText(self.del, "del")
end

function options_dialog:GameSetupMenuSave()
	SwitchOption("dynamic_bioradar",		self.dynamic_bioradar:GetCheck())
	SwitchOption("autosave_enable",			self.autosave_enable:GetCheck())
	SwitchOption("pause_on_load",			self.pause_on_load:GetCheck())
	SwitchOption("animations",				self.animations:GetCheck())
	SwitchOption("fast_respawn",			self.fast_respawn:GetCheck())
	SwitchOption("transparent_treasure",	self.transparent_treasure:GetCheck())

	ui_mm_opt_add.SetUserText(self.prev_buy, self.buy:GetText(), "buy")
	ui_mm_opt_add.SetUserText(self.prev_del, self.del:GetText(), "del")
	
	transparent_treasure.scan() -- прозрачные рюкзаки
--	hotkeys.init()
end

-- переключение опций
function SwitchOption(option, on)
	local f = getFS()
	local f1 = f:update_path("$game_saves$", "game_setup.ltx")
	
	local fname = option .. ".ltx"
	local is_on = f:exist("$game_saves$", fname)
	local f2 = f:update_path("$game_saves$", fname)
	local changed = false
	if not is_on and on then		-- включили
		f:file_copy(f1, f2)
		options_cache[ option ] = true
		changed = true
	elseif is_on and not on then 	-- выключили
		f:file_delete(f2)
		options_cache[ option ] = false
		changed = true
	end
	if level.present() then
		db.dynamic_bioradar = GetOption("dynamic_bioradar")
		biodetector.biodetectorRemove()
	end
	return changed
end

-- отключение на мастере распознавания НПС и дистанции
function options_dialog:OnDifficultyChanged()
	if self.list_difficulty:CurrentID() == 3 then
		self.check_tips:SetCheck(false)
		self.check_tips:Enable(false)
		self.check_dist:SetCheck(false)
		self.check_dist:Enable(false)
	else
		self.check_tips:Enable(true)
		self.check_dist:Enable(true)
	end

	inventory.need_update = true	-- для пересчета иммунитетов при смене уровня сложности
end

-- чтение опций
function GetOption( option )
  if force_options[ option ] ~= nil then return force_options[ option ] end
  if options_cache[ option ] == nil then
    local opt = getFS():exist( "$game_saves$", option..".ltx" ) ~= nil
    options_cache[ option ] = opt
  end
  return options_cache[ option ]
end
