-- -*- mode: lua; coding: windows-1251-dos -*-

local update_signal
function attach( sm )
  sm:subscribe({ signal = "on_empty_smart_terrain", fun = this.on_empty_smart })
  sm:subscribe({ signal = "on_full_smart_terrain",  fun = this.on_full_smart })
  sm:subscribe({ signal = "on_monster_spawn",       fun = this.on_monster_spawn })
  update_signal = { signal = "on_update", fun = this.on_update }
end


local update_gogogo     = {}
local update_subscribed = false
local is_walking_npc    = {}
local is_walking_from_smart = {}

function on_update()
  if table.getn( update_gogogo ) > 0 then
    local id   = table.remove( update_gogogo )
    local sobj = alife():object( id )
    if sobj and sobj:alive() then
      sobj:brain():update()
    end
  else
    ogse_signals.get_mgr():unsubscribe( update_signal )
    is_walking_npc    = {}
    is_walking_from_smart = {}
    update_gogogo     = {}
    update_subscribed = false
  end
end


function periodic_job()
  local gogogo = {}
  smart_terrain.iterate_smart_terrains( function( strn )
    check_too_slow_npc( strn )
    if not is_walking_smart( strn ) then return end
    strn:initialize_if_needed()
    local gulag = strn.gulag
    if gulag then
      for _, sobj in ipairs( get_walk_npc( strn ) ) do
        table.insert( gogogo, {
          [ "sobj" ] = sobj,
          [ "strn" ] = strn,
        })
      end
    end
  end )
  local rnd_go = {}
  while table.getn( gogogo ) > 0 do
    table.insert(
      rnd_go,
      table.remove( gogogo, math.random( table.getn( gogogo ) ) )
    )
  end
  for _, t in ipairs( rnd_go ) do
    local sobj = t.sobj
    local strn = t.strn
    sobj:brain():can_choose_alife_tasks( true )
    smart_terrain.unregister_npc( sobj )
    table.insert( update_gogogo, sobj.id )
    is_walking_npc[ sobj.id ] = true
    is_walking_from_smart[ strn.id ] = true
  end
  if not update_subscribed then
    ogse_signals.get_mgr():subscribe( update_signal )
    update_subscribed = true
  end
  local next_m = math.random( 0, 59 )
  dsh.start_gtimerDHMS(
    script_name() .. ".periodic_job",
    0, 1, next_m, 0,
    script_name() .. ".periodic_job"
  )
end


function get_smart_ini_section( strn )
  local name     = strn:name()
  local dsh_sect = "dsh.gulag.override." .. name
  local profile  = strn.dsh_active_profile
  local sect
  if profile then
    sect = dsh_sect .. "." .. profile
  else
    sect = dsh_sect
  end
  return sect
end


function is_walking_smart( strn )
  local name = strn:name()
  local res  = get_bool( "dsh.gulag.free_logic", name, false )
  local sect = get_smart_ini_section( strn )
  if
    sys_ini:section_exist( sect )
    and sys_ini:line_exist( sect, "dsh_walking" )
  then
    local cond = get_string( sect, "dsh_walking" )
    if cond then
      local pc = xr_logic.parse_condlist( nil, sect, "dsh_walking", cond )
      res = xr_logic.pick_section_from_condlist( db.actor, db.actor, pc ) ~= nil
    end
  end
  return res
end


function get_walk_npc( strn )
  local gulag = strn.gulag
  local sect  = get_smart_ini_section( strn )
  local keep_min = 0
  if sys_ini:section_exist( sect ) then
    keep_min = get_u32( sect, "dsh_walking_keep_min", keep_min )
  end
  local comed    = gulag:get_population_comed()
  local gogogo   = {}
  if comed < keep_min + 1 then return gogogo end
  local comed_npc = {}
  for id, v in pairs( strn.npc_info ) do
    local npc_sobj = alife():object( id )
    if
      npc_sobj and not v.exclusive
      and not gulag.Object_didnt_begin_job[ id ]
    then
      table.insert( comed_npc, {
        diff_sec = game.get_game_time():diffSec( v.stay_end ),
        sobj     = npc_sobj,
      })
    end
  end
  if table.getn( comed_npc ) > 0 then
    table.sort( comed_npc, function( a, b )
      return a.diff_sec > b.diff_sec
    end )
    local ready_to_go     = {}
    local not_ready_to_go = {}
    for _, v in ipairs( comed_npc ) do
      if v.diff_sec < 0 then
        table.insert( not_ready_to_go, v )
      elseif is_too_bad_weather( v.sobj ) then
        table.insert( not_ready_to_go, v )
      elseif is_too_late( v.sobj ) then
        table.insert( not_ready_to_go, v )
      else
        table.insert( ready_to_go,     v )
      end
    end
    local allowed_to_go = comed - keep_min
    local walkable      = math.min(
      allowed_to_go, table.getn( ready_to_go )
    )
    local num_to_go     = math.random( 0, walkable )
    if
      keep_min == 0         -- могут уйти все
      and num_to_go > 0
      and num_to_go == table.getn( ready_to_go ) -- идут все, кто собрался
      and table.getn( not_ready_to_go ) == 1     -- остается один
      and math.random() < 0.5
    then
      -- да ну нафиг, я тоже тогда пойду с мужиками.
      num_to_go = num_to_go + 1
      table.insert( ready_to_go, table.remove( not_ready_to_go ) )
    end
    while num_to_go > 0 do
      local npc_sobj = ready_to_go[ num_to_go ].sobj
      table.insert( gogogo, npc_sobj )
      num_to_go = num_to_go - 1
    end
  end
  return gogogo
end


function is_too_bad_weather( npc )
  local weather = ogse_weather_mgr.monitoring_weather_sect
  return ( string.find( weather, "storm" ) and math.random() < 0.9 )
end


function is_too_late( npc )
  local htime = level.get_time_hours()
  if IsStalker( npc ) and htime <= 4 or htime >= 21 then
    if math.random() < 0.7 then return true end
  end
  return false
end


function on_empty_smart( strn )
  local sect = get_smart_ini_section( strn )
  local change_on_empty, restrictors
  if sys_ini:section_exist( sect ) then
    change_on_empty = get_string( sect, "dsh_change_profile_on_empty" )
    restrictors     = get_string( sect, "dsh_cleanup_restrictors" )
  end
  if not change_on_empty then return end
  local cond = xr_logic.parse_condlist(
    nil, sect, "dsh_change_profile_on_empty", change_on_empty
  )
  if xr_logic.pick_section_from_condlist( db.actor, db.actor, cond ) == nil then
    return
  end
  local profiles
  if sys_ini:section_exist( sect ) then
    profiles = get_string( sect, "dsh_profiles" )
  end
  ASSERT( profiles, "profiles not found for %s", strn:name() )
  local new_profile = select_prob_name( parse_probs( profiles ) )
  switch_smart_terrain_profile( strn, new_profile )
  if restrictors then
    for _, k in ipairs( parse_names( restrictors ) ) do
      local sobj = alife():object( k )
      if sobj then
        alife():release( sobj )
      end
    end
  end
  delay_lock( strn, sect )
end


function delay_lock( strn, sect )
  local after_delay = get_string( sect, "dsh_after_delay" )
  if after_delay then
    local t1, t2 = unpack( parse_nums( after_delay ) )
    local delay  = math.random( t1, t2 )
    strn:set_idle_timer( delay )
  end
end
-- Оставлено для совместимости. Что бы не упало, если у кого-то в
-- сейве есть уже запущенный старый таймер.
function on_after_delay_timer() end


function parse_probs( str )
  local t = {}
  local last
  for _, k in ipairs( parse_names( str ) ) do
    if last then
      local p = tonumber( k )
      if p then
        last.prob = p
        last      = nil
      else
        last = {
          [ "name" ] = k,
          [ "prob" ] = 1,
        }
        table.insert( t, last )
      end
    else
      last = {
        [ "name" ] = k,
        [ "prob" ] = 1,
      }
      table.insert( t, last )
    end
  end
  return t
end


function select_prob_name( t )
  local sum = 0
  for _, v in ipairs( t ) do
    sum = sum + v.prob
  end
  ASSERT( sum > 0, "wrong sum = %s", sum )
  if sum > 1 then
    sum = math.random( 1, sum )
  end
  for _, v in ipairs( t ) do
    sum = sum - v.prob
    if sum <= 0 then
      return v.name
    end
  end
  ASSERT( nil, "nothing found: sum = %s", sum )
end


function switch_smart_terrain_profile( strn, profile )
  local pk = xs_netpk.smart_terrain( strn )
  ASSERT( pk:isOk(), "can't read netpk of %s", strn:name() )
  local data = pk:get()
  local cd   = data.custom_data:getTable()
  if not cd.dsh then cd.dsh = {} end
  cd.dsh.active_profile = profile
  data.custom_data:set( cd )
  pk:set( data )
  strn.dsh_active_profile = profile
  strn:dsh_override_params()
  if strn.communities then
    local comms = parse_names( strn.communities )
    strn.accepted_communities = {}
    for i, v in ipairs( comms ) do
      strn.accepted_communities[ v ] = true
    end
  end
  strn:remove_gulag( strn.id )
end


function on_full_smart( strn )
  local sect = get_smart_ini_section( strn )
  local population_locked
  if sys_ini:section_exist( sect ) then
    population_locked = get_string( sect, "dsh_population_locked" )
  end
  if population_locked then
    local cond = xr_logic.parse_condlist(
      nil, sect, "dsh_population_locked", population_locked
    )
    if
      xr_logic.pick_section_from_condlist( db.actor, db.actor, cond ) ~= nil
    then
      strn:lock_population( true )
    end
  end
end


function check_too_slow_npc( strn )
  local max_time = 2 * 24 * 3600 -- 2 дня
  for id, v in pairs( strn.npc_info ) do
    local npc_sobj = alife():object( id )
    if
      npc_sobj
      and object_level_name( npc_sobj ) ~= object_level_name( strn )
    then
      local diff_sec = game.get_game_time():diffSec( v.stay_end )
      if diff_sec > max_time then
        log2(
          "dsh: [%s] %s on %s is to slow going to smart_terrain %s on %s: %s seconds till registration",
          script_name(),
          npc_sobj:name(),object_level_name( npc_sobj ),
          strn:name(), object_level_name( strn ),
          diff_sec
        )
        log2( "dsh: [%s]: teleporting...", script_name() )
        alife():teleport_object(
          "", strn.position, strn.m_level_vertex_id, strn.m_game_vertex_id, id
        )
      end
    end
  end
end


local walking_directions = {}

function walk_on_location( obj, cache_k, walk_together )
  local dist    = math.random( 10, 200 )
  local new_dir = walking_directions[ cache_k ]
  if not new_dir then
    new_dir = vector():set(
      math.random( -1000, 1000 ) / 1000, 0, math.random( -1000, 1000 ) / 1000
    )
    new_dir:normalize()
    if walk_together then
      walking_directions[ cache_k ] = new_dir
    end
  end
  local dir     = new_dir
  local try_ang = { -45, 45, -90, 90, -135, 135, -180, 180 }
  for _, next_ang in ipairs( try_ang ) do
    local lvid = level.vertex_in_direction(
      obj:level_vertex_id(), dir, dist
    )
    if lvid ~= obj:level_vertex_id() and obj:accessible( lvid ) then
      obj:set_dest_level_vertex_id( lvid )
      break
    end
    dir = vector_rotate_y( new_dir, next_ang )
  end
end


function on_monster_spawn( obj, binder )
  if not obj:alive() then return end
  local sobj = alife():object( obj:id() )
  if not sobj then return end
  local strn_id = dsh.is_free_logic_mob( sobj )
  if not strn_id then return end
  local strn = alife():object( strn_id )
  ASSERT( strn, "smart_terrain not found: %s", strn_id )
  if not is_walking_smart( strn ) then return end
  local walk_on, walk_together = true, true
  local sect = get_smart_ini_section( strn )
  if sys_ini:section_exist( sect ) then
    walk_on       = get_bool( sect, "dsh_walk_on_location", walk_on )
    walk_together = get_bool( sect, "dsh_walk_together",    walk_together )
  end
  if walk_on then
    walk_on_location( obj, script_name() .. "." .. strn:name(), walk_together )
  end
end


-- гуляющий непись согласиться пойти только в смарт, из которого кто-то
-- ушел гулять в этой итерации.
function npc_accepts_smart_terrain( npc_sobj, strn_sobj )
  if is_walking_npc[ npc_sobj.id ] then
    return ( is_walking_from_smart[ strn_sobj.id ] and true or false )
  end
end
