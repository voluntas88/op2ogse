-- -*- mode: lua; coding: windows-1251-dos -*-

local opt_health = {
  -- health level for heavy injuring sounds
  level1 = 0.08,
  -- health level for light injuring sounds
  level2 = 0.18,
  injury_snd = {
    _1_0 = 2825,
    _1_1 = 2612,
    _1_2 = 2783,
    _1_3 = 2821,
    _1_4 = 3048,
    _2_1 = 3331,
    _2_2 = 3785,
    _2_3 = 2989,
    _2_4 = 4066,
  },
}

local opt_speed = {
  -- speed time increase per update (when running)
  inc = 0.22, --0.88, --0.44, -- 0.11,
  -- speed time decrease per update (when not running)
  dec = 0.28,
  -- minimal speed time for playing breath sounds (when no gasmask)
  time_mini = 6,
  -- play breath sounds (when no gasmask) when stamina is below this level
  stamina = 0.4,
  -- on actor hit, actor_speed_time += delta_health*k_health
  k_health = 0.28,
  -- actor_speed_time += bleeding*k_bleed
  k_bleed = 0, --1.33,
}

local hud_pp = {
  [ "hud_exo"  ] = "helm_exo.ppe",
  [ "hud_gaz"  ] = "helm_respirator.ppe",
  [ "hud_merc" ] = "helm_battle.ppe",
  [ "hud_mil"  ] = "helm_hardhat.ppe",
  [ "hud_nano" ] = "helm_scientific.ppe",
  [ "hud_sci"  ] = "helm_scientific.ppe",
}

local nlc7_hud_sound_t = {
  [ "hud_exo"  ] = "mil",
  [ "hud_gaz"  ] = "gas",
  [ "hud_merc" ] = "gas",
  [ "hud_mil"  ] = "mil",
  [ "hud_nano" ] = "scn",
  [ "hud_sci"  ] = "scn",
}

local nlc7_act_breath = {
  [ "wht" ] = {
    { "actor\\nlc7\\without_mask_1_",  2, 1.2 },
    { "actor\\nlc7\\without_mask_2_",  2, 1.1 },
    { "actor\\nlc7\\without_mask_3_",  6, 1   },
  },
  [ "gas" ] = {
    { "actor\\nlc7\\gas_mask_1_",      6, 1.0 },
    { "actor\\nlc7\\gas_mask_2_",     10, 0.9 },
    { "actor\\nlc7\\gas_mask_3_",     10, 0.8 },
  },
  [ "mil" ] = {
    { "actor\\nlc7\\exo_mask_1_",      9, 1.5 },
    { "actor\\nlc7\\exo_mask_2_",      9, 1.3 },
    { "actor\\nlc7\\exo_mask_3_",      8, 1.1 },
  },
  [ "scn" ] = {
    { "actor\\nlc7\\scient_mask_1_",   2, 1.6 },
    { "actor\\nlc7\\scient_mask_2_",   2, 1.4 },
    { "actor\\nlc7\\scient_mask_3_",   6, 1.2 },
  },
}

local wpn_fx  = dsh_hud_fx_data.wpn_fx
local hud_fxs = dsh_hud_fx_data.hud_fxs
local active_hud_fx_queue, active_hud_fx_sect, active_fx_snd


function attach( sm )
  sm:subscribe({ signal = "on_actor_before_helmet_off", fun = this.on_helmet_off })
  sm:subscribe({ signal = "on_actor_fire", fun = this.on_actor_fire })
  sm:subscribe({ signal = "on_actor_helmet_on", fun = this.on_helmet_on  })
  sm:subscribe({ signal = "on_update", fun = this.on_update     })
  sm:subscribe({ signal = "on_use",    fun = this.on_use       })
end


local upd_time, upd_time2 = 0, 0
function on_update()
  if not ( db.actor and db.actor:alive() ) then return end
  local tg = time_global()
  if tg > upd_time then
    upd_time = tg + 180
    hud_condition()
  end
  if tg > upd_time2 then
    upd_time2 = tg + 113
    nlc7_actor_heart()
  end
end


local actor_speed_time = 0
function hud_condition()
  local radiation = db.actor.radiation
  if radiation > 1 then radiation = 1 end
  if radiation > 0 then
    for _, k in ipairs({
        "detector_simple",
        "detector_advances",
        "detector_elite",
        "detector_elite_sak",
        "detector_elite_john"
    }) do
      if inventory.on_belt( k ) then
        if math.random() < radiation then
          radiation = radiation > 0.5 and math.random() < radiation / 1.3 and "click3" or math.random( 8 )
          local snd = sound_object( "detectors\\geiger_" .. radiation )
          snd:play( db.actor, 0, sound_object.s2d )
        end
        break
      end
    end
  end
  if db.actor:is_actor_sprinting() or db.actor:is_actor_climbing() then
    actor_speed_time = actor_speed_time + opt_speed.inc
  elseif actor_speed_time > opt_speed.dec then
    actor_speed_time = actor_speed_time - opt_speed.dec
    if actor_speed_time < 0 then actor_speed_time = 0 end
  end
  actor_speed_time = math.min(
    32, actor_speed_time + db.actor:get_bleeding() * opt_speed.k_bleed
  )
end


local gas_play = 0
local snd_tg   = 0

function breath_inside_mask( run_koef )
  local tg = time_global()
  if tg < snd_tg then return end
  gas_play = gas_play + 1
  if gas_play > 8 then gas_play = 1 end
  if not run_koef then
    if db.actor.health > 0.2 then
      run_koef = math.ceil(
        (
          1.01 - math.min(
            db.actor.power,
            db.actor.health,
            ogse_actor_conditions_mgr.get_overweight_power()
          )
        ) * 3 + actor_speed_time / 8
      )
    else
      run_koef = 8
    end
  end
  local snd_fname = "actor\\gas_breath_" .. run_koef .. "_" .. gas_play
  local snd = sound_object( snd_fname )
  snd_tg = tg + snd:length() * 1.25
  snd:play( db.actor, 0, sound_object.s2d )
end


local startup = true
function force_on_helmet()
  startup = false
end


function add_helmet_effector( mode )
  level.remove_pp_effector( 3000 )
  if mode then
    local pp = get_cur_helmet_pp()
    if pp then
      level.add_pp_effector( pp, 3000, true )
    end
  end
end


function get_cur_helmet_pp()
  local cur_helmet = ogse_dynamic_hud.get_current_helmet()
  if cur_helmet and cur_helmet ~= "" then
    for k, pp_name in pairs( hud_pp ) do
      if string.find( cur_helmet, k ) then
        return pp_name
      end
    end
  end
  return nil
end


local weapon_lock, waiting_for_helmet = false
function helmet_on_off_effect( delay, mode )
  --level.disable_input()
  if not weapon_lock then
    bind_stalker.hide_weapon()
  end
  dsh.timeout( ( delay or 2000 ), function()
    ogse_signals.get_mgr():call( "on_helmet_on_off_done", mode )
    if not weapon_lock then
      bind_stalker.restore_weapon()
    end
    if waiting_for_helmet then
      local t = waiting_for_helmet
      waiting_for_helmet = nil
      helmet_hud_fx_done( t )
    end
    --level.enable_input()
  end )
end


local shotc = 1
local shott = 0

function on_actor_fire( cur_wpn )
  local wpn = cur_wpn.wpn
  if shott and shott < time_global() then
    shotc = 1
    shott = nil
  end
  local sect
  if cur_wpn.gl_mode then
    if cur_wpn.gl_name then
      sect = get_string( cur_wpn.gl_name, script_name() .. ".wpn_fx" )
    else
      return
    end
  else
    sect = get_string( wpn:section(), script_name() .. ".wpn_fx" )
  end
  if not wpn_fx[ sect ] then return end

  local anims = {}
  local s     = wpn_fx[ sect ].s
  local sc    = table.getn( s )

  if sc > 1 then
    if wpn_fx[ sect ].r == 1 then
      s = s[ math.random( table.getn( s ) ) ]
    elseif wpn_fx[ sect ].r == 2 then
      if shotc == 1 then
        s = s[ 1 ]
      else
        s = s[ math.random( 2, table.getn( s ) ) ]
      end
    else
      sc = ( shotc <= sc ) and shotc
        or ( sc > 2 and math.random( sc - 1, sc ) )
        or sc
      s  = s[ sc ]
    end
  else
    s = s[ 1 ]
  end

  local ammo_r = 1
  local fov_r  = ammo_r * ( zoom_mode() == 1 and 0.13 or 1 )
  for i, v in ipairs( wpn_fx[ sect ].e ) do
    cnt, r = math.modf( v[ 1 ] * fov_r )
    if r ~= 0 and cnt > 4 then -- fmb
      cnt = cnt - cnt * math.random( 0, r * 100 ) / 100 -- fmb
      cnt, r = math.modf( cnt )
    end
    if r ~= 0 and math.random() < r then
      cnt = cnt + 1
    end
    if cnt > 0 then
      table.insert( anims, {
        e = i, d = v[ 2 ] or math.random( 0, 1 ), c = cnt
      })
    end
  end

  for i, a in ipairs( anims ) do
    local n = string.format( [[shoot\s%s_e%s_%s.anm]], s, a.e, a.d )
    for ii = 1, a.c do
      level.add_cam_effector( n, math.random( 5000, 8000 ), false, "" )
    end
  end

  for k, v in pairs( wpn_fx[ sect ].p ) do
    local n   = string.format( [[shoot\%s_s%s.ppe]], k, s )
    local eid = math.random( 5000, 8000 )
    level.add_pp_effector( n, eid, false )
    if v > 0 then
      level.set_pp_effector_factor( eid, v )
    end
  end
  shotc = shotc + 1
  shott = time_global() + 100
end


local delt   = 0
local delt_h = 0

function nlc7_actor_heart( helmet )
  local npc = db.actor
  if not npc then return end
  local hb = npc.health
  if hb <= 0 or not npc:alive() then return end
  local time_curr = time_global()
  local time_delt = 0
  local step      = 1
  if hb < 0.3 then
    time_delt = time_curr - delt_h
    if time_delt >= math.log( hb * 200 ) * 200 then
      if     hb < 0.05 then
        step = 3
      elseif hb < 0.15 then
        step = 2
      else
        step = 1
      end
      local snd_fname = "actor\\nlc7\\heartbeat_" .. step .. "_" .. math.random( 4 )
      local snd = sound_object( snd_fname )
      snd.volume = 1.5 - 5 * hb
      snd:play( db.actor, 0, sound_object.s2d )
      delt_h = time_curr
    end
  end
  local r_h = math.min(
    npc.power,
    ( 1 - actor_speed_time / 32 ),
    ogse_actor_conditions_mgr.get_overweight_power()
  )
  local hud, helmet = ogse_dynamic_hud.get_current_helmet()
  local tip = helmet
    and ( nlc7_hud_sound_t[ helmet ] or "wht" )
    or "wht"
  if r_h < 0.79 then
    time_delt = time_curr - delt
    if time_delt >= r_h * 1500 + 800 then
      if     r_h < 0.25 then
        step = 3
      elseif r_h < 0.5  then
        step = 2
      else
        step = 1
      end
      local snd_fname = nlc7_act_breath[ tip ][ step ][ 1 ]
        .. math.random( nlc7_act_breath[ tip ][ step ][ 2 ] )
      local snd = sound_object( snd_fname )
      snd.volume = 2.5 - nlc7_act_breath[ tip ][ step ][ 3 ] - r_h
      snd:play( db.actor, 0, sound_object.s2d )
      delt = time_curr
    end
  elseif ui_mm_opt_main.GetOption( "hud_plus_enabled" ) then
    if tip ~= "wht" then
      breath_inside_mask( 1 )
    end
  end
end


function on_helmet_off()
  add_helmet_effector( false )
  if startup then
    startup = false
  else
    helmet_on_off_effect( 4050, false )
    local hud, helmet = ogse_dynamic_hud.get_current_helmet()
    if helmet then
      local tip = helmet
        and ( nlc7_hud_sound_t[ helmet ] or "wht" )
        or "wht"
      local snd_fname = "device\\masks\\" .. tip .. "_off"
      local snd = sound_object( snd_fname )
      dsh.timeout( 50, function()
        snd:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 0.5 )
      end )
    end
  end
end


function on_helmet_on()
  add_helmet_effector( true )
  if startup then
    startup = false
  else
    helmet_on_off_effect( 2050, true )
    local hud, helmet = ogse_dynamic_hud.get_current_helmet()
    if helmet then
      local tip = helmet
        and ( nlc7_hud_sound_t[ helmet ] or "wht" )
        or "wht"
      local snd_fname = "device\\masks\\" .. tip .. "_on"
      local snd = sound_object( snd_fname )
      snd:play_no_feedback( db.actor, sound_object.s2d, 0, vector(), 1 )
    end
  end
end


local active_helmet
local hud_fx_lock = false

function helmet_hud_fx_off( t )
  level.disable_input()
  level.hide_indicators()
  bind_stalker.hide_weapon()
  hud_fx_lock = true
  local hud, helmet = ogse_dynamic_hud.get_current_helmet()
  if helmet then
    active_helmet      = helmet
    weapon_lock        = true
    waiting_for_helmet = t
    ogse_dynamic_hud.helmet_on_off()
  else
    helmet_hud_fx_done( t )
  end
end


function helmet_hud_fx_on( t )
  hud_fx_lock = false
  level.show_indicators()
  if active_helmet then
    active_helmet      = nil
    weapon_lock        = true
    waiting_for_helmet = t
    ogse_dynamic_hud.helmet_on_off()
  else
    helmet_hud_fx_done( t )
  end
end


function helmet_hud_fx_done( t )
  weapon_lock = false
  if not hud_fx_lock then
    bind_stalker.restore_weapon()
    level.enable_input()
  end
  process_fx_next( nil, t )
end


local active_fx_t
function on_use( obj )
  if has_alife_info( "biznes_remove_special_item" ) then return end
  local sect = obj:section()
  local fx   = get_string( sect, script_name() .. ".fx" )
  if fx then
    if
      get_bool( sect, "dsh_medkit.dsh_hud_fx", false )
      and db.actor:dont_has_info( "ui_inventory" )
    then
      fx = "use_sound"
    end
  end
  if fx then
    run_fx( obj:section(), fx )
  end
end


function run_fx( sect, fx, tail )
  ASSERT( hud_fxs[ fx ], "unknown fx for %s", sect )
  if active_fx_t then
    active_fx_t:stop()
    active_fx_t = nil
  end
  if active_fx_snd then
    if active_fx_snd:playing() then
      active_fx_snd:stop()
    end
    active_fx_snd = nil
  end
  active_hud_fx_queue = {}
  for _, item in ipairs( hud_fxs[ fx ] ) do
    table.insert( active_hud_fx_queue, item )
  end
  if tail then
    for _, item in ipairs( tail ) do
      table.insert( active_hud_fx_queue, item )
    end
  end
  active_hud_fx_sect = sect
  process_fx_next( nil, {} )
end


function process_fx_next( timeout, t )
  if active_hud_fx_queue and table.getn( active_hud_fx_queue ) > 0 then
    local item = table.remove( active_hud_fx_queue, 1 )
    local func = item.func
      or ( item.use_sound and this.fx_use_sound )
    ASSERT( func, "can't find func for %s", active_hud_fx_sect )
    if item.timeout then timeout = item.timeout end
    if timeout and timeout > 0 then
      active_fx_t = dsh.timeout( timeout, function()
        local timeout = func( item, t )
        if item.next ~= false then
          process_fx_next( timeout, t )
        end
      end )
    else
      active_fx_t = nil
      local timeout = func( item, t )
      if item.next ~= false then
        process_fx_next( timeout, t )
      end
    end
  else
    active_fx_t         = nil
    active_hud_fx_queue = nil
    active_hud_fx_sect  = nil
  end
end


function fx_use_sound( item )
  local use_sound = item.snd_name or get_string(
    active_hud_fx_sect, script_name() .. ".use_sound"
  )
  ASSERT( use_sound, "use_sound not found for %s", active_hud_fx_sect )
  if active_fx_snd and active_fx_snd:playing() then
    active_fx_snd:stop()
  end
  local snd_names = parse_names( use_sound )
  active_fx_snd   = sound_object(
    snd_names[ math.random( table.getn( snd_names ) ) ]
  )
  active_fx_snd:play( db.actor, 0, sound_object.s2d )
  return active_fx_snd:length()
end


function fx_use_dsh_medkit()
  dsh_medkit.apply_item( active_hud_fx_sect )
end


function close_inventory()
  if db.actor:has_info( "ui_inventory" ) then
    level.start_stop_menu( level.main_input_receiver(), true )
  end
end
