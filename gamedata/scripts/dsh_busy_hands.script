-- -*- mode: lua; coding: windows-1251-dos -*-

-- С мутантами, имеющими такое название секции, нужно обращаться, как
-- с NPC.
local monsters_like_npc = {
  [ "skelet_ded" ] = true,      -- Лесник из Забытого леса
}
-- как часто выполнять проверку на занятость рук (в мс)
local freq = 100


function attach( sm )
  sm:subscribe({ signal = "on_monster_death",  fun = this.on_monster_death })
  sm:subscribe({ signal = "on_monster_spawn",  fun = this.on_monster_spawn })
  sm:subscribe({ signal = "on_npc_death",      fun = this.on_npc_death     })
  sm:subscribe({ signal = "on_npc_spawn",      fun = this.on_npc_spawn     })
  sm:subscribe({ signal = "on_ph_spawn",       fun = this.on_ph_spawn      })
  sm:subscribe({ signal = "on_spawn",          fun = this.on_spawn         })
end


local info_radius
local knives = {}
function on_spawn()
  for _, k in ipairs( monster_parts.knives ) do
    knives[ k ] = true
  end
  info_radius = math.pow( db.actor:get_actor_take_dist() + 1, 2 )
end


function on_monster_spawn( obj, binder )
  if obj:alive() then return end
  local s = {
    [ "signal" ] = "on_monster_update." .. obj:id(),
    [ "fun"    ] = this.on_monster_update,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_npc_spawn( obj, binder )
  if obj:alive() then return end
  local s = {
    [ "signal" ] = "on_npc_update." .. obj:id(),
    [ "fun"    ] = this.on_npc_update,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_monster_death( obj, who )
  local binder = obj:binded_object()
  on_monster_spawn( obj, binder )
  obj:set_tip_text_default()
  obj:set_nonscript_usable( true )
end


function on_npc_death( obj, who )
  local binder = obj:binded_object()
  on_npc_spawn( obj, binder )
  obj:set_tip_text_default()
  obj:set_nonscript_usable( true )
end


function on_ph_spawn( obj, binder )
  if not (
    obj:is_inventory_box() or obj:section() == "dsh_treasure_item"
  ) then
    return
  end
  local s = {
    [ "signal" ] = "on_ph_update." .. obj:id(),
    [ "fun"    ] = this.on_ph_update,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
end


function on_ph_update( obj )
  process_npc( obj, "st_search_treasure" )
end


function on_monster_update( obj )
  if monsters_like_npc[ obj:section() ] then
    return on_npc_update( obj )
  end
  if db.actor then
    local binder = obj:binded_object()
    if binder.dsh_busy_hands_t and binder.dsh_busy_hands_t > time_global() then
      return
    end
    local dist = obj:position():distance_to_sqr( db.actor:position() )
    if dist < info_radius then
      if actor_has_knife() or GetShift() then
        if binder.dsh_busy_hands_nonusable then
          obj:set_tip_text_default()
          obj:set_nonscript_usable( true )
          binder.dsh_busy_hands_nonusable = nil
        end
      else
        if not binder.dsh_busy_hands_nonusable then
          obj:set_tip_text( "dsh_cant_without_knife" )
          obj:set_nonscript_usable( false )
          binder.dsh_busy_hands_nonusable = true
        end
      end
    end
    binder.dsh_busy_hands_t = time_global() + (
      dist < info_radius * 2 and freq or 1000
    )
  end
end


function actor_has_knife()
  --local active_item = db.actor:active_item()
  return true --( active_item and knives[ active_item:section() ] )
end


function on_npc_update( obj )
  process_npc( obj )
end


function process_npc( obj, tip_text_def )
  if db.actor then
    local binder = obj:binded_object()
    if binder.dsh_busy_hands_t and binder.dsh_busy_hands_t > time_global() then
      return
    end
    local dist = obj:position():distance_to_sqr( db.actor:position() )
    if dist < info_radius then
      if actor_has_free_hands() then
        if binder.dsh_busy_hands_nonusable then
          if binder.dsh_tip_text then
            obj:set_tip_text( binder.dsh_tip_text )
          elseif tip_text_def then
            obj:set_tip_text( tip_text_def )
          else
            obj:set_tip_text_default()
          end
          obj:set_nonscript_usable( true )
          binder.dsh_busy_hands_nonusable = nil
        end
      else
        if not binder.dsh_busy_hands_nonusable then
          obj:set_tip_text( "dsh_busy_hands" )
          obj:set_nonscript_usable( false )
          binder.dsh_busy_hands_nonusable = true
        end
      end
    end
    binder.dsh_busy_hands_t = time_global() + (
      dist < info_radius * 2 and freq or 1000
    )
  end
end


function actor_has_free_hands()
  --local active_item = db.actor:active_item()
  return true --(
    --( active_item and string.find( active_item:section(), "wpn_fist_" ) )
    --or
    --( not active_item )
  --)
end
