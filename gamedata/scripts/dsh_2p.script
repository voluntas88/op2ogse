-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_drop_before_all", fun = this.on_drop })
  sm:subscribe({ signal = "on_first_update",    fun = this.on_first_update })
  sm:subscribe({ signal = "on_item_to_slot",    fun = this.on_item_to_slot })
  sm:subscribe({ signal = "on_key_down",        fun = this.on_key_down })
  sm:subscribe({ signal = "on_save",            fun = this.on_save })
end


local pseudo_slots = {}
local pseudo_idx   = {}

function on_drop( obj, sobj )
  if device().precache_frame < 1 and pseudo_idx[ obj:id() ] then
    local filtered = {}
    for _, k in ipairs( pseudo_slots ) do
      if k:id() ~= obj:id() then
        table.insert( filtered, k )
      end
    end
    if table.getn( filtered ) < table.getn( pseudo_slots ) then
      pseudo_slots = filtered
    end
    pseudo_idx[ obj:id() ] = nil
  end
end


function on_item_to_slot( obj )
  if device().precache_frame < 1 then
    local p = db.actor:item_in_slot( 1 )
    if p and p:id() == obj:id() then
      table.insert( pseudo_slots, 1, obj )
      pseudo_idx[ obj:id() ] = true
      if table.getn( pseudo_slots ) > 2 then
        local removed = table.remove( pseudo_slots )
        pseudo_idx[ removed:id() ] = nil
      end
    end
  end
end


function on_key_down( key, bind )
  if key ~= dsh.get_kbd_key( "next_pistol" ) then return end
  if table.getn( pseudo_slots ) > 0 then
    local p = db.actor:item_in_slot( 1 )
    if p then
      db.actor:move_to_ruck( p )
    end
    local next_p = table.remove( pseudo_slots )
    db.actor:move_to_slot_and_activate( next_p )
    if db.actor:active_slot() ~= 1 then
      db.actor:activate_slot( 1 )
    end
  end
  return true
end


function on_first_update()
  local loaded = ogse.load_var( "dsh_2p.pseudo_slots_1", {}, "array" )
  for _, k in ipairs( loaded ) do
    local obj = level.object_by_id( k )
    if obj then
      table.insert( pseudo_slots, obj )
      pseudo_idx[ obj:id() ] = true
    end
  end
end


function on_save()
  if table.getn( pseudo_slots ) == 2 then
    local save_tbl = {}
    for _, k in ipairs( pseudo_slots ) do
      table.insert( save_tbl, k:id() )
    end
    ogse.save_var( "dsh_2p.pseudo_slots_1", save_tbl, "array" )
  else
    ogse.delete_var( "dsh_2p.pseudo_slots_1" )
  end
end


function get_pseudo_slots()
  return pseudo_slots
end
