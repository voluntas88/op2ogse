
local stat = {}
class "profiler"

function profiler:__init(name)
	self._name = name
	self._tmr = profile_timer()
	self._times = {}
end

function profiler:start()
	self._tmr:start()
	return self
end

function profiler:stop()
	self._tmr:stop()
	local fstat = stat[self._name] -- статистика для фрагмента кода
	if not fstat then 
		local tms = {} -- данные по одной точке
		fstat = {times = tms, counter = 1, skip = 1} --data, counter
		for i,data in ipairs(self._times) do
			table.insert(tms, {pname = data.pname, min = data.tm, max = data.tm, sum = data.tm}) -- point_name, min, max, sum
		end
		stat[self._name] = fstat
	elseif fstat.skip < 10 then
		--log1("skipping")
		local tms = fstat.times
		for i,data in ipairs(self._times) do
			local data_ = tms[i]
			ASSERT(data_.pname == data.pname, "wrong stat netry: %s != %s", data_.pname, data.pname)
			--min
			data_.min = data.tm
			-- max
			data_.max = data.tm
			-- sum
			data_.sum = data.tm
		end
		fstat.skip = fstat.skip + 1
	else
		--log1("collecting")
		local tms = fstat.times
		for i,data in ipairs(self._times) do
			local data_ = tms[i]
			ASSERT(data_.pname == data.pname, "wrong stat netry: %s != %s", data_.pname, data.pname)
			-- min
			data_.min = math.min(data_.min, data.tm)
			-- max
			data_.max = math.max(data_.max, data.tm)
			-- sum
			data_.sum = data_.sum + data.tm
		end
		-- counter
		fstat.counter = fstat.counter + 1
	end
end

function profiler:save(point_name)
	self._tmr:stop()
	table.insert(self._times, {pname = point_name, tm = self._tmr:time()})
	self._tmr:start()
end

function print_stat(name)
	ASSERT(stat[name], "no stats for name: %s", tostring(name))
	log3("time statistic for the entry: %s", name)
	for i,data in ipairs(stat[name].times) do
		log3("%s: min = %f, max = %f, avg = %f", data.pname, data.min, data.max, data.sum / stat[name].counter)
	end
	log1("end time statistic")
end