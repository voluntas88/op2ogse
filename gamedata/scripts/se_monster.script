-- -*- mode: lua; coding: windows-1251-dos -*-
--[[
Изменения script_version:
	4 - сохранение поля job_online
	5 - сохранение поля was_in_smart_terrain
	
	modyfied by xStream
]]

need_be_online={}

local levels_types={
  l01_escape=0,
  l02_garbage=0,
  l03_agroprom=0,
	l03u_agr_underground=1,
  l04_darkvalley=0,
	l04u_labx18=1,
  l05_bar=1,
  l06_rostok=0,
  l07_military=0,
  l08_yantar=0,
	l08u_brainlab=1,
  l10_radar=0,
	l10u_bunker=1,
  l11_pripyat=0,
  l12_stancia=0,
	l12_stancia_2=0,
	l12u_control_monolith=1,
	l12u_sarcofag=1,
  atp_for_test22=0,
	peshera=1,
  puzir=0,
  av_peshera=1,
  aver=0,
  hospital=0,
  limansk=0,
  marsh=0,
  warlab=1,
  lost_village=0,
  generators=0,
  dead_city=0,
  jupiter=0,
  zaton=0,
  pripyat=0,
  jupiter_underground=0,
  labx8=1
}

class "se_monster" (cse_alife_monster_base)
--------------------
function se_monster:__init (section) super (section)
	self.ini = nil
	self.ini_initialized = false

	self.smart_terrain_conditions = nil
	self.smart_terrain_conditions_initialized = false

	self.check_distance = 	nil
	self.min_distance = 	nil
	self.day_night_switch = nil

	-- этот флаг берётся из работы смарта
	-- true     = всегда в онлайне
	-- false    = всегда в офлайне
	-- condlist = условие, которое отпределяет true или false
	-- nil      = смарту всё равно
	self.job_online          = nil
	self.job_online_condlist = nil

	-- посещал ли сталкер хоть один smart_terrain
	self.was_in_smart_terrain = false

	self.day_begin=-1
	self.day_end=-1
	
	self.state = nil
end
--------------------


function se_monster:get_ini()
  if not self.ini_initialized then
    self.ini             = self:spawn_ini ()
    self.ini_initialized = true

    if
      self.ini:section_exist( "logic" )
      and get_bool( "logic", "dsh_replace_ini", false, self.ini )
    then
      local cfg = get_string( "logic", "cfg", nil, self.ini )
      if cfg then self.ini = dsh.cached_ini_file( cfg ) end
    end

    if self.ini:section_exist( "spawner" ) then
      self.spawner = xr_logic.parse_condlist(
        db.actor, "spawner", "cond",
        get_string( "spawner", "cond", nil, self.ini )
      )
      self.day_night_switch = get_bool(
        "spawner", "day_night_switch", false, self.ini
      )
      self.day_begin = get_float( self:section_name(), "DayTime_Begin", -1 )
      self.day_end   = get_float( self:section_name(), "DayTime_End",   -1 )
    end
  end
end


function se_monster:get_job_online()
  if self.job_online_condlist == nil then
    return self.job_online
  else
    return xr_logic.pick_section_from_condlist(
      db.actor_proxy, self, self.job_online
    ) ~= nil
  end
end


function se_monster:can_switch_offline()
  return true
end


function se_monster:can_switch_online()
  if self:dsh_avoid_this_level() then
    return false
  end

  local job_online = self:get_job_online()
  if job_online == false then return job_online end

  local cse_can_switch = cse_alife_monster_base.can_switch_online( self )
    and is_creature_day( self, self.day_night_switch )
  
  if self.ini == nil or self.spawner == nil then
    return cse_can_switch
  end

  if db.actor ~= nil and db.actor:alive() == false then
    return self.online
  end
  
  local can = cse_can_switch
  if self.online == false then
    can = (
      xr_logic.pick_section_from_condlist( db.actor, self, self.spawner ) ~= nil
      and cse_can_switch
    )
  else
    can = cse_can_switch
  end

  return can
end


-- через Бар ходить не надо
function se_monster:dsh_avoid_this_level()
  local lname = level.name()
  if lname == "l05_bar" or lname == "l07_military" then
    local strn_id = self:smart_terrain_id()
    if strn_id ~= 65535 then
      local strn_sobj = alife():object( strn_id )
      if strn_sobj then
        local dst_level = object_level_name( strn_sobj )
        if dst_level ~= lname then return true end
      end
    end
  end
  return false
end


function se_monster:STATE_Write(packet)
	cse_alife_monster_base.STATE_Write (self, packet)
	
	local st = 0
	if self.state == true then
		st=4
	end
	
	if self.job_online == true then
		packet:w_u8(0+st)
	elseif self.job_online == false then
		packet:w_u8(1+st)
	elseif self.job_online == nil then
		packet:w_u8(2+st)
	else
		packet:w_u8(3+st)
		packet:w_stringZ(self.job_online_condlist)
	end
	
	--amk.mylog("writen "..self.id.." state "..st)

	packet:w_bool(self.was_in_smart_terrain)
end
--------------------
function se_monster:STATE_Read(packet, size)
	cse_alife_monster_base.STATE_Read (self, packet, size)

	if self.script_version >= 4 then
		local t = packet:r_u8()
		
		local st = math.floor(t/4)*4
		t=t-st
		if st==4 then need_be_online[self.id]=true end
		
		if t == 0 then
			self.job_online = true
		elseif t == 1 then
			self.job_online = false
		elseif t == 2 then
			self.job_online = nil
		else
			self.job_online_condlist = packet:r_stringZ()

			self.job_online = xr_logic.parse_condlist(nil, "se_monster:STATE_Read", "job_online", self.job_online_condlist)
		end
		--amk.mylog("readed "..self.id.." state "..st)
	end

	if self.script_version >= 5 then
		self.was_in_smart_terrain = packet:r_bool()
	end
	
end
--------------------
function replace_params( src, dest )
  local replaced = false
  for k, v in pairs( src ) do
    dest[ k ] = v
    replaced = true
  end
  return replaced
end
function se_monster:on_before_register()
  if modified_params then -- при наличии таблицы с данными для замены
    -- читаем из родного пакета данные
    local params = m_net_utils.get_monster_data( self )
    -- не переписывать custom_data из секции
    if params.custom and string.len( params.custom ) > 0 then
      modified_params.custom = nil
    end
    if replace_params( modified_params, params ) then
      m_net_utils.set_monster_data( params, self )
    end
    modified_params = nil -- обнуляем табличку с исходными данными
  end
  if on_before_register_callback then
    on_before_register_callback( self )
    on_before_register_callback = nil
  end
  if dsh.is_free_logic_mob( self ) then
    self:brain():can_choose_alife_tasks( false )
  end
  event( "se_monster:on_before_register"):trigger({ sobj = self })
  self:fill_exclusives()
end


function se_monster:on_register()
  -- Чистим рестрикторы
  local tbl = amk.read_monster_params( self )
  if table.getn( tbl.crvu32u16u2 ) > 0 then
    tbl.crvu32u16u2 = {}
    amk.write_monster_params( tbl, self )
  end

  cse_alife_monster_base.on_register( self )
end


function se_monster:on_unregister()
	cse_alife_monster_base.on_unregister( self )

	--' Убрать мапспот с собой
	--[[ квесты Доцента на установки меток на монстров убраны - это больше не нужно
	if sim_statistic.show_monster_spot == true then
		local community, rank = sim_statistic.getNpcType(self)
--                level.map_remove_object_spot(self.id, "alife_presentation_monstr")
		if community=="controller" then
		level.map_remove_object_spot(self.id, "kontroler_spot")
		elseif community=="bloodsucker" then
		level.map_remove_object_spot(self.id, "bloodsucker_spot")
		elseif community=="pseudo_gigant" then
		level.map_remove_object_spot(self.id, "pseudo_gigant_spot")
		end
	end
	]]
	
	smart_terrain.unregister_npc(self)
end
--------------------
function se_monster:on_death(killer)
	cse_alife_monster_base.on_death(self, killer)

	--' Убрать мапспот с собой
	--[[ квесты Доцента на установки меток на монстров убраны - это больше не нужно
	if sim_statistic.show_monster_spot == true then
		local community, rank = sim_statistic.getNpcType(self)
		if community=="controller" then
		level.map_remove_object_spot(self.id, "kontroler_spot")
		elseif community=="bloodsucker" then
		level.map_remove_object_spot(self.id, "bloodsucker_spot")
		elseif community=="pseudo_gigant" then
		level.map_remove_object_spot(self.id, "pseudo_gigant_spot")
		end
	end
	]]
	
	-- почистим отношения
	local sm = ogse_signals.get_mgr()
	sm:call("on_release_npc", self.id)
end
--------------------
function se_monster:fill_exclusives()
	self:get_ini()
	self.smart_terrain_conditions             = smart_terrain.read_smart_terrain_conditions( self )

	if self.smart_terrain_conditions then
		for name, condlist in pairs(self.smart_terrain_conditions) do
			smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
		end
	end
end

--------------------
function is_creature_day(obj, day_night_switch)
	--проверка на дневной/ночной режим
	if day_night_switch then
		if obj.day_begin~=-1 and obj.day_end~=-1 then
			local hrs = level.get_time_hours()
			local de = obj.day_end
			if obj.day_begin>obj.day_end then
				hrs = hrs+24
				de=de+24
			end
			if not (hrs >= obj.day_begin and hrs < de) then
				return false
			end
		end
	end
	return true
end
--------------------
function select_logic(obj)
	local is_underground = 1
	if game_graph():valid_vertex_id(obj.m_game_vertex_id) then
		is_underground = levels_types[alife():level_name(game_graph():vertex(obj.m_game_vertex_id):level_id())]
	end
	local day_night_switch,check_distance
	if is_underground==0 then
		day_night_switch = true
		check_distance = true
	else
		day_night_switch = false
		check_distance = false
	end
	if obj.day_night_switch~=nil then day_night_switch = obj.day_night_switch end
	if obj.check_distance~=nil then check_distance = obj.check_distance end
	return day_night_switch,check_distance
end

function save_state(obj, state)
	if state~=obj.state then
		obj.state = state
	end
	return state
end
