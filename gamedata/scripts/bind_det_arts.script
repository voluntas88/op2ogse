-- -*- mode: lua; coding: windows-1251-dos -*-
--//----------------------------------------
--//Автор: Singapur22 переписано Proper70
--//Дата выхода: 10.01.2010
--//-----------------------------------------

-- В эту таблицу вписывать только секции, которые не начинаются с af_
local list_arts = {
  [ "gold_art"            ] = true,
  [ "artifact_electro_crystal_thorn"] = true,
  [ "art_acumm"           ] = true,
  [ "5.45x39_izomorf"     ] = true,
  [ "5.45x39_izomorf_1"   ] = true,
  [ "osnova_fotik"        ] = true,
  [ "linza_fotik"         ] = true,
  [ "pushka_fotik"        ] = true,
  [ "rukzak_izomorf"      ] = true,
  [ "izom_globus"         ] = true,
  [ "izomorf_kristal"     ] = true,
  [ "ammo_zhekan_izomorf" ] = true,
  [ "kaktus_izomorf"      ] = true,
  [ "izomorf_kompas"      ] = true,
  [ "wa2000_izomorf"      ] = true,
  [ "7.62x54_izomorf"     ] = true,
  [ "psevdokristall"      ] = true,
  [ "izomorf_plastilin"   ] = true,
}

local snd_obj = xr_sound.get_safe_sound_object( "ambient\\da_beep" )


function attach( sm )
  sm:subscribe({ signal = "on_drop",         fun = this.remove_art_det })
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.remove_art_det })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.use_art_det    })
end


function use_art_det( obj )
  local in_slot = db.actor:item_in_slot( 8 )
  if in_slot and in_slot:id() == obj:id() then
    subscribe()
    iteration_del_spot()
  end
end


function remove_art_det( obj )
  if not db.actor:item_in_slot( 8 ) then
    unsubscribe()
    iteration_del_spot()
  end
end


local signals
function subscribe()
  if not signals then
    signals = {
      { signal = "on_update", fun = this.on_update },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:subscribe( s )
    end
  end
end

function unsubscribe()
  if signals then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:unsubscribe( s )
    end
    signals = nil
  end
end


local update_t
function on_update()
  if update_t and update_t > time_global() then return end
  update()
  update_t = time_global() + snd_obj:length()
end


function update()
  local found = db.actor:item_in_slot( 8 )
  if found then
    found = found:section()
    if
      found == "det_artefact_super"
      and has_alife_info( "tel_dcity_kanaliy" )
    then
      det_super( artefacts )
    elseif found == "detektor_amorf" then
      det_izomorf( artefacts )
    elseif found == "det_artefact_indy" then
      det_indy( artefacts )
    end
  end
end


local artefacts = {}
function det_indy()
  local max_dist = 40 * 40
  for k, v in pairs( db.artefacts ) do
    local obj = v.obj
    if not artefacts[ k ] then
      artefacts[ k ] = { spot = false, tim_beep = 0 }
    end
    v = artefacts[ k ]
    if not obj:parent() then
      local dist = db.actor:position():distance_to_sqr( obj:position() )
      if dist <= max_dist then
        if v.tim_beep <= time_global() and not snd_obj:playing() then
          snd_obj:play_no_feedback(
            db.actor, sound_object.s2d, 0, vector(), 1.0
          )
          v.tim_beep = time_global() + math.floor( dist / max_dist * 2500 )
        end
      else
        this.del_spot( k, v )
      end
    else
      this.del_spot( k, v )
    end
  end
end


function det_izomorf()
  local max_dist = 60 * 60
  for k, v in pairs( db.artefacts ) do
    local obj = v.obj
    if not artefacts[ k ] then
      artefacts[ k ] = { spot = false, tim_beep = 0 }
    end
    v = artefacts[ k ]
    if not obj:parent() then
      local dist = db.actor:position():distance_to_sqr( obj:position() )
      if dist <= max_dist then
        if not v.spot then
          level.map_add_object_spot(
            k, "artefact_location", game.translate_string(
              get_string( obj:section(), "inv_name" )
            )
          )
          v.spot = true
        end
        if v.tim_beep < time_global() and not snd_obj:playing() then
          v.tim_beep = time_global() + 2500
          snd_obj:play_no_feedback(
            db.actor, sound_object.s2d, 0, vector(), 1.0
          )
        end
      else
        this.del_spot( k, v )
      end
    else
      this.del_spot( k, v )
    end
  end
end


function det_super()
  local max_dist = 60 * 60
  for k, v in pairs( db.artefacts ) do
    local obj = v.obj
    if not artefacts[ k ] then
      artefacts[ k ] = { spot = false, tim_beep = 0 }
    end
    v = artefacts[ k ]
    if not obj:parent() then
      if not v.spot then
        level.map_add_object_spot(
          k, "artefact_location", game.translate_string(
            get_string( sobj:section_name(), "inv_name" )
          )
        )
        v.spot = true
      end
      local dist = db.actor:position():distance_to_sqr( sobj.position )
      if dist <= max_dist then
        if v.tim_beep < time_global() and not snd_obj:playing() then
          v.tim_beep = time_global() + 2500
          snd_obj:play_no_feedback(
            db.actor, sound_object.s2d, 0, vector(), 1.0
          )
        end
      end
    else
      this.del_spot( k, v )
    end
  end
end


function iteration_del_spot()
  for k, v in pairs( artefacts ) do
    if v.spot then
      local sobj = alife():object( k )
      if sobj then
        this.del_spot( k, v )
      end
    end
  end
end


function del_spot( k, v )
  if v.spot then
    level.map_remove_object_spot( k, "artefact_location" )
    v.spot = false
  end
end


function bind_artefact( obj )
  obj:bind_object( artefact_binder( obj ) )
end


class "artefact_binder"( object_binder )
function artefact_binder:__init( obj ) super( obj )
  self.degraded = false
end


function artefact_binder:net_spawn( data )
  if not object_binder.net_spawn( self, data ) then
    return false
  end
  local sobj = alife():object( self.object:id() )
  db.artefacts[ self.object:id() ] = {
    [ "obj"       ] = self.object,
    [ "parent_id" ] = sobj.parent_id,
  }
  if not self.degraded and self.object:condition() < 0.01 then
    zero_all_af_effects( self.object )
    self.degraded = true
  end
  return true
end


function artefact_binder:net_destroy()
  db.artefacts[ self.object:id() ] = nil
  object_binder.net_destroy( self )
end
