-- -*- mode: lua; coding: windows-1251-dos -*-
--//----------------------------------------
--//Автор: Singapur22 переписано Proper70
--//Дата выхода: 10.01.2010
--//-----------------------------------------

local snd_obj = xr_sound.get_safe_sound_object( "ambient\\da_beep" )


function attach( sm )
  sm:subscribe({ signal = "on_drop",         fun = this.remove_art_det })
  sm:subscribe({ signal = "on_item_to_ruck", fun = this.remove_art_det })
  sm:subscribe({ signal = "on_item_to_slot", fun = this.use_art_det    })
end


function use_art_det( obj )
  local in_slot = db.actor:item_in_slot( 8 )
  if in_slot and in_slot:id() == obj:id() then
    subscribe()
  end
end


function remove_art_det( obj )
  if not db.actor:item_in_slot( 8 ) then
    unsubscribe()
  end
end


local signals
function subscribe()
  if not signals then
    signals = {
      { signal = "on_update", fun = this.on_update },
    }
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:subscribe( s )
    end
  end
end

function unsubscribe()
  if signals then
    local sm = ogse_signals.get_mgr()
    for _, s in ipairs( signals ) do
      sm:unsubscribe( s )
    end
    signals = nil
  end
end


function on_update()
  local delay = update_det_arts() or 2500
  ogse_signals.get_mgr():reschedule( math.max( delay, snd_obj:length() ) )
end


function update_det_arts()
  local found = db.actor:item_in_slot( 8 )
  if found then
    found = found:section()
    if found == "det_artefact_indy" then
      return det_indy( 40, 1 )
    else
      return det_indy( 40, 2 )
    end
  end
end


local artefacts = {}
function det_indy( max_dist, max_level )
  max_dist = math.pow( max_dist, 2 )
  local min_delay
  for k, prop in pairs( db.artefacts ) do
    if prop.level <= max_level then
      local obj = prop.obj
      if not artefacts[ k ] then
        artefacts[ k ] = { tim_beep = 0 }
      end
      local v = artefacts[ k ]
      if not obj:parent() then
        local dist = db.actor:position():distance_to_sqr( obj:position() )
        if dist <= max_dist then
          if v.tim_beep <= time_global() then
            snd_obj:play_no_feedback(
              db.actor, sound_object.s2d, 0, vector(), 1.0
            )
            local delay = math.floor( dist / max_dist * 2500 )
            v.tim_beep  = time_global() + delay
            if min_delay then
              if delay < min_delay then
                min_delay = delay
              end
            else
              min_delay = delay
            end
          end
        end
      end
    end
  end
  return min_delay
end


function bind_artefact( obj )
  if not get_bool( obj:section(), script_name() .. ".ignore", false ) then
    obj:bind_object( artefact_binder( obj ) )
  end
end


class "artefact_binder"( object_binder )
function artefact_binder:__init( obj ) super( obj )
  self.degraded     = false
  self.first_update = false
end


function artefact_binder:net_spawn( data )
  if not object_binder.net_spawn( self, data ) then
    return false
  end
  local sobj = alife():object( self.object:id() )
  if sobj then
    local t = {
      [ "handmade"  ] = get_bool(
        self.object:section(), script_name() .. ".handmade", true
      ),
      [ "level"     ] = get_u32(
        self.object:section(), script_name() .. ".level", 1
      ),
      [ "obj"       ] = self.object,
      [ "parent_id" ] = sobj.parent_id,
    }
    if not self.degraded and self.object:condition() < 0.01 then
      zero_all_af_effects( self.object )
      self.degraded = true
    end
    local pk = xs_netpk.net_alife_item( sobj )
    if pk:isOk() then
      local data = pk:get()
      local cd   = data.custom_data:getString()
      if cd and cd ~= "" then
        local ini = create_ini_file( cd )
        if ini:section_exist( "dsh" ) then
          t.handmade = ( get_bool( "dsh", "handmade", nil, ini ) ~= false )
        end
      end
    end
    if t.handmade then
      local cost = dsh.get_handmade_cost( self.object:section() )
      if cost then
        set_inv_item_cost( self.object, cost )
      end
    end
    db.artefacts[ self.object:id() ] = t
  end
  return true
end


function artefact_binder:update()
  if not self.first_update then
    local item = self.object
    local ps   = item:get_physics_shell()
    if ps and not item:parent() then
      ps:apply_force( 0, item:mass() * 1300, 0 )
    end
    self.first_update = true
  end
end


function artefact_binder:net_destroy()
  db.artefacts[ self.object:id() ] = nil
  object_binder.net_destroy( self )
end
