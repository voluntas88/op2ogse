function attach( sm )
  sm:subscribe({ signal = "on_body_hide",     fun = this.on_body_hide })
  sm:subscribe({ signal = "on_body_open",     fun = this.on_body_open })
  sm:subscribe({ signal = "on_drop",          fun = this.on_drop })
  sm:subscribe({ signal = "on_key_up",        fun = this.on_key_up })
  sm:subscribe({ signal = "on_select_item",   fun = this.on_select_item })
  sm:subscribe({ signal = "on_take",          fun = this.on_take })
  sm:subscribe({ signal = "on_take_from_box", fun = this.on_take_from_box })
end

local is_body_opened = false
local last_selected_item, move_from, move_to;
local transferred = {}

function on_body_hide( npc )
  is_body_opened = false
  last_selected_item = nil
  move_from = nil
  move_to   = nil
end

function on_body_open( npc )
  is_body_opened = true
  last_selected_item = nil
  move_from = nil
  move_to   = nil
  local from = level.get_target_obj()
end

function on_select_item( obj, sobj )
  if is_body_opened then
    last_selected_item = obj
    move_from = nil
    move_to   = nil
  end
end

function on_key_up( key, bind )
  if is_body_opened and last_selected_item and key == DIK_keys.DIK_Z then
    local sobj = alife():object( last_selected_item:id() )
    if sobj then
      local from, to
      if move_from then
        from = move_from
        to   = level.get_target_obj()
      elseif move_to then
        from = level.get_target_obj()
        to   = move_to
      else
        if sobj.parent_id == 0 then
          from = db.actor
          to   = level.get_target_obj()
        else
          from = level.get_target_obj()
          to   = db.actor
        end
      end
      if from and to then
        local items = {}
        if from:is_inventory_box() then
          for i = 0, from:inv_box_count() - 1 do
            local item = from:object_from_inv_box( i )
            if item:section() == last_selected_item:section() then
              table.insert( items, item )
            end
          end
        else
          for i = 0, from:object_count() - 1 do
            local item = from:object( i )
            if item:section() == last_selected_item:section() then
              table.insert( items, item )
            end
          end
        end
        for i, v in ipairs( items ) do
          local found = alife():object( v:id() )
          if found and found.parent_id == from:id() then
            from:transfer_item( v, to )
          end
        end
      end
    end
    last_selected_item = nil
    return true
  end
end

function on_drop( obj, sobj )
  if sobj == nil then return end
  local sect = obj:section()
  if transferred[ sect ] then
    if transferred[ sect ][ obj:id() ] then
      if transferred[ sect ][ obj:id() ] == 2 then
        transferred[ sect ] = nil
      end
      return
    end
  else
    transferred[ sect ] = {}
  end
  if is_body_opened then
    move_from = db.actor
    move_to   = nil
  end
  if not GetShift() then return end
  local box_id = sobj.parent_id
  if not ( box_id == 0 or box_id == 65535 ) then
    transferred[ sect ][ obj:id() ] = 1
    local last_item = obj:id()
    local sim   = alife()
    local items = {}
    for i = 0, db.actor:object_count() - 1 do
      local item_from_inv = db.actor:object( i )
      if item_from_inv:section() == sect then
          table.insert( items, item_from_inv )
      end
    end
    local box = level.object_by_id( box_id )
    for i, v in ipairs( items ) do
      local found = sim:object( v:id() )
      if found.parent_id == 0 then
        db.actor:transfer_item( v, box )
        transferred[ sect ][ v:id() ] = 1
        last_item = v:id()
      end
    end
    transferred[ sect ][ last_item ] = 2
  end
end

function on_take( obj, sobj )
  if sobj == nil then return end
  local sect = obj:section()
  if sect == "separator" then return end
  if transferred[ sect ] then
    if transferred[ sect ][ obj:id() ] then
      if transferred[ sect ][ obj:id() ] == 2 then
        transferred[ sect ] = nil
      end
      return
    end
  else
    transferred[ sect ] = {}
  end
  if not is_body_opened then return end
  move_from = nil
  move_to   = db.actor
  if not GetShift() then return end
  local from = level.get_target_obj()
  if from then
    transferred[ sect ][ obj:id() ] = 1
    local last_item = obj:id()
    local sim   = alife()
    local items = {}
    for i = 0, from:object_count() - 1 do
      local item_from_inv = from:object( i )
      if item_from_inv:section() == sect then
        table.insert( items, item_from_inv )
      end
    end
    for i, v in ipairs( items ) do
      local found = sim:object( v:id() )
      if found.parent_id == from:id() then
        from:transfer_item( v, db.actor )
        transferred[ sect ][ v:id() ] = 1
        last_item = v:id()
      end
    end
    transferred[ sect ][ last_item ] = 2
  end
end

function on_take_from_box( box, item, sitem )
  if sitem == nil then return end
  if not GetShift() then return end
  local sect = item:section()
  if transferred[ sect ] then
    if transferred[ sect ][ item:id() ] then return end
  else
    transferred[ sect ] = {}
  end
  move_from = nil
  move_to   = db.actor
  transferred[ sect ][ item:id() ] = 1
  local last_item = item:id()
  local box_id = box:id()
  local sim    = alife()
  local items  = {}
  for i = 0, box:inv_box_count() - 1 do
      local item_from_box = box:object_from_inv_box( i )
      if item_from_box:section() == sect then
          table.insert( items, item_from_box )
      end
  end
  for i, v in ipairs( items ) do
    local obj = sim:object( v:id() )
    if obj and obj.parent_id == box_id then
      box:transfer_item( v, db.actor )
      transferred[ sect ][ v:id() ] = 1
      last_item = v:id()
    end
  end
  transferred[ sect ][ last_item ] = 2
end
