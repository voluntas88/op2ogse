-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_monster_enemy_callback", fun = this.enemy_callback })
  sm:subscribe({ signal = "on_npc_enemy_callback", fun = this.enemy_callback })
end


local ignore_enemies = {}

function on_spawn()
  local dsh_sect = "dsh.enemy.ignore"
  if sys_ini:section_exist( dsh_sect ) then
    for _, k in ipairs( get_section_keys( dsh_sect ) ) do
      ASSERT( ( not ignore_enemies[ k ] ), "a second record for %s found", k )
      ignore_enemies[ k ] = parse_names( get_string( dsh_sect, k ) )
      for _, j in ipairs( ignore_enemies[ k ] ) do
        if ignore_enemies[ j ] then
          table.insert( ignore_enemies[ j ], k )
        else
          ignore_enemies[ j ] = { k }
        end
      end
    end
  end
end


local cache = {}
local freq  = 60000

function enemy_callback( obj, enemy, result )
  if db.actor and enemy:id() == db.actor:id() then return end
  local is_enemy
  if cache[ obj:id() ] and cache[ obj:id() ][ enemy:id() ] then
    local res, ttl = unpack( cache[ obj:id() ][ enemy:id() ] )
    if ttl < time_global() then
      is_enemy = res
    else
      cache[ obj:id() ][ enemy:id() ] = nil
    end
  end
  if is_enemy == nil then
    is_enemy = check_is_enemy_always( obj, enemy )
    if cache[ obj:id() ] then
      cache[ obj:id() ][ enemy:id() ] = { is_enemy, time_global() + freq }
    else
      cache[ obj:id() ] = {
        [ enemy:id() ] = { is_enemy, time_global() + freq }
      }
    end
  end
  if not is_enemy then
    table.insert( result, is_enemy )
    return true
  end
end


function check_is_enemy_always( obj, enemy )
  local ignories = {
    this.get_ignore_by_community,
    this.get_ignore_by_name_or_strn,
  }
  for _, f in ipairs( ignories ) do
    local ignore = f( obj )
    if ignore then
      local strn, begin_job = get_smart_terrain( enemy )
      for _, ignore_name in ipairs( ignore ) do
        if
          enemy:name() == ignore_name
          or is_ignored_community( enemy, ignore_name )
          or ( strn and strn:name() == ignore_name and begin_job )
        then
          return false
        end
      end
    end
  end
  return true
end


function get_ignore_by_community( obj )
  local keys = {}
  if IsMonster( obj ) then
    table.insert( keys, "monster" )
  elseif IsStalker( obj ) then
    table.insert( keys, obj:character_community() )
  end
  for _, k in ipairs( keys ) do
    if ignore_enemies[ k ] then
      return ignore_enemies[ k ]
    end
  end
end


function is_ignored_community( enemy, ignore_name )
  local keys = {}
  if IsMonster( enemy ) then
    table.insert( keys, "monster" )
  elseif IsStalker( enemy ) then
    table.insert( keys, enemy:character_community() )
  end
  for _, k in ipairs( keys ) do
    if k == ignore_name then return true end
  end
  return false
end


function get_ignore_by_name_or_strn( obj )
  if ignore_enemies[ obj:name() ] then
    return ignore_enemies[ obj:name() ]
  end
  local strn = get_smart_terrain( obj )
  if strn and ignore_enemies[ strn:name() ] then
    return ignore_enemies[ strn:name() ]
  end
end


function get_smart_terrain( obj )
  local sobj = alife():object( obj:id() )
  if sobj and sobj.smart_terrain_id then
    local strn_id = dsh.is_free_logic_mob( sobj ) or sobj:smart_terrain_id()
    if strn_id ~= 65535 then
      local strn      = alife():object( strn_id )
      local begin_job = false
      if strn then
        strn:initialize_if_needed()
        begin_job = ( strn.gulag.Object_didnt_begin_job[ sobj.id ] == false )
      end
      return strn, begin_job
    end
  end
end
