-- -*- mode: lua; coding: windows-1251-dos -*-

need_update = true

local belt     = {}
local belt_id  = {}
local belt_obj = {}
local belt_status = false
inventory_open = false
-- local separator_spawned = false
local separator = "separator"
local af_idol_monolita_on_belt = false

local debug = false
local flag



function update()

	if (need_update == false) or has_alife_info("paused_on_load") then return end

	if debug == true and belt_status == true then get_console():execute("belt_status=false") end
	belt_status = false

--[[
	-- Спавним разделяющий елемент
	if (separator_spawned == false) then
		alife():create(separator,
			db.actor:position(),
			db.actor:level_vertex_id(),
			db.actor:game_vertex_id(),
			db.actor:id())
		separator_spawned = true
		if debug == true then get_console():execute("separator_spawned") end
		return
	end
]]

	belt = {}
	belt_id = {}
	flag = 0

	-- Сканируем инвентарь
	scan_inv()
--	вместо количества теперь идет проверка по иммунитетам
--	remove_duplicate()
-- moved to dsh_inventory_proxy.script
--	check_immunities()
	check_idol_monolita()
	
	need_update = false

--[[
	-- Удаляем разделяющий елемент
	db.actor:inventory_for_each(del_separator)
	separator_spawned = false
]]

	if debug == true and belt_status == false then get_console():execute("belt_status=true") end
	belt_status = true

	if debug == true then
		for i,k in pairs(belt) do
			get_console():execute(i.."="..k)
		end
	end
	
end


local hit_immunities = {
  [ "burn_immunity"          ] = 0,
  [ "strike_immunity"        ] = 0,
  [ "shock_immunity"         ] = 0,
  [ "wound_immunity"         ] = 0,
  [ "radiation_immunity"     ] = 0,
  [ "telepatic_immunity"     ] = 0,
  [ "chemical_burn_immunity" ] = 0,
  [ "explosion_immunity"     ] = 0,
  [ "fire_wound_immunity"    ] = 0,
}

local af_restore_speeds = {
  [ "bleeding_restore_speed"  ] = 0,
  [ "health_restore_speed"    ] = 0,
  [ "power_restore_speed"     ] = 0,
  [ "radiation_restore_speed" ] = 0,
  [ "satiety_restore_speed"   ] = 0,
}


-- Перебор предметов инвентаря
function scan_inv()
  for k, total in pairs( hit_immunities ) do
    hit_immunities[ k ] = 0
  end
  for k, total in pairs( af_restore_speeds ) do
    af_restore_speeds[ k ] = 0
  end
  belt_obj = {}
  for i = 0, db.actor:belt_count() - 1 do
    local item = db.actor:item_on_belt( i )
    local it_section = item:section()
    local it_id = item:id()
    insert_to_table( belt, it_section )
    belt_id[ item:id() ] = true
    if not belt_obj[ it_section ] then
      belt_obj[ it_section ] = {}
    end
    table.insert( belt_obj[ it_section ], item )
    ---- log1("CHECK0:"..tostring(section).." "..tostring(it_id))
    local imm_sect = get_string( it_section, "hit_absorbation_sect" )
    if imm_sect then
      for k, total in pairs( hit_immunities ) do
        local absorb_val = 1 - get_float( imm_sect, k, 1 )
        hit_immunities[ k ] = total + absorb_val
      end
    end
    for k, total in pairs( af_restore_speeds ) do
      local val = get_float( it_section, k, 0 )
      af_restore_speeds[ k ] = total + val
    end
  end
end


function on_belt_hit_immunity( sect )
  return hit_immunities[ sect ] or 0
end


function on_belt_restore_speed( k )
  return af_restore_speeds[ k ] or 0
end


-- Добавление в таблицу
function insert_to_table(tbl, section)
	if tbl[section] == nil then
		tbl[section] = 1
	else
		tbl[section] = tbl[section] + 1
	end
end

-- Удаление из таблицы
function remove_from_table(tbl, section)
  if tbl[ section ] then
	if tbl[section] == 1 then
		tbl[section] = nil
	else
		tbl[section] = tbl[section] - 1
	end
  end
end

-- Удаление разделяющего предмета
function del_separator(item)
	if item:section() == separator then
		local sobj = alife():object(item:id())
		if sobj then
			alife():release(sobj, true)
		end
		if debug == true then get_console():execute("separator_removed") end
	end
end

-- Определение налечия предмета в одном из слотов
function slot_item(item)
	for i=0,12 do
		local obj = db.actor:item_in_slot(i)
		if obj and item:id() == obj:id() then
			return i
		end
	end

	return nil
end


-- Открытие/закрытие инвентаря
function on_inventory_info(info_id)
	if info_id == "ui_inventory" or info_id == "ui_trade" then
		inventory_open = true
		if debug == true then get_console():execute("inventory_open") end	
	elseif info_id == "ui_inventory_hide" or info_id == "ui_trade_hide" then
		inventory_open = false
		need_update = true
		if debug == true then get_console():execute("inventory_close") end
	end
end

-- Принудительное обновление инвентаря
function forced_inventory_update(mode)
	need_update = true
	if mode == true then
		update()
	end
end

--[[
function check_blood()
--   if belt_status == true then
      if belt["af_blood"]~=nil and belt["af_blood"]>0 then -- то есть когда параметр пояса[af_blood] равен 1, 2, 3.. Сколько навесишь Камней.
             amk.send_tip("Кровь Камня на поясе")
          end
--   end
end
]]

--[[
local unique_sect =
{
["af_caterpillar"] = true,
["af_arhara_globus"] = true,
["af_vyvert_green"] = true,
["af_blood_green"] = true,
["af_dummy_spring_red"] = true,
["af_dummy_battery_red"] = true,
["af_dummy_pellicle_red"] = true,
["af_babka_3"] = true,
["af_babka_4"] = true,
["af_armor_4"] = true,
["af_cry_3"] = true,
["af_dik_4"] = true,
["af_kol_3"] = true,
["af_kol_4"] = true,
["af_pudd_4"] = true,
["af_spirit_3"] = true,
["af_spirit_4"] = true,
["af_gold_fish"] = true,
["af_eye_voron"] = true
}

--оставляет на поясе по одному(фиг,теперь двум) артефакту каждого вида
function remove_duplicate()
	local t = check_duplicate()
	for k, v in pairs(belt_id) do
		local sobj = alife():object(k)
		if sobj then
			local sect = sobj:section_name()
			--if is_unique(sobj:clsid()) and t[sect] ~= nil  and t[sect] > 0 then
			--if is_unique(sect) and t[sect] ~= nil  and t[sect] > 0 then
			if unique_sect[sect] and t[sect] ~= nil and t[sect] > 0 then
				alife():release(sobj, true)
				local text="Убраны лишние артефакты "..game.translate_string(amk.get_inv_name(sect)).." с пояса"
				news_manager.send_tip(db.actor, text, nil, nil, nil)
				amk.spawn_item_in_inv(sect, db.actor)
				t[sect] = t[sect] - 1
			end
		end
	end
end

--собирает инфу о дупликатах на поясе
--возвращает таблицу вида [секция арта] = <количество лишних артов>
function check_duplicate()
	local result = {}
	for k, v in pairs(belt) do
		if v > 2 then
			result[k] = v - 2
		end
	end
	return result
end
]]

--возвращает true, если предмет должен быть на поясе в единственном числе
--function is_unique(section)
	--[[local result = false
        for i=1,table.getn(unique_sect) do
            if section == unique_sect[i] then
                result = true
                break
            end
        end]]

	
	--return (section ~= nil and unique_sect[section] == true)
	--return result
--end


-- Проверка на иммунитеты и удаление с пояса лишних артов
local imm_limits = {100, 100, 100, 100}
local imm_limit, sobj, sect, imm_sect, bad_imm

local immunities = {
  { sect = "burn_immunity", name = "Ожог", total = 0 },
  { sect = "strike_immunity", name = "Удар", total = 0 },
  { sect = "shock_immunity", name = "Электрошок", total = 0 },
  { sect = "wound_immunity", name = "Разрыв", total = 0 },
  { sect = "radiation_immunity", name = "Радиация", total = 0 },
  { sect = "telepatic_immunity", name = "Телепатия", total = 0 },
  { sect = "chemical_burn_immunity", name = "Химический ожог", total = 0 },
  { sect = "explosion_immunity", name = "Взрыв",total = 0 },
  { sect = "fire_wound_immunity", name = "Пулестойкость", total = 0 },
}

function check_immunities( obj )
	if db.actor:object("af_invul") then return end

	imm_limit = imm_limits[level.get_game_difficulty()+1]
	
	repeat
		-- считаем иммунитеты
		total_immunities()
		
		-- проверяем иммунитеты
		bad_imm = bad_immunity()
		if bad_imm then 
			-- есть перебор в иммунитете - удаляем лишний арт и вновь считаем иммунитеты
			imm_remove_art(bad_imm, obj)
			-- break
		else
			-- все ок
			break
		end
	until false
end

function imm_remove_art( imm, obj )
  if not obj then
    for i = 0, db.actor:belt_count() - 1 do
      local item = db.actor:item_on_belt( i )
      local sobj = alife():object( item:id() )
      if sobj then
        local sect     = sobj:section_name()
	local imm_sect = get_string( sect, "hit_absorbation_sect" )
        if imm_sect then -- арт увеличивает иммунитет
	  local absorb_val = get_float( imm_sect, immunities[ imm ].sect, 1 )
	  if absorb_val < 1 then
            obj = item
            break
	  end
        end
      end
    end
  end
  local sobj = alife():object( obj:id() )
  if sobj then
    db.actor:move_to_ruck( obj )
    local sect = sobj:section_name()
    news_manager.send_tip(
      db.actor,
     "Для текущего уровня сложности создаваемый артефактами имммунитет "..immunities[imm].name.." не должен превышать "..tostring(imm_limit).."%. Артефакт "..game.translate_string(amk.get_inv_name(sect)).." убран с пояса.",
     nil, "nano", 20000
    )
  end
end

function bad_immunity()
	for i, v in ipairs( immunities ) do
		if v.total > imm_limit then
			return i
		end
	end
	return nil
end

function total_immunities()
  for i, v in ipairs( immunities ) do
    v.total = 0
  end
  for i = 0, db.actor:belt_count() - 1 do
    local item = db.actor:item_on_belt( i )
    local sobj = alife():object( item:id() )
    if sobj then
      local sect     = sobj:section_name()
      local imm_sect = get_string( sect, "hit_absorbation_sect" )
      if imm_sect then
        -- считаем иммунитеты
        for j, v in ipairs( immunities ) do
          local absorb_val = get_float( imm_sect, v.sect, 0 )
          v.total = v.total + 100 - math.floor( absorb_val * 100 + 0.1 )
        end
      end
    end
  end
end

-- предмет на поясе
function on_belt(sect)
	return belt[sect]
end

function items_on_belt()
	local count = 0
	for k,v in pairs(belt) do
		count = count+v
	end
	return count
end

function is_free_belt_slot()
	return items_on_belt() < rx_utils.read_from_ini(nil, "inventory", "max_belt", 1, 3)
end

function get_free_belt_slot()
	if is_free_belt_slot() then return end
	
	local sect
	
	for k,v in pairs(belt_id) do
		local obj = level.object_by_id(k)
		sect = obj:section()
		
		if not string.find(sect, "bioradar") and sect ~= "af_invul" and rx_utils.read_from_ini(nil, sect, "class", "", 1) ~= "D_SIMDET" then
			db.actor:move_to_ruck( obj )
			remove_from_table(belt, sect)
			belt_id[k] = nil
                        if belt_obj[ sect ] then
                          if table.getn( belt_obj[ sect ] ) > 1 then
                            local out = {}
                            for _, k in ipairs( belt_obj[ sect ] ) do
                              if k:id() ~= obj:id() then
                                table.insert( out, k )
                              end
                              belt_obj[ sect ] = out
                            end
                          else
                            belt_obj[ sect ] = nil
                          end
                        end
			forced_inventory_update( false )
			return
		end
	end
end

-- Идол Монолита на поясе
function check_idol_monolita()
	if not has_alife_info("snp_shadows_start") then return end

	if belt["af_idol_monolita"] then
		if not af_idol_monolita_on_belt then
			-- одели арт
			af_idol_monolita_on_belt = true
			ogse_weather_mgr.get_weather_mgr():change_cur_weather( "grey" )
		end
	else
		if af_idol_monolita_on_belt then
			ogse_weather_mgr.get_weather_mgr():change_cur_weather( "default" )
		end
		af_idol_monolita_on_belt = false
	end
end


function on_belt_obj( sect )
  return belt_obj[ sect ]
end
