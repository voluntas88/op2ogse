-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm ) -- для менеджера сигналов
  sm:subscribe({ signal = "on_destroy", fun = this.on_destroy })
  sm:subscribe({ signal = "on_spawn",   fun = this.on_spawn   })
  sm:subscribe({ signal = "on_update",  fun = this.on_update  })
end


-- читаем глобальные параметры эффектов здоровья
local satiety_v = get_float("actor_script_condition", "satiety_v")
ASSERT(satiety_v, "ogse_actor_conditions_mgr: 'satiety_v' parameter not found!")
local light_hunger_limit = get_float("actor_script_condition", "light_hunger_limit")
ASSERT(light_hunger_limit, "ogse_actor_conditions_mgr: 'light_hunger_limit' parameter not found!")
local critical_hunger_limit = get_float("actor_script_condition", "critical_hunger_limit")
ASSERT(critical_hunger_limit, "ogse_actor_conditions_mgr: 'critical_hunger_limit' parameter not found!")
local satiety_power_factor = get_float("actor_script_condition", "satiety_power_factor")
ASSERT(satiety_power_factor, "ogse_actor_conditions_mgr: 'satiety_power_factor' parameter not found!")
local satiety_health_v_base = get_float("actor_script_condition", "satiety_health_v")
ASSERT(satiety_health_v_base, "ogse_actor_conditions_mgr: 'satiety_health_v' parameter not found!")
local satiety_health_factor = get_float("actor_script_condition", "satiety_health_factor")
ASSERT(satiety_health_factor, "ogse_actor_conditions_mgr: 'satiety_health_factor' parameter not found!")
local max_stand_power = get_float("actor_condition", "stand_power")
ASSERT(max_stand_power, "ogse_actor_conditions_mgr: 'stand_power' parameter not found!")
local satiety_k = max_stand_power
  * ( 1 - satiety_power_factor ) / light_hunger_limit

local engine_satiety_v = get_float("actor_condition", "satiety_v")
ASSERT(engine_satiety_v, "ogse_actor_conditions_mgr: 'actor_condition:engine_satiety_v' parameter not found!")
local engine_satiety_health_v = get_float("actor_condition", "satiety_health_v")
ASSERT(engine_satiety_health_v, "ogse_actor_conditions_mgr: 'actor_condition:satiety_health_v' parameter not found!")
local engine_satiety_power_v = get_float("actor_condition", "satiety_power_v")
ASSERT(engine_satiety_power_v, "ogse_actor_conditions_mgr: 'actor_condition:satiety_power_v' parameter not found!")

local sprint_koef = get_float( "actor", "sprint_koef" )
ASSERT(
  sprint_koef,
  "ogse_actor_conditions_mgr: 'actor:sprint_koef' parameter not found!"
)
local override_sprint_koef

local walk_accel = get_float( "actor", "walk_accel" )
ASSERT(
  walk_accel,
  "ogse_actor_conditions_mgr: 'actor:walk_accel' parameter not found!"
)
local min_walk_accel = 4
local override_walk_accel

local def_jump_power = get_float( "actor_condition", "jump_power" )
ASSERT(
  def_jump_power,
  "ogse_actor_conditions_mgr: 'actor_condition:jump_power' parameter not found!"
)
local override_jump_power

local jump_weight_power = get_float( "actor_condition", "jump_weight_power" )
ASSERT(
  jump_weight_power,
  "ogse_actor_conditions_mgr: 'actor_condition:jump_weight_power' parameter not found!"
)

local overweight_jump_k = get_float( "actor_condition", "overweight_jump_k" )
ASSERT(
  overweight_jump_k,
  "ogse_actor_conditions_mgr: 'actor_condition:overweight_jump_k' parameter not found!"
)

local def_walk_power = get_float( "actor_condition", "walk_power" )
ASSERT(
  def_walk_power,
  "ogse_actor_conditions_mgr: 'actor_condition:walk_power' parameter not found!"
)

local walk_weight_power = get_float( "actor_condition", "walk_weight_power" )
ASSERT(
  walk_weight_power,
  "ogse_actor_conditions_mgr: 'actor_condition:walk_weight_power' parameter not found!"
)

local overweight_walk_k = get_float( "actor_condition", "overweight_walk_k" )
ASSERT(
  overweight_walk_k,
  "ogse_actor_conditions_mgr: 'actor_condition:overweight_walk_k' parameter not found!"
)

local def_max_weight = get_float( "inventory", "max_weight" )
ASSERT(
  def_max_weight,
  "ogse_actor_conditions_mgr: 'inventory:max_weight' parameter not found!"
)

local jump_speed = get_float( "actor", "jump_speed" )
ASSERT(
  jump_speed,
  "ogse_actor_conditions_mgr: 'actor:jump_speed' parameter not found!"
)
local override_jump_speed


local cam_inert, cur_cam_inert
local health_t, satiety_t
local pt

function on_spawn()
  pt        = { game.get_game_time():get() }
  cam_inert = get_console():get_float( "cam_inert" )
  if db.actor.health < 0.9 then
    health_t = 0
  end
  if db.actor.satiety < light_hunger_limit then
    satiety_t = 0
  end
end


function on_destroy()
  if cam_inert then
    cmd( "cam_inert", cam_inert )
  end
end


local cached_item_cond_effects = {}
local function get_item_cond_effect( item )
  --TODO: сделать получение эффекта непосредственно из объекта
  if item == nil or alife():object( item:id() ) == nil then return end
  local section = item:section()
  local ef = cached_item_cond_effects[ section ]
  if not ef then
    ef = {}
    ef.satiety_restore_speed  = get_float( section, "satiety_restore_speed",  0 )
    ef.health_restore_speed   = get_float( section, "health_restore_speed",   0 )
    ef.bleeding_restore_speed = get_float( section, "bleeding_restore_speed", 0 )
    ef.power_restore_speed    = get_float( section, "power_restore_speed",    0 )
    ef.additional_inventory_weight  = get_float(
      section, "additional_inventory_weight",  0
    )
    ef.additional_inventory_weight2 = get_float(
      section, "additional_inventory_weight2", 0
    )
    ef.psy_health_restore_speed = get_float(
      section, "psy_health_restore_speed", 0
    )
    cached_item_cond_effects[ section ] = ef
  end
  return ef
end


has_overweight = false
local cur_walk_accel = walk_accel - min_walk_accel
local override_power = 1
local use_overweight = true

function on_update()
  if device().precache_frame > 0 then return end
  if not ( db.actor and db.actor:alive() ) then return end
  local act = db.actor
  --log3("%04d/%02d/%02d %02d:%02d:%02d.%03d", unpack(pt))
  local previous_check_time = game.CTime()
  previous_check_time:set( unpack( pt ) )
  local current_time = game.get_game_time()
  local dt = current_time:diffSec( previous_check_time )
  if dt == 0 then return end
  pt = { current_time:get() }
  local ext = {
    [ "alcohol_restore_speed"    ] = 0,
    [ "bleeding_restore_speed"   ] = 0,
    [ "health_restore_speed"     ] = 0,
    [ "power_restore_speed"      ] = 0,
    [ "psy_health_restore_speed" ] = 0,
    [ "radiation_restore_speed"  ] = 0,
    [ "satiety_restore_speed"    ] = 0,
    [ "sprint_koef_add"          ] = 0,
  }
  ogse_signals.get_mgr():call( "on_before_actor_conditions_update", ext )
  -- учитываем здесь естественное оголодание, а также
  -- движковое(обнулять его нельзя, на нем основан показ свойств
  -- артефактов)
  local cur_satiety_v = satiety_v + (
    satiety_v * ( 1 - math.min( act.health, act.power ) )
  )
  local satiety_custom_k = 1
  if
    override_power < 1
    or act:is_actor_sprinting() or act:is_actor_climbing()
    or act:get_bleeding() > 0.1
  then
    satiety_custom_k = 2
  end
  cur_satiety_v = cur_satiety_v * satiety_custom_k
  local summary_satiety_effect = cur_satiety_v + engine_satiety_v
    + adjust_satiety_restore_speed( ext.satiety_restore_speed )
  local summary_health_effect  = satiety_health_v_base - engine_satiety_health_v
    + ext.health_restore_speed
  local summary_power_effect   = - engine_satiety_power_v
    + ext.power_restore_speed
  local summary_bleeding_restore_effect  = ext.bleeding_restore_speed
  local summary_psy_health_effect        = ext.psy_health_restore_speed
  local summary_radiation_restore_effect = ext.radiation_restore_speed
  local summary_alcohol_effect           = ext.alcohol_restore_speed
  local af_additional_inventory_weight   = 0
  local af_additional_inventory_weight2  = 0
  -- неучтённые в движке эффекты от артефактов на поясе
  for i = 0, act:belt_count() - 1 do
    local item = act:item_on_belt( i )
    local ef = get_item_cond_effect( item )
    if ef then
      local satiety_restore_speed = adjust_satiety_restore_speed(
        ef.satiety_restore_speed
      )
      summary_satiety_effect = summary_satiety_effect + satiety_restore_speed
      af_additional_inventory_weight  = af_additional_inventory_weight
        + ef.additional_inventory_weight
      af_additional_inventory_weight2 = af_additional_inventory_weight2
        + ef.additional_inventory_weight2
      summary_psy_health_effect = summary_psy_health_effect
        + ef.psy_health_restore_speed
    end
  end
  -- эффекты от брони
  local armor = db.actor:get_current_outfit()
  if armor then
    local ef = get_item_cond_effect( armor )
    if ef then
      local satiety_restore_speed = adjust_satiety_restore_speed(
        ef.satiety_restore_speed
      )
      summary_satiety_effect = summary_satiety_effect + satiety_restore_speed
      summary_health_effect  = summary_health_effect + ef.health_restore_speed
      summary_power_effect   = summary_power_effect + ef.power_restore_speed
      summary_bleeding_restore_effect = summary_bleeding_restore_effect
        + ef.bleeding_restore_speed
      summary_psy_health_effect = summary_psy_health_effect
        + ef.psy_health_restore_speed
    end
  end
  -- эффекты, связанные c голодом
  if act.satiety < light_hunger_limit then
    local sadd = ( light_hunger_limit - act.satiety ) * satiety_k
    summary_power_effect = summary_power_effect + sadd
  end

  if act.satiety < critical_hunger_limit then
    local hadd = ( act.satiety - critical_hunger_limit )
      * satiety_health_factor
    summary_health_effect = summary_health_effect + hadd
  end

  -- TODO: учесть потерю сил и здоровья от недосыпа
  --
  --TODO: оптимизировать вычисление суммарного эффекта,
  -- сделать это только по факту изменения объектов на поясе
  act.satiety = summary_satiety_effect * dt
  -- ограничиваем снизу. TODO: может учесть это в самом движке
  if act.satiety < 0 then act:set_actor_condition_float( nil, 0.0, 256 ) end
  act.health = summary_health_effect * dt
  if not ogse_sleep_mgr.is_sleep_active() then
    act.power = summary_power_effect * dt
  end
  if
    summary_bleeding_restore_effect > 0
    or summary_bleeding_restore_effect < 0
  then
    if act:get_bleeding() > 0 then
      act:heal_wounds( summary_bleeding_restore_effect * dt )
    end
  end
  act.radiation = summary_radiation_restore_effect * dt
  --if act.satiety < 0.1 then act.satiety = 1 end
  if
    summary_psy_health_effect > 0
    or summary_psy_health_effect < 0
  then
    act.psy_health = summary_psy_health_effect * dt
  end
  if
    summary_alcohol_effect > 0
    or summary_alcohol_effect < 0
  then
    act.alcohol = summary_alcohol_effect * dt
  end

  local cur_sprint_koef = override_sprint_koef or (
    sprint_koef + ext.sprint_koef_add
  )
  set_sprint_factor( cur_sprint_koef )

  cur_walk_accel = walk_accel - min_walk_accel
  if act.satiety < light_hunger_limit then
    if not satiety_t then satiety_t = time_global() + 10000 end
    if satiety_t < time_global() then
      cur_walk_accel = cur_walk_accel * ( act.satiety / light_hunger_limit )
    end
  else
    satiety_t = nil
  end
  if act.health < 0.9 then
    if not health_t then health_t = time_global() + 10000 end
    if health_t < time_global() then
      cur_walk_accel = cur_walk_accel * ( act.health / 0.9 )
    end
  else
    health_t = nil
  end

  local inv_weight  = db.actor:get_inventory_weight()
  local max_weight  = db.actor:get_actor_max_weight()
    + af_additional_inventory_weight2
  local walk_weight = db.actor:get_actor_max_walk_weight()
    + af_additional_inventory_weight
  if af_additional_inventory_weight > 0 then
    db.actor:set_actor_max_walk_weight( walk_weight )
  end
  if af_additional_inventory_weight2 > 0 then
    db.actor:set_actor_max_weight( max_weight )
  end
  if armor then
    max_weight  = max_weight  + get_float(
      armor:section(), "additional_inventory_weight2",  0
    )
    walk_weight = walk_weight + get_float(
      armor:section(), "additional_inventory_weight", 0
    )
    if armor:condition() < 0.8 then
      cur_walk_accel = cur_walk_accel * ( armor:condition() / 0.8 )
    end
  end
  local new_cam_inert
  if inv_weight > max_weight and use_overweight then
    has_overweight = true
    if inv_weight > walk_weight then inv_weight = walk_weight end
    local k1     = ( inv_weight - max_weight ) / ( walk_weight - max_weight )
    local k2     = 1 - k1
    cur_walk_accel = cur_walk_accel * k2
    new_cam_inert  = k1
    if k2 < 0.1 then
      override_power = 0.1
    else
      override_power = k2
    end
    set_overweight_jump_k( overweight_jump_k )
    set_overweight_walk_k( overweight_walk_k )
    set_jump_weight_power( jump_weight_power )
    set_walk_weight_power( walk_weight_power )
  else
    has_overweight = false
    override_power = 1
    new_cam_inert  = 0
    set_overweight_jump_k( 1 )
    set_overweight_walk_k( 1 )
    -- если экзоскелет переносит 170 кг., то сил на перенос 170-и
    -- кг. должно тратиться столько же, как на перенос 80-и кг. в одном
    -- свитере.
    set_jump_weight_power( jump_weight_power * ( def_max_weight / max_weight ) )
    set_walk_weight_power( walk_weight_power * ( def_max_weight / max_weight ) )
  end

  if act.power < 0.7 then
    cur_walk_accel = cur_walk_accel * ( act.power / 0.7 )
    local power_inert = 1 - act.power / 0.7
    if power_inert > new_cam_inert then new_cam_inert = power_inert end
  end
  set_walk_accel( override_walk_accel or ( min_walk_accel + cur_walk_accel ) )

  if cur_walk_accel < 1 then
    set_jump_speed( 0 )
  else
    set_jump_speed( override_jump_speed or jump_speed )
  end

  local cur_jump_power = override_jump_power or def_jump_power
  if act.satiety < light_hunger_limit and satiety_t < time_global() then
    cur_jump_power = cur_jump_power + (
      ( 0.9 - cur_jump_power ) * ( 1 - ( act.satiety / light_hunger_limit ) )
    )
  end
  if act.health < 0.9 and health_t < time_global() then
    cur_jump_power = cur_jump_power + (
      ( 0.9 - cur_jump_power ) * ( 1 - ( act.health / 0.9 ) )
    )
    if act.health < 0.8 then
      local health_inert = 0.8 - act.health
      if health_inert > new_cam_inert then new_cam_inert = health_inert end
    end
  end
  set_jump_power( cur_jump_power )

  if new_cam_inert and new_cam_inert ~= cur_cam_inert then
    if new_cam_inert > 0 then
      local min_cam_inert = math.max( 0.4, cam_inert + 0.1 )
      if min_cam_inert < 0.8 then
        cmd(
          "cam_inert",
          min_cam_inert + (
            math.round( ( 0.8 - min_cam_inert ) * new_cam_inert * 100 ) / 100
          )
        )
      end
    else
      cmd( "cam_inert", cam_inert )
    end
    cur_cam_inert = new_cam_inert
  end
end


function disable_sprint()
  set_sprint( 1 )
end
function set_sprint( koef )
  override_sprint_koef = koef
end
function restore_sprint()
  set_sprint( nil )
end


function change_jump_power( k )
  override_jump_power = k
end


function change_jump_speed( k )
  override_jump_speed = k
  set_jump_speed( override_jump_speed or jump_speed )
end


function change_walk_accel( k )
  override_walk_accel = k
  set_walk_accel( override_walk_accel or ( min_walk_accel + cur_walk_accel ) )
end


function adjust_satiety_restore_speed( v )
  if db.actor:is_actor_sprinting() or db.actor:is_actor_climbing() then
    if v > 0 then
      v = v / 2
    elseif v < 0 then
      v = v * 2
    end
  end
  return v
end


function get_overweight_power()
  return override_power
end


function switch_use_overweight( mode )
  use_overweight = mode and true or false
end
