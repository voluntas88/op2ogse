-- -*- mode: lua; coding: windows-1251-dos -*-
--/amk_rel_1/
-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9

class "main_menu" (CUIScriptWnd)

function main_menu:__init() super()
	self.mbox_mode = 0
   self:InitControls()
   self:InitCallBacks()
   self:InitGameSetupMenu()
	get_console():execute("r2_sun_near_border 1")
end

function main_menu:__finalize()

end

function main_menu:InitControls()
	self:Init(0,0,1024,768)			  
    local xml = CScriptXmlInit()
    xml:ParseFile("ui_mm_main.xml")
     
    xml:InitStatic("back_movie", self)
    xml:InitStatic("fire_movie", self)
    xml:InitStatic("background", self)
    self.shniaga = xml:InitMMShniaga("shniaga_wnd",self);
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	
	
	local _ver = xml:InitStatic		("static_version",self)
	local mm						= _G.main_menu.get_main_menu()
	_ver:SetText					(mm:GetGSVer())
	_ver = xml:InitStatic("mod_version",self)
	local txt = meceniy_utils.read_mod_ver("txt")
	_ver:SetText(txt)
--	local amk_version    	= amk_ver.amk_version
--	local amk_revision	= amk_ver.amk_revision
--	local debug_mode = ""
--	_ver:SetText("Версия игры - " .. mm:GetGSVer() .. "  " .. amk_title .. " " .. amk_version .. " " .. amk_revision)
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,				self.OnButton_load_spawn,			self)
	-- options																											
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
	-- load																												
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save																												
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)
	self:AddCallback("btn_save_level",	ui_events.BUTTON_CLICKED,				self.OnButton_save_level_clicked,	self)
	-- multiplayer																										
--	self:AddCallback("btn_multiplayer", ui_events.BUTTON_CLICKED,				self.OnButton_multiplayer_clicked,	self)
	-- quit																												
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box																										
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)
	--amk
	self:AddCallback("btn_amk",		ui_events.BUTTON_CLICKED,				self.amk_options,		self)

end
function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	
	if 	self.mbox_mode == 1 then
		self:LoadLastSave()	
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	ui_mm_opt_add.check_options()
	
	local					console = get_console()
	console:execute			("main_menu off")
	console:execute			("load_last_save")
end

function main_menu:OnButton_last_save()
	if not alife() or not db.actor or not db.actor:alive() then
--	if (alife() == nil) then
		self:LoadLastSave	();
		return
	end
	
	self.mbox_mode			= 1
	self.message_box:Init	("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	if getFS():exist("$game_saves$", "credits.ltx") ~= nil then 
	--	local console = get_console()
	--	console:execute("main_menu off")
		game.start_tutorial("credits_seq")
	end
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end


function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	
	if (level.game_id() ~= 1) then		
		self.message_box:SetText("ui_mm_disconnect_message")	-- MultiPlayer
	else
		self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
	end
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	archievements.save_gametime()
	ui_mm_opt_add.check_options()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	ui_mm_opt_add.check_options()
	ogse_rebind_key.unbind_key()
	cmd("main_menu off")
	archievements.mm_opt()
	ui_mm_opt_add.buy_quest_item()
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:StartGame()	
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:StartGame()
end

function main_menu:StartGame()
	ui_mm_opt_add.check_options()

	local console = get_console()
	
	if (alife() ~= nil) then
		console:execute	("disconnect")	
	end
	
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
	archievements.on_new_game()
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
		self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.spawn_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_save_clicked()
-- переделано на локальное определение для освобождения памяти при выходе из меню
	local save_dlg = ui_save_dialog.save_dialog()
	save_dlg.owner = self
	
	self:GetHolder():start_stop_menu(save_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
	
--[[
	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
--]]
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end
	ogse_rebind_key.rebind_key()
	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
  amk_mod.hud_update=true
end

function main_menu:OnButton_load_clicked()
-- переделано на локальное определение для освобождения памяти при выходе из меню
	local load_dlg = ui_load_dialog.load_dialog()
	load_dlg.owner = self
	
	self:GetHolder():start_stop_menu(load_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
	
--[[
	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
]]
end

function main_menu:OnButton_multiplayer_clicked()
	if self.mp_dlg ==nil then
		self.mp_dlg = ui_mp_main.mp_main()
		self.mp_dlg.owner = self
	end
	self.mp_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.mp_dlg, true)
	self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
	
--	self.mp_dlg:OnBtn_Refresh()
	
	local console			= get_console()
	console:execute			("check_for_updates 0")
	
	self.mp_dlg:OnRadio_NetChanged()
end

function main_menu:OnButton_save_level_clicked()
	if level.present() and (db.actor ~= nil) and db.actor:alive() then
		cmd("main_menu", "off")
		ui_mm_opt_add.check_options()
		get_console():execute("main_menu off")
		u3_utils.savegame_on_level()
		archievements.mm_opt()
	end
end

function main_menu:Dispatch(cmd, param)  --virtual function
	if cmd == 2 then
		self:OnButton_multiplayer_clicked()
	end
	return true
end

local point_count = 0

function main_menu:main_cheat_f3()
	-- Выдадим сообщение о нашем местоположении
	local text
	local vid
	local gvid
	local a = vector() -- Тип переменной
	local text
	local actor_vid = game_graph():vertex(alife():actor().m_game_vertex_id):level_id()
	local valid_level = isRegisteredLevel(gvid)

	a    = db.actor:position()        -- Наше положение в координатах
	vid  = db.actor:level_vertex_id() -- секция уровня
	gvid = db.actor:game_vertex_id()  -- секция карты
	text = "Позиция:\\nX= "..a.x.."\\nY= "..a.y.."\\nZ= "..a.z.."\\nV= "..vid.."\\nG= "..gvid.."\\nLEVEL= "..actor_vid.."\\nVALID_LEVEL = "..tostring(valid_level)
	log1("############################################")
	log1("##[waypoint"..tostring(point_count).."]")
	log1("##points = p0")
	log1("##p0:name = wp00")
	log1("##p0:flags = 0x1")
	log1("##p0:position = "..a.x..","..a.y..","..a.z)
	log1("##p0:game_vertex_id = "..gvid)
	log1("##p0:level_vertex_id = "..vid)
	log1("############################################")
	point_count = point_count + 1
	flush_log()
	news_manager.send_tip(db.actor, text, nil, nil, 30000)
end

--// Метод описан и открыт Malandrinus'om. 
function main_menu:personal_test()
	--/* Файл промежуточен, так называемый файл обменный. 
	-- В файле дополнительно нужно настроить путь непосредственно к вашему скрипту теста. */
	local res, err = pcall(personal_test_proxy.main)
	log1(res and "~~Succesfull MyTest3 Execution!" or "~~"..err)
	flush_log()
	--// Можно использовать кратко log1(res and "Succesfull_MyTest3_Execution!" or string.gsub(err, " ", "_")), но в данном случае, я приверженец старых методов. Phoenix.	
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
--	local bind = dik_to_bind(dik)
	local console = get_console()
	
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				ui_mm_opt_add.check_options()
				ogse_rebind_key.unbind_key()
				cmd("main_menu", "off")
				archievements.mm_opt()
				ui_mm_opt_add.buy_quest_item()
			end
			
	--/* Для универсализации, вызов скрипта персонального.
	-- запускается без проверки alife, ввиду некоторых оссобеностей функциональной проверки в игре, так-же удален выход из главного меню, ввиду возможной специфики проводимых тестов.  */
		elseif dik == DIK_keys.DIK_N then
--			self.personal_test()
	--// Phoenix

		elseif dik == DIK_keys.DIK_F6 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				cmd("main_menu", "off")
				device():pause(true)
				dsh_op2quicksave.op2quicksave()
				device():pause(false)
			end
		elseif dik == DIK_keys.DIK_F8 then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				cmd("main_menu", "off")
				device():pause(true)
				cmd(string.format("save pqs_%s_%02d_%02d_%02d", 
					level.name(),
					level.get_time_days(),
					level.get_time_hours(),
					level.get_time_minutes()))
				device():pause(false)
			end
		elseif dik == DIK_keys.DIK_S then
			if level.present() and (db.actor ~= nil) and db.actor:alive() then
				self:OnButton_save_level_clicked()
			end
		
		elseif dik == DIK_keys.DIK_L then
			self:OnButton_last_save()
			
		elseif dik == DIK_keys.DIK_F1 then
             db.actor:set_actor_position(device().cam_pos:add(device().cam_dir:mul(1.0)))

		elseif 	dik == DIK_keys.DIK_Q then
			self:OnMessageQuitWin()
		--elseif dik == DIK_keys.DIK_M then self:matants()	
		--elseif dik == DIK_keys.DIK_Z then self:to_community()	
		elseif 	dik == DIK_keys.DIK_A then
			if amk.check_game() then 
				self:amk_options()
			end	
		elseif dik == DIK_keys.DIK_F4 then
	          self:show_position_informer_window()	
		else
		  if level.present() and db.actor and db.actor:alive() then
			-- Показать текущие координаты
			if dik == DIK_keys.DIK_F3 then
				self:main_cheat_f3()
			elseif dik == DIK_keys.DIK_P then
				if _sdata.GlobalEnable == false then
					_sdata.GlobalEnable = true
				else
					_sdata.GlobalEnable = false
					_sdata.switch_off()
				end
			end
		  end
		end
		
	end
   
	return true
end

function main_menu:amk_options()
-- если еще ни разу не вызывали, то обозначим наш новый скрипт
	if self.amk_options_dlg == nil then
		self.amk_options_dlg = ui_amk_options.amk_options()
		self.amk_options_dlg.owner = self
	end
-- останавливаем родительский элемент, запускаем свой, но родителя показываем.
	self:GetHolder():start_stop_menu(self.amk_options_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(false)

end

function main_menu:matants()
mutant_manager.effector_spa()
end
function main_menu:to_community()
db.actor:give_info_portion("val_bandit_talk") 
db.actor:set_character_community("stranger", 0, 0)
end

function main_menu:show_position_informer_window()
	if not db.debug then return end
	
	if self.cheat_dlg == nil then
		self.cheat_dlg = positioninformer.pi()
		self.cheat_dlg.owner = self
	end
	self:GetHolder():start_stop_menu(self.cheat_dlg, true)
	self:GetHolder():start_stop_menu(self, true)
	self:Show(true)
end

function main_menu:InitGameSetupMenu()
	local f = getFS()
	if f:exist("$game_saves$", "game_setup.ltx") == nil then 
		-- самый первый запуск, устанавливаем дефолтные значения опций
		local f1 = f:update_path("$app_data_root$", "user.ltx")
		local f2 = f:update_path("$game_saves$", "game_setup.ltx")
		f:file_copy(f1, f2)
--		f2 = f:update_path("$game_saves$", "autochange_difficulty.ltx")
--		f:file_copy(f1, f2)
		f2 = f:update_path("$game_saves$", "dynamic_bioradar.ltx")
		f:file_copy(f1, f2)
		f2 = f:update_path("$game_saves$", "autosave_enable.ltx")
		f:file_copy(f1, f2)
--		f2 = f:update_path("$game_saves$", "pause_on_load.ltx")
--		f:file_copy(f1, f2)
		f2 = f:update_path("$game_saves$", "animations.ltx")
		f:file_copy(f1, f2)
		f2 = f:update_path("$game_saves$", "autograb_body.ltx")
		f:file_copy(f1, f2)
--		f2 = f:update_path("$game_saves$", "new_sms.ltx")
--		f:file_copy(f1, f2)
--		f2 = f:update_path("$game_saves$", "fast_respawn.ltx")
--		f:file_copy(f1, f2)
--		f2 = f:update_path("$game_saves$", "transparent_treasure.ltx")
--		f:file_copy(f1, f2)
		f2 = f:update_path("$game_saves$", "smart_monster_parts.ltx")
		f:file_copy(f1, f2)
		f2 = f:update_path("$game_saves$", "hud_plus_enabled.ltx")
		f:file_copy(f1, f2)
	end
end

-------------------->> CoP style load mod

class "show_start_screen" (ogse_qt.quick_timer)
function show_start_screen:__init(time)
	self.counter = 0
end
function show_start_screen:condition()
	self.counter = self.counter + 1
	return self.counter == 2
end
function show_start_screen:action()
	device():pause( true ) --cmd("main_menu", 1)
	hide_start_screen():start()
end

class "hide_start_screen" (show_start_screen)
function hide_start_screen:__init(time) super()
end
function hide_start_screen:action()
	get_console():hide()
	press_any_key_on_start = true
	--level.show_indicators()
--	cmd("snd_volume_eff", sound_volume_eff) 
--	cmd("snd_volume_music", sound_volume_music)
	sound_volume_eff,sound_volume_music = nil,nil
end

function start()
	if has_alife_info("storyline_actor_start") then
		show_start_screen():start()
		--
        sound_volume_eff = get_con_float("snd_volume_eff")
--        cmd("snd_volume_eff", 0)
        sound_volume_music = get_con_float("snd_volume_music")
--        cmd("snd_volume_music", 0)
		press_any_key_on_start = false
	else
		press_any_key_on_start = true
	end
end
--------------------<< CoP style load mod

if ui_mm_opt_main.GetOption("pause_on_load") then 
	autopause.main()
end
