-- -*- mode: lua; coding: windows-1251-dos -*-

function attach( sm )
  sm:subscribe({ signal = "on_first_update", fun = this.on_first_update })
  sm:subscribe({ signal = "on_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_take",  fun = this.on_take })
  sm:subscribe({ signal = "on_take_from_box", fun = this.on_take_from_box })
  sm:subscribe({ signal = "on_use",   fun = this.on_use   })
end


function on_use( obj, sobj )
  if not sobj then return end
  if meceniy_utils.teleporter_use == 0 then return end
  if obj:section() == "hand_teleporter" then
    local curr_lname = level.name()
    local endpoints  = meceniy_intellectual.tabl_changers_by_level
    local dst        = {}
    for lname, v in pairs( endpoints ) do
      if lname ~= curr_lname then
        table.insert( dst, v )
      end
    end
    local rnd_dst = dst[ math.random( 1, table.getn( dst ) ) ]
    teleport_me(
      {
        [ "arts" ] = {
          [ "af_electra_moonlight" ] = 2,
        },
        [ "can_teleport_checks" ] = {
          this.can_teleport_from_this_level,
        },
        [ "dst" ] = {
          [ "pos" ] = rnd_dst.p_dest_pos,
          [ "lv"  ] = rnd_dst.p_dest_lv,
          [ "gv"  ] = rnd_dst.p_dest_gv,
          [ "dir" ] = { 0, 0, 0 },
        },
        [ "randomize_pos" ] = 50,
      }
    )
    return true
  elseif obj:section() == "teleportator" then
    level.start_stop_menu( ui_teleportator.teleportator_menu(), true )
    return true
  elseif spawn_level_changer.teleports[ obj:section() ] then
    use_hand_teleport( obj:section() )
    return true
  end
end


function use_hand_teleport( sect )
  local desc  = spawn_level_changer.teleports[ sect ]
  local goto  = desc.goto_func[ math.random( 1, table.getn( desc.goto_func ) ) ]
  local place = spawn_level_changer.places[ goto ]
  local t = {
    [ "dst" ] = {
      [ "pos" ] = place.pos,
      [ "lv"  ] = place.lv,
      [ "gv"  ] = place.gv,
      [ "dir" ] = ( place.view or { 0, 0, 0 } ),
    },
  }
  if desc.art then
    t.art = desc.art
  elseif desc.pay then
    t.arts = {
      [ "af_electra_moonlight" ] = 2,
    }
    t.randomize_pos = 50
  end
  if desc.autosave then t.autosave = desc.autosave end
  if not teleport_me( t ) then
    if not desc.keep then
      ogse.spawn_item_in_inv( sect )
    end
  end
end


local teleported = false
function on_spawn()
  teleported = ogse.load_var( script_name() .. ".teleport_me", false )
  ogse.delete_var( script_name() .. ".teleport_me" )
  db.actor:disable_info_portion( "teleport_started" )
end


function on_first_update()
  local radius = ogse.load_var( script_name() .. ".randomize_pos", 0 )
  ogse.delete_var( script_name() .. ".randomize_pos" )
  if radius > 0 then
    local pos = randomize_position( db.actor, radius )
    db.actor:set_actor_position( pos )
  end
  local enemies = ogse.load_var( script_name() .. ".enemies", {} )
  ogse.delete_var( script_name() .. ".enemies" )
  if table.getn( enemies ) > 0 then
    local ids = {}
    for _, id in ipairs( enemies ) do
      table.insert( ids, tonumber( id ) )
    end
    teleport_enemies_to_me(
      ids, 5, ( 30 * ( 4 - level.get_game_difficulty() ) ) -- от 30 до 120
    )
  end
  if teleported then
    set_actor_power_max( 0.1 )
    ogse_st_mgr.delayed_fun_start( script_name() .. ".restore_power_delayed" )
      :set_delay(
        math.random( 1, level.get_game_difficulty() * 2 + 3 )
      )
      :init( script_name() .. ".restore_power_delayed" )
      :start()
    local step = ( 1 + level.get_game_difficulty() ) / 10
    db.actor.health     = 0 - math.random() * step
    db.actor.psy_health = 0 - math.random() * step
    db.actor.radiation  = math.random() * step
    db.actor.satiety    = 0 - math.random() * step
  end
end

function restore_power_delayed()
    set_actor_power_max( 1 )
end


function on_take( obj, sobj )
  if not sobj then return end
  if obj:section() == "separator" then return end
  spawn_level_changer.on_take_teleporter( obj )
end

function on_take_from_box( box, item, sitem )
  if not sitem then return end
  spawn_level_changer.on_take_teleportator( item )
end


function teleport_me( t )
  level.start_stop_menu( level.main_input_receiver(), true )
  if not can_teleport( t )   then return false end
  if not use_arts( t, true ) then return false end
  if t.autosave and t.autosave ~= level.name() then
    u3_utils.savegame_lc( "Телепорт", t.autosave )
  end
  if not use_arts( t ) then return false end
  ogse.save_var( script_name() .. ".teleport_me", true )
  if t.randomize_pos then
    ogse.save_var( script_name() .. ".randomize_pos", t.randomize_pos )
  end
  local enemies = get_enemies_around(
    5 * ( level.get_game_difficulty() + 1 ) -- от 5 до 20
  )
  if table.getn( enemies ) > 0 then
    ogse.save_var( script_name() .. ".enemies", enemies, "array" )
  end
  db.actor:give_info_portion( "teleport_started" )
  db.actor:disable_info_portion( "no_gravigun" )
  teleport_actor(
    t.dst.pos, t.dst.lv, t.dst.gv, ( t.dst.dir or { 0, 0, 0 } )
  )
  return true
end


function can_teleport( t )
  if not can_teleport_in_this_situation() then return false end
  if t.can_teleport_checks then
    for _, f in ipairs( t.can_teleport_checks ) do
      if not f() then return false end
    end
  end
  return true
end


function can_teleport_in_this_situation()
  if
    has_alife_info( "no_teleport_near_heli_btr" )
    or (
      has_alife_info( "kod_vveden_verno" )
      and not has_alife_info( "dead_city_atpeshka" )
    )
  then
    news_manager.send_tip(
      db.actor,
      "Не работает, зараза. Что-то не то. Может позже...",
      nil, "nano", 20000
    )
    return false
  end
  return true
end


function can_teleport_from_this_level()
  local endpoints = meceniy_intellectual.tabl_changers_by_level
  if not endpoints[ level.name() ] then
    local levels = {}
    for lname, _ in pairs( endpoints ) do
      table.insert( levels, game.translate_string( lname ) )
      news_manager.send_tip(
        db.actor,
        string.format(
          "Отсюда телепортироваться не получится, только с: %s.",
          table.concat( levels, ", " )
        ),
        nil, "nano", 10000
      )
      return false
    end
  end
  return true
end


function use_arts( t, test )
  local need_arts = 0
  local arts      = {}
  if t.art then
    arts[ t.art ] = 1
    need_arts     = need_arts + 1
  end
  if t.arts then
    for k, n in pairs( t.arts ) do
      arts[ k ] = n
      need_arts = need_arts + n
    end
  end
  if need_arts == 0 then return true end
  local use_arts = {}
  for k, n in pairs( arts ) do
    local objs = inventory.on_belt_obj( k )
    if objs and table.getn( objs ) >= n then
      for i = 1, n do
        table.insert( use_arts, objs[ i ] )
      end
    end
  end
  if table.getn( use_arts ) == need_arts then
    if not test then
      for _, obj in ipairs( use_arts ) do
        ogse.remove_item_from_inventory( obj )
      end
      inventory.forced_inventory_update( false )
    end
    return true
  end
  news_manager.send_tip(
    db.actor,
    "Эта шарманка без артефактов на поясе не работает.",
    nil, "nano", 20000
  )
  return false
end


local teleport_sid = 9799
function teleport_actor( pos, lvid, gvid, dir )
  fly.stop()
  local apos = db.actor:position()
  level.add_pp_effector( "teleport.ppe", 2006, false )
  dsh.timeout( 1000, function()
    create_level_changer(
      teleport_sid,
      { apos.x, apos.y, apos.z },
      db.actor:level_vertex_id(), db.actor:game_vertex_id(),
      nil, nil,
      pos, lvid, gvid, ( dir or { 0, 0, 0 } ),
      1, 3
    )
  end )
end


function create_level_changer( sid, position, lvid, gvid, spot, hint, dest_position, dest_lvid, dest_gvid, dest_dir_v, mode, shapes )
  local sobj = alife():create(
    "level_changer", vector():set( unpack( position ) ), lvid, gvid
  )
  ASSERT( sobj, "create_level_changer: failed to create level changer" )

  if spot ~= nil and hint ~= nil then
    level.map_add_object_spot_ser( sobj.id, spot, hint )
  end

  local initial_packet = xs_netpk.net_alife_level_changer( sobj )
  local table_lc       = initial_packet:get()

  table_lc.dest_position   = vector():set( unpack( dest_position ) )
  table_lc.dest_level_vertex_id = dest_lvid
  table_lc.dest_game_vertex_id  = dest_gvid
  table_lc.dest_direction  = vector():set( unpack( dest_dir_v ) )
  table_lc.dest_level_name = level_system_name_by_gvid( gvid )
  table_lc.silent_mode     = mode
  table_lc.story_id        = sid
  table_lc.restrictor_type = 3

  if type( shapes ) == "number" then
    table_lc.shapes:addSphere( shapes )
  elseif type( shapes ) == "table" then
    for i, shp in ipairs( shapes ) do
      if shp.shtype == 0 then --/ sphere
        table_lc.shapes:addSphere(
          shp.radius, vector():set( unpack( shp.center ) )
        )
      else --/ box
        table_lc.shapes:addBox(
          matrix():set(
            vector():set( unpack( shp.box[ 1 ] ) ),
            vector():set( unpack( shp.box[ 2 ] ) ),
            vector():set( unpack( shp.box[ 3 ] ) ),
            vector():set( unpack( shp.offset ) )
          )
        )
      end
    end
  else
    abort( "create_level_changer: unknown shape type" )
  end

  initial_packet:set( table_lc )
end


function randomize_position( npc, radius )
  local anoms = amk_anoms.get_anomaly_list( npc, radius )
  local lname = level.name()
  local gvn, gvx, lvx = amk_anoms.game_vertexes[ lname ][ 1 ], amk_anoms.game_vertexes[ lname ][ 2 ], amk_anoms.level_vertexes[ lname ]
  local lvids = {}
  for new_lv = 1, lvx do
    local pos  = level.vertex_position( new_lv )
    local dist = npc:position():distance_to( pos )
    if dist <= radius then
      local near_anom = false
      for _, anom in ipairs( anoms ) do
        if pos:distance_to( anom.pos ) <= anom.radius then
          near_anom = true
          break
        end
      end
      if not near_anom then table.insert( lvids, new_lv ) end
    end
  end
  local new_lv   = lvids[ math.random( 1, table.getn( lvids ) ) ]
  local pos      = level.vertex_position( new_lv )
  local new_gv   = 0
  local min_dist = 100000
  for a = gvn, gvx do
    g1 = game_graph():vertex( a ):game_point()
    if g1:distance_to( pos ) < min_dist then
      min_dist = g1:distance_to( pos )
      new_gv   = a
    end
  end
  if game_graph():valid_vertex_id( new_gv ) then
    return pos, new_lv, new_gv
  end
  return npc:position(), npc:level_vertex_id(), npc:game_vertex_id()
end


function teleport_enemies_to_me( enemies, min, radius )
  local lname = level.name()
  local gvn, gvx, lvx = amk_anoms.game_vertexes[ lname ][ 1 ], amk_anoms.game_vertexes[ lname ][ 2 ], amk_anoms.level_vertexes[ lname ]
  local lvids = {}
  for new_lv = 1, lvx do
    local pos  = level.vertex_position( new_lv )
    local dist = db.actor:position():distance_to( pos )
    if dist > min and dist <= radius then
      table.insert( lvids, new_lv )
    end
  end
  local sm = ogse_signals.get_mgr()
  for _, id in ipairs( enemies ) do
    local sobj = alife():object( id )
    if sobj then
      smart_terrain.unregister_npc( sobj )
      sobj:brain():can_choose_alife_tasks( false )
      sm:call( "on_release_npc", id )
      local new_lv   = lvids[ math.random( 1, table.getn( lvids ) ) ]
      local pos      = level.vertex_position( new_lv )
      local new_gv   = 0
      local min_dist = 100000
      for a = gvn, gvx do
        g1 = game_graph():vertex( a ):game_point()
        if g1:distance_to( pos ) < min_dist then
          min_dist = g1:distance_to( pos )
          new_gv   = a
        end
      end
      if game_graph():valid_vertex_id( new_gv ) then
        alife():teleport_object( "", pos, new_lv, new_gv, id )
      end
    end
  end
end


function get_enemies_around( radius )
  local enemies = {}
  for id in pairs( db.creature ) do
    if id then
      local obj = level.object_by_id( id )
      if obj and obj:is_custom_monster() and obj:alive() then
        local dist = obj:position():distance_to( db.actor:position() )
        if
          ogse.get_npc_relation( obj, db.actor ) == "enemy"
          and ( not ogse.is_quest_npc( obj ) )
          and (
            obj:see( db.actor )
            or obj:position():distance_to( db.actor:position() ) <= radius
          )
        then
          table.insert( enemies, obj:id() )
          xr_companion.reset_npc_logic( obj )
          xr_gulag.resetJob( obj )
        end
      end
    end
  end
  return enemies
end


--[=[ spawn_level_changer.remove_old_teleport() это уже делает
function start_del()
  local obj = alife():story_object( teleport_sid )
  if obj then
    alife():release( obj, true )
  end
end
start_del()
--]=]
