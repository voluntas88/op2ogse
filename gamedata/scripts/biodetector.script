-- -*- mode: lua; coding: windows-1251-dos -*-
-------------------------------------------------------------------------
-- Динамический биорадар с локатором, затуханием и универсальным худом --
-------------------------------------------------------------------------
local fading = true                             -- затухание (без локатора не работает)

local counter = 1
local max_count = 100   -- количество отображаемых объектов
local max_dist = 60
local screen_max_dist = 85 --100
local max_dist_rel = screen_max_dist/max_dist
local biomap_x_offset = 2       -- смещение начала рисунка от правого края текстуры
local biomap_y_offset = 16      -- смещение начала рисунка от верхнего края текстуры
-- все координаты и размеры должны совпадать с указанными в конфиге текстуры
local biomap_width = 256                                                                        
local biomap_heigth = 256
-- верхний левый угол окна
local biomap_x = 1024-biomap_width+biomap_x_offset              -- = 770
local biomap_y = -biomap_y_offset                                               -- = -16        
local center_x = biomap_x+biomap_width/2
local center_y = biomap_y+biomap_heigth/2
-- коэф. сжатия в зависимоcти от разрешения
local new_x, new_y
local old_x = 0
local old_y = 0
local koef_x = 1
local delta_x = 0

local hud = get_hud()
local dots = {}
local tex = [[biomap\white_dot]]
local actor_id = db.actor:id()
local detectorShowed = false
local math_pi_180 = 180/math.pi
local two_pi = 2*math.pi
local biomap                     -- худ, окно вращающегося локатора
local angle = 0                  -- текущий угол локатора в радианах
local step_angle = 1.5/math_pi_180 -- шаг за апдейт в радианах (скорость поворота)
local alpha = 255                       -- степень затухания
local min_alpha = 0.2           -- % от полной яркости в самом темном участке (интенсивность затухания)

local colors = {
  [ "npcs" ] = {
    [ "dog_"          ] = {
      [ "color" ] = { 252, 158,  66 },
      [ "parts" ] = { "mutant_dog_tail" }
    },
    [ "bloodsucker"   ] = {
      [ "color" ] = { 255,   0, 120 },
      [ "parts" ] = { "mutant_krovosos_jaw", "mutant_krovosos_red_jaw" }
    },
    [ "new_hell"      ] = {
      [ "color" ] = { 192,  60, 196 },
      [ "parts" ] = { "mutant_raptor_kogot" }
    },
    [ "rat_"          ] = {
      [ "color" ] = {   1,   1, 254 },
      [ "parts" ] = { "mutant_spleen_rat" }
    },
    [ "volkodav"      ] = {
      [ "color" ] = {   1,   1, 254 },
      [ "parts" ] = { "mutant_spleen_rat" }
    },
    [ "kikimora"      ] = {
      [ "color" ] = {   1,   1, 254 },
      [ "parts" ] = { "mutant_spleen_rat" }
    },
    [ "molerat"       ] = {
      [ "color" ] = {   1,   1, 254 },
      [ "parts" ] = { "mutant_spleen_rat" }
    },
    [ "pseudodog"     ] = {
      [ "color" ] = { 171,  94,  23 },
      [ "parts" ] = { "mutant_psevdodog_tail" }
    },
    [ "psy_dog"       ] = {
      [ "color" ] = { 171,  94,  23 },
      [ "parts" ] = { "mutant_psevdodog_tail" }
    },
    [ "tushkano"      ] = {
      [ "color" ] = { 64, 255, 255 },
      [ "parts" ] = {"mutant_face_tushkano" }
    },
    [ "rotan"         ] = {
      [ "color" ] = { 64, 155, 155 },
      [ "parts" ] = { "mutant_rotan_heart" }
    },
    [ "carlic"        ] = {
      [ "color" ] = { 64, 255, 255},
      [ "parts" ] = { "mutant_carlic_hand" }
    },
    [ "karlito"       ] = {
      [ "color" ] = { 64, 255, 255 },
      [ "parts" ] = { "mutant_carlic_hand" }
    },
    [ "tarakan"       ] = {
      [ "color" ] = { 255,   0, 120 },
      [ "parts" ] = { "part_tarakan_strong", "part_tarakan" }
    },
    [ "fracture"      ] = {
      [ "color" ] = {  94,   3,  80 },
      [ "parts" ] = { "mutant_fracture_hand" }
    },
    [ "bibliotekar"   ] = {
      [ "color" ] = {  94,   3,  80 },
      [ "parts" ] = { "part_digitis_biblio" }
    },
    [ "deathclaw"     ] = {
      [ "color" ] = {  94,   3,  80 },
      [ "parts" ] = { "mutant_deathclaw_antler" }
    },
    [ "flesh"         ] = {
      [ "color" ] = {  64, 153,  79 },
      [ "parts" ] = { "mutant_flesh_eye" }
    },
    [ "zanoza"        ] = {
      [ "color" ] = {  64, 153,  79 },
      [ "parts" ] = { "mutant_zanoza_leg" }
    },
    [ "cat"           ] = {
      [ "color" ] = { 252, 158,  66 },
      [ "parts" ] = { "mutant_tail_cat" }
    },
    [ "burer"         ] = {
      [ "color" ] = {   0, 238, 255 },
      [ "parts" ] = { "mutant_burer_hand", "mutant_burer_red_hand" }
    },
    [ "snork"         ] = {
      [ "color" ] = { 145,  71, 214 },
      [ "parts" ] = { "mutant_snork_leg" }
    },
    [ "nosales"       ] = {
      [ "color" ] = { 64, 255, 255 },
      [ "parts" ] = { "mutant_face_tushkano" }
    },
    [ "vypolzen"      ] = {
      [ "color" ] = { 145,  71, 214 },
      [ "parts" ] = { "mutant_vypolzen_hrebet" }
    },
    [ "controller"    ] = {
      [ "color" ] = {   0, 238, 255 },
      [ "parts" ] = { "mutant_hand_kontroler" }
    },
    [ "kontroller"    ] = {
      [ "color" ] = {   0, 238, 255 },
      [ "parts" ] = { "mutant_hand_kontroler" }
    },
    [ "psyonik"       ] = {
      [ "color" ] = {   0, 238, 255 },
      [ "parts" ] = { "mutant_hand_kontroler" }
    },
    [ "gigant"        ] = {
      [ "color" ] = { 255,   0, 255 },
      [ "parts" ] = { "mutant_psevdogigant_hand" }
    },
    [ "zombie_plague" ] = {
      [ "color" ] = { 127, 127, 127 },
      [ "parts" ] = { "mutant_plague_hand" }
    },
    [ "zombie"        ] = {
      [ "color" ] = { 127, 127, 127},
      [ "parts" ] = { "mutant_zombie_hand", "mutant_zombie_teeth", "rudiment_big" }
    },
    [ "vodjanoj"      ] = {
      [ "color" ] = { 127, 127, 127 },
      [ "parts" ] = { "mutant_zombie_hand", "mutant_zombie_teeth", "rudiment_big" }
    },
    [ "ghoul_"        ] = {
      [ "color" ] = { 127, 127, 127 },
      [ "parts" ] = { "mutant_zombie_hand", "mutant_zombie_teeth", "rudiment_big" }
    },
    [ "polter"        ] = {
      [ "color" ] = {   0, 238, 255 },
      [ "parts" ] = { "mutant_poltergeist_glas" }
    },
    [ "chimera"       ] = {
      [ "color" ] = { 255,   0,   0 },
      [ "parts" ] = { "mutant_chimera_kogot" }
    },
    [ "oboroten"      ] = {
      [ "color" ] = { 255,   0,   0 },
      [ "parts" ] = { "mutant_chimera_kogot" }
    },
    [ "boar"          ] = {
      [ "color" ] = {  64, 153,  79 },
      [ "parts" ] = { "mutant_boar_leg" }
    },
    [ "bear"          ] = {
      [ "color" ] = {  64, 153,  79 },
      [ "parts" ] = { "mutant_boar_leg" }
    },
    [ "spider"        ] = {
      [ "color" ] = { 164, 153,  79 },
      [ "parts" ] = { "mutant_spider_gland" }
    }
  },
  [ "stalker" ]   = { 255, 255,   0 },
  [ "corpse"  ]   = { 127, 127, 127 },
  [ "actor"   ]   = {   0, 255,   0 }
}


function getColor( obj )
  if obj:id() == db.actor:id() then
    return colors[ "actor" ]
  end
  if IsStalker( obj ) then
    if obj:alive() then
      return colors[ "stalker" ]
    else
      return colors[ "corpse"  ]
    end
  else
    local sect = sectFound( obj:section() )
    if sect then
      local sectData   = colors[ "npcs" ][ sect ]
      local partOnBelt = false
      local slot_item  = db.actor:item_in_slot( 12 )
      if slot_item then
        if slot_item:section() == "bioradar2" then
          partOnBelt = true
        end
      else
        partOnBelt = inventory.on_belt( "bioradar2" )
      end
      if not partOnBelt then
        for _, part in ipairs( sectData[ "parts" ] ) do
          if inventory.on_belt( part ) then
            partOnBelt = true
            break
          end
        end
      end
      if partOnBelt then
        if obj:alive() then
          return sectData[ "color" ]
        else
          return colors[ "corpse" ]
        end
      end
    end
  end
end


local sect_cache = {}
function sectFound( sect )
  if not sect_cache[ sect ] then
    for k, v in pairs( colors[ "npcs" ] ) do
      if string.find( sect, k ) then
        sect_cache[ sect ] = k
        break
      end
    end
  end
  return sect_cache[ sect ]
end


local can_work, hide, update_t = false, false
function update( mode )
  if
    db.actor:item_in_slot( 12 )
    and not ( ( mode and mode == "off" ) or bind_stalker.scopeUsed or hide )
  then
    detectorShowed = true
    new_x = device().width
    new_y = device().height
    if new_x ~= old_x or new_y ~= old_y then
      old_x = new_x
      old_y = new_y
      koef_x = ( new_y / new_x ) / ( 768 / 1024 )
      -- привязываем к правому краю экрана
      delta_x = 0
      if koef_x > 1 then
        delta_x = 2
      elseif koef_x < 1 then
        delta_x = 20
      end
      biomap_x = 1024 - biomap_width + biomap_x_offset + delta_x
      center_x = biomap_x + biomap_width / 2
      biodetectorRemove()
    end
    if not hud:GetCustomStatic( "biomap" ) then
      biomap=hud:AddCustomStatic( "biomap", true ):wnd()
      biomap:SetWndPos( biomap_x, biomap_y )
    end
    if db.dynamic_bioradar then
      if hud:GetCustomStatic( "biomap_sweep" ) then
        if not can_work then
          hud:RemoveCustomStatic( "biomap_sweep" )
        end
      else
        if can_work then
          biomap = hud:AddCustomStatic( "biomap_sweep", true ):wnd()
          biomap:SetWndPos( biomap_x, biomap_y )
        end
      end
    end

    -- вращение локатора. угол от 0 до 2Пи
    if db.dynamic_bioradar and can_work then
      angle = angle - step_angle
      if angle < 0 then
        angle = angle + two_pi
      end
      biomap:SetHeading( angle ) -- поворачиваем локатор
    end

    local actorPos = db.actor:position()
    local sdir     = device().cam_dir
    counter = 1
    if can_work then
      if update_t and update_t > time_global() then return end
      update_t = time_global() + 100
      for id, is_npc in pairs( db.creature ) do
        local obj    = level.object_by_id( id )
        local objPos = obj:position()
        if objPos:distance_to_xz( actorPos ) <= max_dist then
          -- определяем цвет
          local color = getColor( obj )
          if color then         -- есть цвет - рисуем
            -- получаем координаты точки
            local dir  = objPos:sub( actorPos )
            local vect = vector_rotate_y(
              vector():set( dir.x * max_dist_rel, 0, -dir.z * max_dist_rel ),
              math.atan2( -sdir.x, sdir.z ) * math_pi_180
            )
            -- абсолютные координаты точки
            local x = vect.x * math.sqrt( koef_x )
            local y = vect.z
            -- вычисляем альфу
            local alpha = 255
            -- актор в центре не затухает
            if db.dynamic_bioradar and fading and id ~= actor_id then
              -- затухание в зависимости о углового расстояния до
              -- локатора. все переводим в диапазон от 0 до 2Пи иначе
              -- глючит
              local corner = math.atan2( x, y ) - angle + math.pi / 2
              while corner < 0 do
                corner = corner + two_pi
              end
              alpha = 1 - corner / two_pi -- % затухания
              alpha = 255 * ( alpha + min_alpha * ( 1 - alpha ) ) -- интенсивность
            end
            color = GetARGB( alpha, color[ 1 ], color[ 2 ], color[ 3 ] )
            -- координаты точки относительно биорадара
            x = x + center_x
            y = y + center_y
            -- рисуем точку
            local dotName = "target_dot_" .. counter
            local custom_static = hud:GetCustomStatic( dotName )
            if not custom_static then
              custom_static = hud:AddCustomStatic( dotName, true )
              custom_static:wnd():InitTexture( tex )
            end
            custom_static:wnd():SetColor( color )
            custom_static:wnd():SetWndPos( x, y )
            dots[ counter ] = true
            counter = counter + 1
            if obj:id() ~= db.actor:id() and obj:alive() then
              local binder = obj:binded_object()
              local bvar   = script_name() .. ".update_t"
              if ( not binder[ bvar ] ) or binder[ bvar ] <= time_global() then
                obj:make_object_visible_somewhen( db.actor )
                binder[ bvar ] = time_global() + 1000
              end
            end
            if counter > max_count then
              break
            end
          end
        end
      end
    end
    if counter <= max_count then
      -- зачистка неактуальных точек
      for i = counter, max_count do
        if dots[ i ] then
          hud:RemoveCustomStatic( "target_dot_" .. i )
          dots[ i ] = nil
        end
      end
    end
  else
    if detectorShowed then
      biodetectorRemove()
    end
  end
end


function biodetectorRemove()
  detectorShowed = false
  if hud:GetCustomStatic( "biomap" ) then
    hud:RemoveCustomStatic("biomap")
    -- убираем вращающийся локатор
    if hud:GetCustomStatic( "biomap_sweep" ) then
      hud:RemoveCustomStatic( "biomap_sweep" )
    end
  end
  if dots then
    for i = 1, max_count do
      if dots[ i ] then
        local dotName = "target_dot_" .. i
        if hud:GetCustomStatic( dotName ) then
          hud:RemoveCustomStatic( dotName )
        end
      end
    end
    dots = {}
  end
end


function switch_onoff( mode )
  can_work = mode
end


function switch_hide( mode )
  hide = mode
end
